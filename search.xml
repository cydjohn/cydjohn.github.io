<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1. Two Sum</title>
    <url>/2016/12/15/1-Two-Sum/</url>
    <content><![CDATA[<h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><blockquote>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
</blockquote>
<blockquote>
<p>You may assume that each input would have exactly one solution.</p>
</blockquote>
<blockquote>
<p>Example:<br><em>Given nums = [2, 7, 11, 15], target = 9,</em></p>
</blockquote>
<blockquote>
<p><em>Because nums[0] + nums[1] = 2 + 7 = 9,</em><br><em>return [0, 1].</em></p>
</blockquote>
<blockquote>
<p>UPDATE (2016/2/13):<br>The return format had been changed to zero-based indices.<br>Please read the above updated description carefully.  </p>
</blockquote>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用一个map，存入<code>target-nums[i]</code>的值和当前下标，也就是与当前元素配对的值和下标。如果遇到map里面已经有的值就返回map里的下标和当前下标就好～</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>.<span class="built_in">find</span>(nums[i]) != <span class="built_in">map</span>.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                result.push_back(<span class="built_in">map</span>[nums[i]]);</span><br><span class="line">                result.push_back(i);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">map</span>[target - nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>121. Best Time to Buy and Sell Stock</title>
    <url>/2018/02/06/121-Best-Time-to-Buy-and-Sell-Stock/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Say you have an array for which the i^th element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7, 1, 5, 3, 6, 4]</span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">max. difference &#x3D; 6-1 &#x3D; 5 (not 7-1 &#x3D; 6, as selling price needs to be larger than buying price)</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7, 6, 4, 3, 1]</span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">In this case, no transaction is done, i.e. max profit &#x3D; 0.</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>遍历一遍数组，不断地更新最小值和利润的的值就好。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> profit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span> = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i:prices) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="built_in">min</span>) &#123;</span><br><span class="line">            <span class="built_in">min</span> = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i-<span class="built_in">min</span>&gt;profit)&#123;</span><br><span class="line">            profit = i - <span class="built_in">min</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> profit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>14. Longest Common Prefix</title>
    <url>/2018/04/28/14-Longest-Common-Prefix/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<p>If there is no common prefix, return an empty string “”.</p>
<p><strong>Example 1:</strong></p>
<blockquote>
<p><strong>Input:</strong> [“flower”,”flow”,”flight”]<br><strong>Output:</strong> “fl”</p>
</blockquote>
<p><strong>Example 2:</strong></p>
<blockquote>
<p><strong>Input:</strong> [“dog”,”racecar”,”car”]<br><strong>Output:</strong> “”</p>
</blockquote>
<p><strong>Explanation:</strong> There is no common prefix among the input strings.<br>Note:</p>
<p>All given inputs are in lowercase letters <code>a-z</code>.</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我的思路是以第一个字符串为标准设为<code>result </code>，依次寻找每个字符串的公共前缀，如果有不一样的就从<code>result</code>里把不一样的移除，剩下的<code>result</code>就是所求的公共前缀了。</p>
<p>然后就是看到别人的思路：从0开始依次遍历每一个字符串，如果是公共前缀就加到<code>result</code>里。</p>
<blockquote>
<p>貌似我的比他快了一毫秒O(∩_∩)O~</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(strs.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> result = strs[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">string</span> s:strs) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;result.<span class="built_in">size</span>() &amp;&amp; i&lt;s.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] != result[i]) &#123;</span><br><span class="line">                result.erase(i,result.<span class="built_in">size</span>()-i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(result.<span class="built_in">size</span>()&gt;s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            result.erase(s.<span class="built_in">size</span>(),result.<span class="built_in">size</span>()-s.<span class="built_in">size</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>从0开始依次遍历每一个字符串，如果是公共前缀就加到<code>result</code>里。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> prefix = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> idx=<span class="number">0</span>; strs.<span class="built_in">size</span>()&gt;<span class="number">0</span>; prefix+=strs[<span class="number">0</span>][idx], idx++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;strs.<span class="built_in">size</span>(); i++)</span><br><span class="line">            <span class="keyword">if</span>(idx &gt;= strs[i].<span class="built_in">size</span>() ||(i &gt; <span class="number">0</span> &amp;&amp; strs[i][idx] != strs[i<span class="number">-1</span>][idx]))</span><br><span class="line">                <span class="keyword">return</span> prefix;</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>13. Roman to Integer</title>
    <url>/2018/04/12/13-Roman-to-Integer/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>罗马数字共有7个，即Ⅰ（1）、Ⅴ（5）、Ⅹ（10）、Ⅼ（50）、Ⅽ（100）、Ⅾ（500）和Ⅿ（1000）。</p>
<ul>
<li>重复数次：一个罗马数字重复几次，就表示这个数的几倍。</li>
<li>右加左减：<ul>
<li>在较大的罗马数字的右边记上较小的罗马数字，表示大数字加小数字。</li>
<li>在较大的罗马数字的左边记上较小的罗马数字，表示大数字减小数字。</li>
<li>左减的数字有限制，仅限于I、X、C。比如45不可以写成VL，只能是XLV<br>但是，左减时不可跨越一个位值。比如，99不可以用IC（ {\displaystyle 100-1} 100-1）表示，而是用XCIX（ {\displaystyle [100-10]+[10-1]} [100-10]+[10-1]）表示。（等同于阿拉伯数字每位数字分别表示。）</li>
<li>左减数字必须为一位，比如8写成VIII，而非IIX。</li>
<li>右加数字不可连续超过三位，比如14写成XIV，而非XIIII。</li>
</ul>
</li>
</ul>
<blockquote>
<p>参考自<a href="https://zh.wikipedia.org/wiki/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97" target="_blank" rel="noopener">维基百科</a></p>
</blockquote>
<p>所以从右往左依次读取每一个字符，比较他们的大小。如果右边一位字符的值大于当前字符的值，就在总结果里面减去当前的值，如果大于或等于当前的值就在总结果加上当前的值。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; romanMap = &#123;&#123;<span class="string">'I'</span>,<span class="number">1</span>&#125;,&#123;<span class="string">'V'</span>,<span class="number">5</span>&#125;,&#123;<span class="string">'X'</span>,<span class="number">10</span>&#125;,&#123;<span class="string">'L'</span>,<span class="number">50</span>&#125;,&#123;<span class="string">'C'</span>,<span class="number">100</span>&#125;,&#123;<span class="string">'D'</span>,<span class="number">500</span>&#125;,&#123;<span class="string">'M'</span>,<span class="number">1000</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> result = romanMap[s[s.<span class="built_in">size</span>()<span class="number">-1</span>]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = s.<span class="built_in">size</span>()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(romanMap[s[i]]&gt;=romanMap[s[i+<span class="number">1</span>]]) &#123;</span><br><span class="line">            result+=romanMap[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            result-=romanMap[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>15. 3Sum</title>
    <url>/2018/01/23/15-3Sum/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>
<p><strong>Note:</strong> The solution set must not contain duplicate triplets.</p>
<blockquote>
<p>For example, given array S = [-1, 0, 1, 2, -1, -4],</p>
</blockquote>
<blockquote>
<p>A solution set is:<br>[<br> [-1, 0, 1],<br> [-1, -1, 2]<br>]</p>
</blockquote>
<a id="more"></a>


<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>为了避免重复的情况，数组需要先排序一下。</p>
<p>固定一个数字，然后再用两个指针，依次遍历整个数组（类似于two sum），找出符合条件的三个数字。</p>
<p>比如排好序以后的数字是 a b c d e f, 那么第一次固定a, 在剩下的 b c d e f 中进行2sum, 完了以后第二次枚举b, 只需要在 c d e f 中进行2sum，这样就避免了重复。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ Solution</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">threeSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    sort(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;<span class="number">0</span> &amp;&amp; (nums[i]==nums[i<span class="number">-1</span>])) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> h = nums.<span class="built_in">size</span>() <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;h) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = nums[i] + nums[l] + nums[h];</span><br><span class="line">            <span class="keyword">if</span>(sum == <span class="number">0</span>) &#123;</span><br><span class="line">                result.push_back(&#123;nums[i] , nums[l] , nums[h]&#125;);</span><br><span class="line">                <span class="keyword">while</span> (nums[l]==nums[l+<span class="number">1</span>]) ++l;</span><br><span class="line">                <span class="keyword">while</span> (nums[h]==nums[h<span class="number">-1</span>]) --h;</span><br><span class="line">                ++l;</span><br><span class="line">                --h;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                --h;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ++l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java Solution</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; results = <span class="keyword">new</span> LinkedList&lt;&gt;(); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> start = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length-<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(start&lt;end) &#123;</span><br><span class="line">            <span class="keyword">if</span>(-nums[i]&lt;nums[start]+nums[end]) &#123;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(-nums[i]&gt;nums[start]+nums[end]) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                results.add(Arrays.asList(nums[i], nums[start], nums[end]));</span><br><span class="line">                <span class="keyword">while</span>(start&lt;end &amp;&amp; nums[start] == nums[start+<span class="number">1</span>]) &#123;</span><br><span class="line">                    start++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(start&lt;end &amp;&amp; nums[end] == nums[end-<span class="number">1</span>]) &#123;</span><br><span class="line">                    end--;</span><br><span class="line">                &#125;</span><br><span class="line">                start++;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums.length-<span class="number">1</span> &amp;&amp; nums[i+<span class="number">1</span>]==nums[i]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>155. Min Stack</title>
    <url>/2018/01/13/155-Min-Stack/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>
<ul>
<li>push(x) – Push element x onto stack.</li>
<li>pop() – Removes the element on top of the stack.</li>
<li>top() – Get the top element.</li>
<li>getMin() – Retrieve the minimum element in the stack.</li>
</ul>
<p>Example:</p>
<blockquote>
<p>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin();   –&gt; Returns -3.<br>minStack.pop();<br>minStack.top();      –&gt; Returns 0.<br>minStack.getMin();   –&gt; Returns -2.</p>
</blockquote>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目要求在<code>O(1)</code>时间内实现，所以用一个Stack应该是不可能的，于是这题应该是用两个Stack，一个当做正常的Stack，一个专门用来储存最小值。</p>
<p><strong>不过后面看了Discuss，有人用一个栈就做出来了……</strong></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ Solution</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; nor;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">min</span>;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">min</span>.empty()||x&lt;=<span class="built_in">min</span>.top()) &#123;</span><br><span class="line">            <span class="built_in">min</span>.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">        nor.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nor.top()==<span class="built_in">min</span>.top()) &#123;</span><br><span class="line">            <span class="built_in">min</span>.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        nor.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nor.top();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java Solution</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    Stack&lt;Integer&gt; nor = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; min = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(min.isEmpty()||x&lt;=min.peek()) &#123;</span><br><span class="line">            min.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">        nor.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nor.peek() == min.peek()) &#123; min.pop();&#125;</span><br><span class="line">        nor.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nor.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="一个栈的方法"><a href="#一个栈的方法" class="headerlink" title="一个栈的方法"></a>一个栈的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> min;</span><br><span class="line">    Stack&lt;Long&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty())&#123;</span><br><span class="line">            stack.push(<span class="number">0L</span>);</span><br><span class="line">            min=x;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack.push(x-min);<span class="comment">//Could be negative if min value needs to change</span></span><br><span class="line">            <span class="keyword">if</span> (x&lt;min) min=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty()) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> pop=stack.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (pop&lt;<span class="number">0</span>)  min=min-pop;<span class="comment">//If negative, increase the min value</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> top=stack.peek();</span><br><span class="line">        <span class="keyword">if</span> (top&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)(top+min);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> (<span class="keyword">int</span>)(min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>16. 3Sum Closest</title>
    <url>/2018/07/17/16-3Sum-Closest/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array <code>nums</code> of n integers and an integer <code>target</code>, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>
<p>Example:</p>
<p>Given array nums = [-1, 2, 1, -4], and target = 1.</p>
<p>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>跟<a href="http://caoyudong.com/2018/01/23/15-3Sum/">15. 3Sum</a>差不多，把数组排序之后依次比较当前得数和剩下两个数之和。</p>
<p>唯一的不同就是单独声明一个变量来记录最接近的那个值。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&lt;<span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    sort(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> result = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> first = <span class="number">0</span>;first &lt; nums.<span class="built_in">size</span>()<span class="number">-1</span>;first ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(first &gt; <span class="number">0</span> &amp;&amp; nums[first] == nums[first<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> second = first + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> third = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(second &lt; third) &#123;</span><br><span class="line">            <span class="keyword">int</span> curSum = nums[first] + nums[second] + nums[third];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(target - result)&gt;<span class="built_in">abs</span>(target - curSum)) &#123;</span><br><span class="line">                result = curSum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(curSum == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> target;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(curSum &gt; target) &#123;</span><br><span class="line">                --third;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ++second;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>167. Two Sum II - Input array is sorted</title>
    <url>/2018/04/23/167-Two-Sum-II-Input-array-is-sorted/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array of integers that is already <strong><em>sorted in ascending order</em></strong>, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>
<p>You may assume that each input would have exactly one solution and you may not use the same element twice.</p>
<p><strong>Input:</strong> numbers={2, 7, 11, 15}, target=9<br><strong>Output:</strong> index1=1, index2=2</p>
<a id="more"></a>


<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>跟<code>Two Sum</code>类似，不过这是排好序的，就只用用两个指针，一个指向数组头部，一个指向尾部，然后依次扫描就可以了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; numbers, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, h = numbers.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;h) &#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers[l]+numbers[h]==target) &#123;</span><br><span class="line">            result.push_back(l+<span class="number">1</span>);</span><br><span class="line">            result.push_back(h+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(numbers[l]+numbers[h]&gt;target) &#123;</span><br><span class="line">            h--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>186. Reverse Words in a String II</title>
    <url>/2018/07/13/186-Reverse-Words-in-a-String-II/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an input string , reverse the string word by word. </p>
<p><strong>Example:</strong></p>
<blockquote>
<p><strong>Input:</strong>  [“t”,”h”,”e”,” “,”s”,”k”,”y”,” “,”i”,”s”,” “,”b”,”l”,”u”,”e”]<br><strong>Output:</strong> [“b”,”l”,”u”,”e”,” “,”i”,”s”,” “,”s”,”k”,”y”,” “,”t”,”h”,”e”]</p>
</blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>A word is defined as a sequence of non-space characters.</li>
<li>The input string does not contain leading or trailing spaces.</li>
<li>The words are always separated by a single space.</li>
</ul>
<p><strong>Follow up:</strong> Could you do it in-place without allocating extra space?</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先把整个数组调换一遍，再根据空格为单位，再分别调换每一个单词就好。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&amp; str,<span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">end</span>&gt;start) &#123;</span><br><span class="line">        swap(str[start++],str[<span class="built_in">end</span>--]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverseWords</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先把整个数组转换一遍</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = str.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    reverse(str,i, j);</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, <span class="built_in">end</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//再根据空格转换一遍</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; str.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">' '</span>) &#123;</span><br><span class="line">            <span class="built_in">end</span> = i<span class="number">-1</span>;</span><br><span class="line">            reverse(str,start, <span class="built_in">end</span>);</span><br><span class="line">            start = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后一个单词</span></span><br><span class="line">    <span class="built_in">end</span> = str.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    reverse(str,start, <span class="built_in">end</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>2. Add Two Numbers</title>
    <url>/2018/01/18/2-Add-Two-Numbers/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<p><strong>Example</strong></p>
<blockquote>
<p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8<br>Explanation: 342 + 465 = 807.  </p>
</blockquote>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一开始没看清题目还卡了一下，后来仔细一看他输入的数字是倒过来放的。于是用一个新链表把结果存起来就好了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">C++ Solution</span><br><span class="line"><span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    ListNode preHead(0), *p = &amp;preHead;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l1||l2||temp) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = (l1?l1-&gt;val:<span class="number">0</span>) + (l2?l2-&gt;val:<span class="number">0</span>) + temp;</span><br><span class="line">        p-&gt;next = <span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</span><br><span class="line">        temp = sum/<span class="number">10</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        l1 = l1?l1-&gt;next:l1;</span><br><span class="line">        l2 = l2?l2-&gt;next:l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> preHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java Solution</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode p = head;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l1!=<span class="keyword">null</span> || l2!=<span class="keyword">null</span> || temp!=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = (l1!=<span class="keyword">null</span>?l1.val:<span class="number">0</span>) + (l2!=<span class="keyword">null</span>?l2.val:<span class="number">0</span>)+temp;</span><br><span class="line">        temp = sum/<span class="number">10</span>;</span><br><span class="line">        p.next = <span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</span><br><span class="line">        p = p.next;</span><br><span class="line">        l1=l1!=<span class="keyword">null</span>?l1.next:l1;</span><br><span class="line">        l2=l2!=<span class="keyword">null</span>?l2.next:l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>146. LRU Cache</title>
    <url>/2018/01/14/146-LRU-Cache/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.</p>
<p>get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
<p><strong>Follow up:</strong></p>
<p>Could you do both operations in <strong>O(1)</strong> time complexity?</p>
<p><strong>Example:</strong></p>
<p>LRUCache cache = new LRUCache( 2 /* capacity */ );</p>
<blockquote>
<p>cache.put(1, 1);<br>cache.put(2, 2);<br>cache.get(1);       // returns 1<br>cache.put(3, 3);    // evicts key 2<br>cache.get(2);       // returns -1 (not found)<br>cache.put(4, 4);    // evicts key 1<br>cache.get(1);       // returns -1 (not found)<br>cache.get(3);       // returns 3<br>cache.get(4);       // returns 4  </p>
</blockquote>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>设计一个LRU算法。</p>
<p>操作系统中进行内存管理中时采用一些页面置换算法，如LRU、LFU和FIFO等。其中LRU应用较为广泛。LRU的全称是Least Recently Used，即最近最少使用算法。当访问数据时，如缓存中有数据，则将该数据移动至链表的顶端；没有该数据则在顶端加入该数据，并移除链表中的最不常使用的数据。</p>
<p>这题应该用双链表来实现，使用Queue的话会超时因为Queue的查找使用了O(n)，双链表可以在<code>O(1)</code>完成<code>get(key)``put(key)</code>操作。</p>
<ul>
<li>Cache 使用一个HashMap来达到<code>O(1)</code>的查找效果。</li>
<li>Get 用一个双链表，自定义一个Node，里面有key，value，preNode，nextNode。<ul>
<li>假如miss，返回-1（rise exception？）</li>
<li>假如 hit：<ul>
<li>记录当前节点的value</li>
<li>在双链表中删除这个Node</li>
<li>链表头部加入这个Node</li>
</ul>
</li>
</ul>
</li>
<li>Set<ul>
<li>假如miss：<ul>
<li>假如List.Size()&lt;Capacity：<ul>
<li>添加新节点到队头</li>
<li>增加新节点到map</li>
</ul>
</li>
<li>假如 List.Size()&gt;Capacity：<ul>
<li>删掉队尾节点</li>
<li>增加新节点到map</li>
<li>添加新节点到队头</li>
</ul>
</li>
</ul>
</li>
<li>假如 hit：<ul>
<li>更新vaule值</li>
<li>节点移到队头</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    Node pre;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    HashMap&lt;Integer, Node&gt; map;</span><br><span class="line">    <span class="keyword">int</span> capacity, count;</span><br><span class="line">    Node head, tail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;Integer, Node&gt;();</span><br><span class="line">        head = <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        head.pre = <span class="keyword">null</span>;</span><br><span class="line">        tail.pre = head;</span><br><span class="line">        tail.next = <span class="keyword">null</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        node.pre.next = node.next;</span><br><span class="line">        node.next.pre = node.pre;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addNodeToHead</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        node.next.pre = node;</span><br><span class="line">        </span><br><span class="line">        node.pre = head;</span><br><span class="line">        head.next = node;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        Node node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span>(node !=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> result = node.value;</span><br><span class="line">            removeNode(node);</span><br><span class="line">            addNodeToHead(node);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.get(key)!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            Node node = map.get(key);</span><br><span class="line">            node.value = value;</span><br><span class="line">            removeNode(node);</span><br><span class="line">            addNodeToHead(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node(key,value);</span><br><span class="line">            map.put(key,node);</span><br><span class="line">            <span class="keyword">if</span>(count&lt;capacity) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.remove(tail.pre.key);</span><br><span class="line">                removeNode(tail.pre);</span><br><span class="line">            &#125;</span><br><span class="line">            addNodeToHead(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Java里面有个数据结构叫`LinkedHashMap`，刚好可以满足LRU算法，不过面试的时候应该不会让你用吧，不然对我们这种C++选手太不公平了！</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">//Java Solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> LinkedHashMap&lt;Integer, Integer&gt; <span class="built_in">map</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        CAPACITY = capacity;</span><br><span class="line">        <span class="built_in">map</span> = <span class="keyword">new</span> LinkedHashMap&lt;Integer, Integer&gt;(capacity, <span class="number">0.75f</span>, <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">boolean</span> removeEldestEntry(Map.Entry eldest) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">size</span>() &gt; CAPACITY;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>.getOrDefault(key, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>206. Reverse Linked List</title>
    <url>/2018/07/08/206-Reverse-Linked-List/</url>
    <content><![CDATA[<h1 id="206-Reverse-Linked-List"><a href="#206-Reverse-Linked-List" class="headerlink" title="206. Reverse Linked List"></a>206. Reverse Linked List</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Reverse a singly linked list.</p>
<p><strong>Example:</strong></p>
<blockquote>
<p><strong>Input:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br><strong>Output:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>
</blockquote>
<p><strong>Follow up:</strong></p>
<p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>新建一个表头，通过循环依次反转链表指针方向就好。 <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code> 变成 <code>NULL&lt;-1&lt;-2&lt;-3&lt;-4&lt;-5</code></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* result = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(head) &#123;</span><br><span class="line">        ListNode* cur = head-&gt;next;</span><br><span class="line">        head-&gt;next = result;</span><br><span class="line">        result = head;</span><br><span class="line">        head = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<p>之前一直写错成这样是不对的，<code>cur</code>指向<code>head</code>的地址，改变了<code>cur-&gt;next</code>的值相当于改变了<code>head-&gt;next</code>的值，这样写结果只会返回链表第一个值：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* result = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(head) &#123;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        cur-&gt;next = result;</span><br><span class="line">        result = cur;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<hr>
<p><a href="https://leetcode.com/problems/reverse-linked-list/discuss/58130/8ms-C++-Iterative-and-Recursive-Solutions-with-Explanations" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-linked-list/discuss/58130/8ms-C++-Iterative-and-Recursive-Solutions-with-Explanations</a></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>20. Valid Parentheses</title>
    <url>/2018/01/12/20-Valid-Parentheses/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>
<p>The brackets must close in the correct order, <code>&quot;()&quot;</code> and <code>&quot;()[]{}&quot;</code> are all valid but <code>&quot;(]&quot;</code> and <code>&quot;([)]&quot;</code> are not.</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用一个栈依次压入或者抛出相应的括号。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c++ Solution</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; result;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> a:s) &#123;</span><br><span class="line">            <span class="keyword">switch</span>(a) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'&#123;'</span>:result.push(a);<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">')'</span>:<span class="keyword">if</span>(!result.empty()&amp;&amp;result.top()==<span class="string">'('</span>) &#123;result.pop();&#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">']'</span>:<span class="keyword">if</span>(!result.empty()&amp;&amp;result.top()==<span class="string">'['</span>) &#123;result.pop();&#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'&#125;'</span>:<span class="keyword">if</span>(!result.empty()&amp;&amp;result.top()==<span class="string">'&#123;'</span>) &#123;result.pop();&#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> result.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java Solution</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; result = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> a:s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">switch</span>(a) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'&#123;'</span>: result.push(a); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">')'</span>: <span class="keyword">if</span>(!result.empty()&amp;&amp;result.pop()==<span class="string">'('</span>)&#123;<span class="keyword">break</span>;&#125; <span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">']'</span>: <span class="keyword">if</span>(!result.empty()&amp;&amp;result.pop()==<span class="string">'['</span>)&#123;<span class="keyword">break</span>;&#125; <span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'&#125;'</span>: <span class="keyword">if</span>(!result.empty()&amp;&amp;result.pop()==<span class="string">'&#123;'</span>)&#123;<span class="keyword">break</span>;&#125; <span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="Java-和-C-的-Stack类-用法："><a href="#Java-和-C-的-Stack类-用法：" class="headerlink" title="Java 和 C++ 的 Stack类 用法："></a>Java 和 C++ 的 Stack类 用法：</h3><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>boolean empty()</td>
<td>测试堆栈是否为空</td>
</tr>
<tr>
<td>Object peek( )</td>
<td>查看堆栈顶部的对象，但不从堆栈中移除它</td>
</tr>
<tr>
<td>Object pop( )</td>
<td>移除堆栈顶部的对象，并作为此函数的值返回该对象</td>
</tr>
<tr>
<td>Object push(Object element)</td>
<td>把项压入堆栈顶部</td>
</tr>
<tr>
<td>int search(Object element)</td>
<td>返回对象在堆栈中的位置，以 1 为基数</td>
</tr>
</tbody></table>
<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>bool empty()</td>
<td>堆栈为空则返回真</td>
</tr>
<tr>
<td>pop()</td>
<td>移除栈顶元素</td>
</tr>
<tr>
<td>push()</td>
<td>在栈顶增加元素</td>
</tr>
<tr>
<td>size()</td>
<td>返回栈中元素数目</td>
</tr>
<tr>
<td>top()</td>
<td>返回栈顶元素</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>21. Merge Two Sorted Lists</title>
    <url>/2018/04/12/21-Merge-Two-Sorted-Lists/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<p>Example:</p>
<blockquote>
<p>Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p>
</blockquote>
<a id="more"></a>


<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>因为链表是有序的所以依次比较两个链表每个值大小添加到新的链表了就好了。就是归并排序。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="function">ListNode <span class="title">head</span><span class="params">(<span class="number">-1</span>)</span></span>;</span><br><span class="line">    ListNode *tail = &amp;head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(l1 &amp;&amp; l2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l1-&gt;val&lt;l2-&gt;val) &#123;</span><br><span class="line">            tail-&gt;next = l1;</span><br><span class="line">            l1=l1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tail-&gt;next = l2;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = tail-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    tail-&gt;next = l1?l1:l2;</span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归法</span></span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!l1) &#123;<span class="keyword">return</span> l2;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!l2) &#123;<span class="keyword">return</span> l1;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(l1-&gt;val&gt;l2-&gt;val) &#123;</span><br><span class="line">        ListNode* temp =l2;</span><br><span class="line">        temp-&gt;next = mergeTwoLists(l1,l2-&gt;next);</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ListNode* temp =l1;</span><br><span class="line">        temp-&gt;next = mergeTwoLists(l1-&gt;next,l2);</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>231. Power of Two</title>
    <url>/2018/01/14/231-Power-of-Two/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an integer, write a function to determine if it is a power of two.</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>循环除以2看是否等于1。</p>
<p>或者</p>
<p>整型的范围是-2147483648 (-2^31) ~ 2147483647 (2^31-1)，用最大的整型 2^30(1073741824)去除它看是否能除尽。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ Solution</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>||n%<span class="number">2</span>!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isPowerOfTwo(n/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ Solution</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1073741824</span>%n==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Bit-Operation"><a href="#Bit-Operation" class="headerlink" title="Bit Operation"></a>Bit Operation</h3><p>Discuss 上还有一种位操作的方法：</p>
<blockquote>
<p>如果n是2的X次方，那么：</p>
</blockquote>
<blockquote>
<p>n = 2 ^ 0 = 1 = 0b0000…00000001, and (n - 1) = 0 = 0b0000…0000.<br>n = 2 ^ 1 = 2 = 0b0000…00000010, and (n - 1) = 1 = 0b0000…0001.<br>n = 2 ^ 2 = 4 = 0b0000…00000100, and (n - 1) = 3 = 0b0000…0011.<br>n = 2 ^ 3 = 8 = 0b0000…00001000, and (n - 1) = 7 = 0b0000…0111.</p>
</blockquote>
<blockquote>
<p>于是我们可以得出 n &amp; (n-1) == 0b0000…0000 == 0</p>
</blockquote>
<pre><code class="c++">bool isPowerOfTwo(int n) {
    return (n&gt;0)&amp;&amp;((n &amp; (n-1))==0);
}
``</code></pre>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>259. 3Sum Smaller</title>
    <url>/2018/07/17/259-3Sum-Smaller/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array of n integers nums and a target, find the number of index triplets <code>i, j, k</code> with <code>0 &lt;= i &lt; j &lt; k &lt; n </code>that satisfy the condition <code>nums[i] + nums[j] + nums[k] &lt; target</code>.</p>
<p><strong>Example:</strong></p>
<blockquote>
<p><strong>Input:</strong> nums = [-2,0,1,3], and target = 2<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> Because there are two triplets which sums  are less than 2:<br>            [-2,0,1]<br>            [-2,0,3]</p>
</blockquote>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>跟 3Sum 类似，但是这题只用求count个数。所以当second 和 third满足条件时，<code>[second,third]</code>这个区间都满足条件，于是 计算<code>count += third - second</code>就可以了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">threeSumSmaller</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&lt;<span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    sort(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> first = <span class="number">0</span>;first&lt;nums.<span class="built_in">size</span>()<span class="number">-2</span>;first++) &#123;</span><br><span class="line">        <span class="keyword">int</span> second = first + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> third = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(second&lt;third) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[first] + nums[second] + nums[third]&lt;target) &#123;</span><br><span class="line">                count += third - second;</span><br><span class="line">                second ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                third --;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>283. Move Zeroes</title>
    <url>/2016/12/15/283-Move-Zeroes/</url>
    <content><![CDATA[<h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><blockquote>
<p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>
</blockquote>
<blockquote>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</p>
</blockquote>
<blockquote>
<p>Note:</p>
</blockquote>
<blockquote>
<p><em>1. You must do this in-place without making a copy of the array.</em><br><em>2. Minimize the total number of operations.</em></p>
</blockquote>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>直接把不是0的数往前移，然后把剩下的位置用零代替，这样只用遍历一遍数组。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!nums[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                nums[count]=nums[i];</span><br><span class="line">                count ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(count&lt;nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            nums[count] = <span class="number">0</span>;</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>2016年总结</title>
    <url>/2017/01/05/2016%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>过去一年，发生了很多事，有些事很不顺，甚至让我怀疑我自己是不是早生了一年其实2016年才是我的本命年。</p>
<a id="more"></a>

<p>首先是年初，当时为了几千块钱接了一个外包，过年的那一个月全部用在了写“美奥诊所”APP上，甚至过年那几天都在写，一个月差不多写完。我当时也不知道自己可以写那么快，算是自己技术上的一个里程碑吧。那是我写的第三个iOS app。当然，大四这一年也没找家里要什么钱，自己实习+各种外包的钱足够让我在广州活得相当滋润，跟小伙伴出去吃个火锅，去下酒吧也是负担得起的，大一大二不敢这么干，当然那时也没人约我这么干……</p>
<p>然后就开始自己学校的申请，要说自己也挺菜的托福GRE都没考多少分，虽然大三开挂努力一年拿了次奖学金，但是大一大二挂科又重修，没多少优势。虽然项目做的多如牛毛，范围也很广，从手机app到windows应用程序到后台服务器到单片机物联网都有，但其实每个项目都没啥技术含量，内行人一看就知道。所以一开始申请的十所学校，一所都没要我，然后开始补申。补申的时候找老师签字，院长直接跟我说：“你申请这事搞得我很烦，你这样申请不到学校会影响我名声的！”。当时相当不爽，我又不是故意影响他老人家名声，虽然我也不知道他有啥名声。后差不多4月份补申了才能到sit，很不甘心但是有啥办法，自己明显不可能去mit嘛。</p>
<p>之后就大学毕业了，8月份到了美帝，由于之前没有租到房子直接住了一个月的喜来登，酒店房间特别好，每天早上起来都可以看到哈德逊河和对面的曼哈顿。之后抱国学大师舍友大腿租到了公寓，学会了写银行支票，学会了自己做饭，也开始尝试主动和别人交流。当然像大四那样生活是不可能了，曼哈顿片区的生活费真是贵的离谱，就算我每个月做个外包也只够交房租，没办法对自己太好直接住了最贵的片区。然后我就想办法开始省钱，但是发现省不了多少钱，毕竟一顿饭最少要花个6美元吧，吃上省钱太为难我这个吃货了。然后就换了个新的思路：多选课。学校每学期选3门和选4门课收一样的钱，一门课4大概4000多刀，这样一算一学期可以赚不少。这样过了一个学期，累的要死。尤其是有一门课，每周上三小时课，然后要看6小时的补充视频，然后运气好的话花20几个小时把代码写了就可以交了，有时候遇到莫名其妙的bug可能还要更多的时间。这学期过的十分疲惫，似乎学会了JAVAEE，似乎学会了Node.js 写后台，似乎学会了基本网页开发，似乎学会了基础人工智能知识，说似乎学会是因为我感觉自己啥也没学到，因为这些东西里面的原理，为什么这样写，我都没有深究，我觉得这是不行的。毕竟随便用个框架搭个服务器是个人都会，我觉得我之后需要学的更深入。</p>
<p>最累的其实是11～12月份，11月初收到了一个不可抗拒的邀请：到欧洲旅游。然后这个月各种final，各种deadline，加上实习公司的面试我题没刷多少，这个月差点没把我累死。当然结果还可以，我顺利搞到了英国的签证和德国的签证，然后过了两个期末考试以及4个project（其中有3个是拖到最后一周做的，该死的拖延症）。但是我简历被Google拒了，拿到了Facebook的面试但是第一轮跪了。说明自己还是需要加倍努力，还是有太多东西没学，尤其是深入的学习。计算机科学并不是会用框架就可以了，需要搞懂每个框架里的原理，需要阅读非常非常多的文档。</p>
<p>之后就是欧洲行了，非常梦幻，先后去了英国，法国，丹麦，挪威，德国，路线诡异，行程紧张，持续了20天。感谢父母强大的财政支持，感谢收留我的5位小伙伴，特别感谢其中的一个邀请人～</p>
<p>元旦其实是一个很有趣的时刻——新的一页日历翻过去，你突然有一种脱离过去一年的轻松感，以及新的一年被交付的强大感。不过——过去其实没法结束：你要减的肉还在身上，你欠下的书还在书架，你做过的结果依然在增值。未来其实也没法开启：如果你没有真正搞清楚过去为什么不好，未来恐怕也不会有什么区别。</p>
<p>最后希望2017年可以有个女朋友。。</p>
<p>本来元旦就想写的但是前几天玩high了每天都很累，今晚刚好有时间写了个。。</p>
<p><strong>– 2017.1.4 于慕尼黑</strong></p>
]]></content>
      <tags>
        <tag>杂七杂八</tag>
      </tags>
  </entry>
  <entry>
    <title>326. Power of Three</title>
    <url>/2018/01/13/326-Power-of-Three/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an integer, write a function to determine if it is a power of three.</p>
<p>Follow up:<br>Could you do it without using any loop / recursion?</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果一个数是3的X次方，那么把这个数循环除以3一定会等于1，所以写个循环就好。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ Solution</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>&amp;&amp;n%<span class="number">3</span>==<span class="number">0</span>) &#123;</span><br><span class="line">        n = n/<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>看到题目说不能用递归，顺便想了下用递归怎么做（我也不能理解我这脑回路</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ Solution</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">3</span>!=<span class="number">0</span>||n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isPowerOfThree(n/<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后还看到了Discuss上两种神奇的解法：</p>
<h3 id="任何一个3的x次方一定能被int型里最大的3的x次方整除"><a href="#任何一个3的x次方一定能被int型里最大的3的x次方整除" class="headerlink" title="任何一个3的x次方一定能被int型里最大的3的x次方整除"></a>任何一个3的x次方一定能被int型里最大的3的x次方整除</h3><p>1162261467 是3^19,3^20 比int大</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ Solution</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n&gt;<span class="number">0</span>?!(<span class="number">1162261467</span> % n):<span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="log函数"><a href="#log函数" class="headerlink" title="log函数"></a>log函数</h3><p>如果N是3的X次方：</p>
<ul>
<li>那么 <code>3^N == N</code></li>
<li>那么 <code>log (3^X) == log N</code></li>
<li>那么 <code>X log 3 == log N</code></li>
<li>那么 <code>X == (log N) / (log 3)</code></li>
<li>根据题目，<code>X</code>必须是个整数，所以只用判断<code>X</code>是不是整数就好</li>
</ul>
<p>但是由于计算机存储数字的方式，log(N)不可能被精确的存下来，所以判断的方式需要这样实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ Solution</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x = <span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x-rint(x))&lt;=<span class="number">0.00000000000001</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>292. Nim Game</title>
    <url>/2018/04/18/292-Nim-Game/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.</p>
<p>Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.</p>
<p>For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>靠脑子想一下子没想出来（菜的抠脚）。</p>
<p>其实这题倒过来想，什么情况必输。那就是会后一轮剩下的石头总数等于4；那如何保证最后一轮剩下的石头数量等于4呢，就是倒数第二轮剩下的石头有8个……以此类推，得出的结论就是石头数量是4的倍数不可能赢。</p>
<p>于是判断石头数量是不是4的倍数就可以了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>35. Search Insert Position</title>
    <url>/2016/11/27/35-Search-Insert-Position/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote>
<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
</blockquote>
<blockquote>
<p>You may assume no duplicates in the array.</p>
</blockquote>
<blockquote>
<p>Here are few examples.<br>[1,3,5,6], 5 → 2<br>[1,3,5,6], 2 → 1<br>[1,3,5,6], 7 → 4<br>[1,3,5,6], 0 → 0</p>
</blockquote>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这个应该算easy吧……不是很懂难度划分</p>
<p>找到大于等于<code>target</code>的数字返回下标就好。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="暴力……"><a href="#暴力……" class="headerlink" title="暴力……"></a>暴力……</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;=target)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==nums.<span class="built_in">size</span>()<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="二分法："><a href="#二分法：" class="headerlink" title="二分法："></a>二分法：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>




]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>345. Reverse Vowels of a String</title>
    <url>/2018/01/14/345-Reverse-Vowels-of-a-String/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Write a function that takes a string as input and reverse only the vowels of a string.</p>
<p><strong>Example 1:</strong></p>
<p>Given s = “hello”, return “holle”.</p>
<p><strong>Example 2:</strong></p>
<p>Given s = “leetcode”, return “leotcede”.</p>
<p><strong>Note:</strong></p>
<p>The vowels does not include the letter “y”.</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用两个index 分别记录头和尾的位置，然后一一交换元音字母就好。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">char</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(a) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'i'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'o'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'u'</span>: </span><br><span class="line">        <span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'O'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'U'</span>: <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">reverseVowels</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, <span class="built_in">end</span> = s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">end</span>&gt;start) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!judge(s[start])) &#123;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!judge(s[<span class="built_in">end</span>])) &#123;</span><br><span class="line">            <span class="built_in">end</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            swap(s[start++],s[<span class="built_in">end</span>--]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java Solution</span></span><br><span class="line"> <span class="function"><span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">char</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(a) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'a'</span>: </span><br><span class="line">        <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'i'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'o'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'u'</span>: </span><br><span class="line">        <span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'O'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'U'</span>: <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseVowels</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end = s.length()-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(end&gt;start) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!judge(chars[start])) &#123;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!judge(chars[end])) &#123;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">char</span> temp = chars[start];</span><br><span class="line">            chars[start] = chars[end];</span><br><span class="line">            chars[end] = temp;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>371. Sum of Two Integers</title>
    <url>/2018/04/24/371-Sum-of-Two-Integers/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Calculate the sum of two integers a and b, but you are not allowed to use the operator <code>+</code> and <code>-</code>.</p>
<p><strong>Example:</strong></p>
<p>Given a = 1 and b = 2, return 3.</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>不能用 <code>+</code> 号或者 <code>-</code> 号，那就只能用位操作了。位操作有四种：</p>
<p><code>&amp;</code> 与操作（AND operation）： 2 (0010) &amp; 7 (0111) =&gt; 2 (0010)</p>
<p><code>|</code> 或操作 （OR operation）： 2 (0010) | 7 (0111) =&gt; 7 (0111)</p>
<p><code>^</code> 异或操作 （XOR operation）： 2 (0010) ^ 7 (0111) =&gt; 5 (0101)</p>
<p><code>~</code> 非操作 （NOT operation）： ~2(0010) =&gt; -3 (1101) <code>补码，见文末</code></p>
<p>其中，最左边一位是符号位，代表正负，比如</p>
<p>1111 代表 -1 （补码）</p>
<p>1110 代表 -2</p>
<p>这题两个位置全为1的地方需要进一位，不全为1的地方直接异或操作就好。于是我们用一个<code>carry</code>来记录进位，每次进位完需要左移一位。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> carry = a &amp; b;</span><br><span class="line">        a = a ^ b;</span><br><span class="line">        b = carry&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSubtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> borrow = (~a) &amp; b;</span><br><span class="line">		a = a ^ b;</span><br><span class="line">		b = borrow &lt;&lt; <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>458. Poor Pigs</title>
    <url>/2018/04/16/458-Poor-Pigs/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>There are 1000 buckets, one and only one of them contains poison, the rest are filled with water. They all look the same. If a pig drinks that poison it will die within 15 minutes. What is the minimum amount of pigs you need to figure out which bucket contains the poison within one hour.</p>
<p>Answer this question, and write an algorithm for the follow-up general case.</p>
<p><strong>Follow-up:</strong></p>
<p>If there are n buckets and a pig drinking poison will die within m minutes, how many pigs (x) you need to figure out the “poison” bucket within p minutes? There is exact one bucket with poison.</p>
<a id="more"></a>

<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看了别人一个特别吊的思路：<a href="https://leetcode.com/problems/poor-pigs/discuss/94266/Another-explanation-and-solution" target="_blank" rel="noopener">https://leetcode.com/problems/poor-pigs/discuss/94266/Another-explanation-and-solution</a></p>
<p>假设我们有两只猪，喝了有毒的水之后15分钟死亡，一共有60分钟，那么我们最多可以在25个桶里找到有毒的那一桶。方法如下，将25个桶排列成<code>5X5</code>的一块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1  2  3  4   5</span><br><span class="line">6  7  8  9  10</span><br><span class="line">11 12 13 14 15</span><br><span class="line">16 17 18 19 20</span><br><span class="line">21 22 23 24 25</span><br></pre></td></tr></table></figure>

<p>然后我们用第一只猪喝每一行的水，第二只猪喝每一列的水。比如，第一只猪喝<code>1,2,3,4,5</code>号桶的水，然后等15分钟，再喝<code>6,7,8,9,10</code> 号桶的水，然后再等15分钟；第二只猪喝<code>1,6,11,16,21</code>号桶的水，等15分钟再喝<code>2,7,12,17,22</code>号桶的水，以此类推。。。</p>
<p>我们一共有60分钟，毒药发作时间是15分钟，那么我们在规定时间内一共可以测4轮。假设第一只猪第三轮死了，我们可以确定有毒的那桶在第三行，第二只猪第四轮死了，我们就可以确定有毒那桶在第三行第四列，也就是19。</p>
<p>假设我们有三只猪，我们就可以用一个<code>5x5x5</code>的立方体来测，一共125桶水。</p>
<p>综上所诉我们可以的到公式</p>
<p>\[<br>    buckets = (\frac{minutesToTest}{minutesToDie})^{pigs}<br>\]</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poorPigs</span><span class="params">(<span class="keyword">int</span> buckets, <span class="keyword">int</span> minutesToDie, <span class="keyword">int</span> minutesToTest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pigs = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">pow</span>((minutesToTest/minutesToDie+<span class="number">1</span>),pigs) &lt; buckets) &#123;</span><br><span class="line">        pigs++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pigs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>461. Hamming Distance</title>
    <url>/2018/04/28/461-Hamming-Distance/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p>
<p>Given two integers x and y, calculate the Hamming distance.</p>
<p>Note:<br>0 ≤ x, y &lt; 2^31 .</p>
<p><strong>Example:</strong></p>
<blockquote>
<p><strong>Input:</strong> x = 1, y = 4</p>
</blockquote>
<blockquote>
<p><strong>Output:</strong> 2</p>
</blockquote>
<blockquote>
<p><strong>Explanation:</strong>  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1   (0 0 0 1)    </span><br><span class="line">4   (0 1 0 0)    </span><br><span class="line">       ↑   ↑</span><br></pre></td></tr></table></figure>


<blockquote>
<p>The above arrows point to positions where the corresponding bits are different.</p>
</blockquote>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目说 y &lt; 2^31 那写一个32次的循环，依次统计一共有多少个1就好。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> s = x^y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">32</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s &amp; <span class="number">1</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            result ++;</span><br><span class="line">        &#125;</span><br><span class="line">        s = s&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后看到别人思路貌似有个比32次循环更快的方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dist = <span class="number">0</span>, n = x ^ y;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        ++dist;</span><br><span class="line">        n &amp;= n - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>374. Guess Number Higher or Lower</title>
    <url>/2018/01/14/374-Guess-Number-Higher-or-Lower/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>We are playing the Guess Game. The game is as follows:</p>
<p>I pick a number from 1 to n. You have to guess which number I picked.</p>
<p>Every time you guess wrong, I’ll tell you whether the number is higher or lower.</p>
<p>You call a pre-defined API <code>guess(int num)</code> which returns 3 possible results (<code>-1</code>, <code>1</code>, or <code>0</code>):</p>
<blockquote>
<p>-1 : My number is lower<br>1 : My number is higher<br>0 : Congrats! You got it!</p>
</blockquote>
<p><strong>Example:</strong></p>
<blockquote>
<p>n = 10, I pick 6.</p>
</blockquote>
<blockquote>
<p>Return 6.</p>
</blockquote>
<a id="more"></a>


<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>实现一个二分搜索就好了。。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">guessNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">1</span>, <span class="built_in">end</span> = n, mid = (<span class="built_in">end</span>-start)/<span class="number">2</span>+start;</span><br><span class="line">    <span class="keyword">int</span> g = guess(mid);</span><br><span class="line">    <span class="keyword">while</span>(g!=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(g==<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">end</span> = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            start = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mid = (<span class="built_in">end</span>-start)/<span class="number">2</span>+start;</span><br><span class="line">        g = guess(mid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>463. Island Perimeter</title>
    <url>/2018/01/13/463-Island-Perimeter/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn’t have “lakes” (water inside that isn’t connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don’t exceed 100. Determine the perimeter of the island.</p>
<p>Example:</p>
<blockquote>
<p>[[0,1,0,0],<br>[1,1,1,0],<br>[0,1,0,0],<br>[1,1,0,0]]</p>
</blockquote>
<blockquote>
<p>Answer: 16<br>Explanation: The perimeter is the 16 yellow stripes in the image &gt; below:</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/18-1-14/20996627.jpg"></p>
</blockquote>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>给定一个二维数组，其中1表示岛屿，0表示水，求岛的周长。 一种解法是遍历一遍，如果遇到岛屿(1)看周围是不是水(0)，如果是的话周长++。  </p>
<p>然后还有一种比较巧的解法是记录岛屿的数量和每个岛屿下方以及右方岛屿的数量（邻居数）。这样周长就可以由一个公式得到：</p>
<p>\[<br>    周长=4\times岛屿数-2\times邻居数<br>\]</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ Solution</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> islands = <span class="number">0</span>, neighbors = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;grid.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;grid[<span class="number">0</span>].<span class="built_in">size</span>();j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                islands++;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;grid.<span class="built_in">size</span>()<span class="number">-1</span>&amp;&amp;grid[i+<span class="number">1</span>][j]==<span class="number">1</span>) &#123;</span><br><span class="line">                    neighbors ++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j&lt;grid[<span class="number">0</span>].<span class="built_in">size</span>()<span class="number">-1</span>&amp;&amp;grid[i][j+<span class="number">1</span>]==<span class="number">1</span>) &#123;</span><br><span class="line">                    neighbors ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> islands*<span class="number">4</span>-neighbors*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java Solution</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> islands=<span class="number">0</span>, neighbors = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;grid.length;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;grid[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>) &#123;</span><br><span class="line">                islands++;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;grid.length-<span class="number">1</span>&amp;&amp;grid[i+<span class="number">1</span>][j]==<span class="number">1</span>) &#123;</span><br><span class="line">                neighbors ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;grid[<span class="number">0</span>].length-<span class="number">1</span>&amp;&amp;grid[i][j+<span class="number">1</span>]==<span class="number">1</span>) &#123;</span><br><span class="line">                neighbors ++;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> islands*<span class="number">4</span>-neighbors*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>5. Longest Palindromic Substring</title>
    <url>/2018/04/13/5-Longest-Palindromic-Substring/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p>
<p><strong>Example 1:</strong></p>
<blockquote>
<p><strong>Input:</strong> “babad”<br><strong>Output:</strong> “bab”<br><strong>Note:</strong> “aba” is also a valid answer.</p>
</blockquote>
<p><strong>Example 2:</strong></p>
<blockquote>
<p><strong>Input:</strong> “cbbd”<br><strong>Output:</strong> “bb”</p>
</blockquote>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="动态规划法"><a href="#动态规划法" class="headerlink" title="动态规划法"></a>动态规划法</h3><p>假设字符串长度为n，那么我们可以用一个大小为<code>dp[n][n]</code>的二维数组来代表字符串状态。其中，<code>dp[i][j]</code>代表<code>i~j</code>区间的字符是否为回文串。</p>
<ul>
<li>当i=j时，只有一个字符，肯定是回文串；</li>
<li>当<code>i=j+1</code>时，说明是相邻字符，只用判断<code>s[i]</code>是否等于<code>s[j]</code>；</li>
<li>当字符不相邻，也就是<code>i-j&gt;2</code>时，<strong>判断<code>s[i]</code>是否等于<code>s[j]</code>以及<code>dp[i+1][j-1]</code>是否为回文串即可。</strong></li>
</ul>
<p>通过上面的分析可以写出递推公式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dp[i, j] = <span class="number">1</span>   									<span class="comment">//if i == j</span></span><br><span class="line"></span><br><span class="line">dp[i, j] = s[i] == s[j] 						<span class="comment">//if j = i + 1</span></span><br><span class="line"></span><br><span class="line">dp[i, j] = s[i] == s[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>]     <span class="comment">//if j &gt; i + 1</span></span><br></pre></td></tr></table></figure>

<p>例如，字符串<code>aabba</code>每一步dp的状态依次如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// aa</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// aab</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// aabb</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// aabba</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="Manacher’s-Algorithm-马拉车算法"><a href="#Manacher’s-Algorithm-马拉车算法" class="headerlink" title="Manacher’s Algorithm 马拉车算法"></a>Manacher’s Algorithm 马拉车算法</h3><p><a href="http://www.cnblogs.com/grandyang/p/4475985.html" target="_blank" rel="noopener">http://www.cnblogs.com/grandyang/p/4475985.html</a><br><a href="https://blog.csdn.net/dyx404514/article/details/42061017" target="_blank" rel="noopener">https://blog.csdn.net/dyx404514/article/details/42061017</a></p>
<p>最逆天的地方在于他把时间复杂度提高到了线性<code>O(n)</code>。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dp[s.<span class="built_in">size</span>()][s.<span class="built_in">size</span>()] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> left =<span class="number">0</span>,right=<span class="number">0</span>,len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; ++i) &#123;</span><br><span class="line">            dp[i][j] = (s[i] == s[j] &amp;&amp; (j - i &lt; <span class="number">2</span> || dp[i + <span class="number">1</span>][j - <span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">if</span> (dp[i][j] &amp;&amp; len &lt; j - i + <span class="number">1</span>) &#123;</span><br><span class="line">                len = j - i + <span class="number">1</span>;</span><br><span class="line">                left = i;</span><br><span class="line">                right = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[j][j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substr(left,right-left+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Manacher’s-Algorithm-马拉车算法-1"><a href="#Manacher’s-Algorithm-马拉车算法-1" class="headerlink" title="Manacher’s Algorithm 马拉车算法"></a>Manacher’s Algorithm 马拉车算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Manacher</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Insert '#'</span></span><br><span class="line">    <span class="built_in">string</span> t = <span class="string">"$#"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        t += s[i];</span><br><span class="line">        t += <span class="string">"#"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Process t</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(t.<span class="built_in">size</span>(), <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>, id = <span class="number">0</span>, resLen = <span class="number">0</span>, resCenter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; t.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        p[i] = mx &gt; i ? <span class="built_in">min</span>(p[<span class="number">2</span> * id - i], mx - i) : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (t[i + p[i]] == t[i - p[i]]) ++p[i];</span><br><span class="line">        <span class="keyword">if</span> (mx &lt; i + p[i]) &#123;</span><br><span class="line">            mx = i + p[i];</span><br><span class="line">            id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resLen &lt; p[i]) &#123;</span><br><span class="line">            resLen = p[i];</span><br><span class="line">            resCenter = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substr((resCenter - resLen) / <span class="number">2</span>, resLen - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>53. Maximum Subarray</title>
    <url>/2018/07/05/53-Maximum-Subarray-1/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>
<p>Example:</p>
<p>Input: [-2,1,-3,4,-1,2,1,-5,4],<br>Output: 6<br>Explanation: [4,-1,2,1] has the largest sum = 6.<br>Follow up:</p>
<p>If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>只用记录两个变量，一个局部最优<code>tempSum</code>，一个全局最优<code>maxSum</code>。当局部最优小于零的时候就不考虑之前的数字，直接归零，然后依次得出全局最优。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>只用记录两个变量，一个是区间的临时总和<code>tempSum</code>，一个是和的最大值<code>maxSum</code>，然后遍历一次数组。假设遍历到第<code>n</code>个数，此时<code>tempSum = tempSum + n</code>。但是如果n之前的tempSum的值已经小于0了，我们就不用考虑他，因为下一个值不管是正数还是负数，加上<code>tempSum</code>值会变得更小。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxSum = INT_MIN, tempSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n:nums) &#123;</span><br><span class="line">        tempSum = n + (tempSum&gt;<span class="number">0</span>?tempSum:<span class="number">0</span>);</span><br><span class="line">        maxSum = maxSum&gt;tempSum?maxSum:tempSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后还在网上看到了动态规划法：</p>
<p>状态转移方程为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">maxSubArray(A, i) &#x3D; maxSubArray(A, i - 1) &gt; 0 ? maxSubArray(A, i - 1) : 0 + A[i];</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">//dp[i] means the maximum subarray ending with A[i];</span></span><br><span class="line">        dp[<span class="number">0</span>] = A[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> max = dp[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            dp[i] = A[i] + (dp[i - <span class="number">1</span>] &gt; <span class="number">0</span> ? dp[i - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">            max = Math.max(max, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><a href="https://leetcode.com/problems/maximum-subarray/discuss/20193/DP-solution-and-some-thoughts" target="_blank" rel="noopener">https://leetcode.com/problems/maximum-subarray/discuss/20193/DP-solution-and-some-thoughts</a></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>6. ZigZag Conversion</title>
    <url>/2018/04/16/6-ZigZag-Conversion/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P   A   H   N  </span><br><span class="line">A P L S I I G  </span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure>

<p>And then read line by line: “PAHNAPLSIIGYIR”</p>
<p>Write the code that will take a string and make this conversion given a number of rows:</p>
<blockquote>
<p>string convert(string text, int nRows);</p>
</blockquote>
<p><code>convert(&quot;PAYPALISHIRING&quot;, 3)</code> should return <code>&quot;PAHNAPLSIIGYIR&quot;</code>.</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这题指的<code>zigzag pattern</code>一开始我也不是很明白，看了Discuss之后才搞清楚，大概就是这样：</p>
<p>n=4的时候，图案是这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1    7   	  13</span><br><span class="line">2  6 8   12 14</span><br><span class="line">3 5  9 11   15</span><br><span class="line">4    10</span><br></pre></td></tr></table></figure>

<p>3行的时候图案是这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1   5   9  12</span><br><span class="line">2 4 6 8 10 13 15</span><br><span class="line">3   7   11 14</span><br></pre></td></tr></table></figure>

<p>2行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 3 5 7  9</span><br><span class="line">2 4 6 8 10</span><br></pre></td></tr></table></figure>

<p>所以根据上述规律，可以发现第一行和最后一行每个数字之间都是相隔<code>2n-2</code>；然后斜着那条线，字符的位置永远与当前周期的前一个数字相隔<code>2n-2-2i</code>（i是行数），所以在第j个周期的第i行，那个字符的位置应该是<code>j+2n-2-2i</code>。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">size</span>()&lt;<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(numRows==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> result;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;numRows;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j&lt;s.<span class="built_in">size</span>();j+=<span class="number">2</span>*numRows<span class="number">-2</span>) &#123;</span><br><span class="line">            result.push_back(s[j]);</span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span> &amp;&amp; i!=numRows<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j+<span class="number">2</span>*numRows<span class="number">-2</span><span class="number">-2</span>*i&lt;s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    result.push_back(s[j+<span class="number">2</span>*numRows<span class="number">-2</span><span class="number">-2</span>*i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>66. Plus One</title>
    <url>/2018/01/12/66-Plus-One/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.</p>
<p>You may assume the integer do not contain any leading zero, except the number 0 itself.</p>
<p>The digits are stored such that the most significant digit is at the head of the list.</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>弄个临时变量记进位，从第<code>n-1</code>位按照加法开始依次加就好了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ Solution</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">plusOne</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = digits.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = digits[i] + flag;</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;<span class="number">10</span>) &#123;</span><br><span class="line">                digits[i] = temp;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                digits[i] = temp%<span class="number">10</span>;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>) &#123;</span><br><span class="line">            digits.insert(digits.<span class="built_in">begin</span>(),<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>然后Discuss看到了个比较吊的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ Solution</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plusone</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;digits)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = digits.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (digits[i] == <span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			digits[i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			digits[i]++;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">		digits[<span class="number">0</span>] =<span class="number">1</span>;</span><br><span class="line">		digits.push_back(<span class="number">0</span>);</span><br><span class="line">		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>53.Maximum Subarray</title>
    <url>/2016/11/29/53-Maximum-Subarray/</url>
    <content><![CDATA[<h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><blockquote>
<p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</p>
</blockquote>
<blockquote>
<p>For example, given the array [-2,1,-3,4,-1,2,1,-5,4],<br>the contiguous subarray [4,-1,2,1] has the largest sum = 6.</p>
</blockquote>
<blockquote>
<p>More practice:<br>If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>非常典型的DP问题。</p>
<p>子数组只会有两种操作：</p>
<ol>
<li>如果总和比之前大就不停的添加新成员</li>
<li>如果总和比之前一次变小了就清空成员重新计数</li>
</ol>
<p>于是只用记住历史最大值和数组总和最大值就好</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxValue = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> tempMax = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x:nums)&#123;</span><br><span class="line">            tempMax = <span class="built_in">max</span>(tempMax + x,x);</span><br><span class="line">            maxValue = <span class="built_in">max</span>(maxValue,tempMax);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxValue;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>657. Judge Route Circle</title>
    <url>/2018/01/12/657-Judge-Route-Circle/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Initially, there is a Robot at position (0, 0). Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to the original place.</p>
<p>The move sequence is represented by a string. And each move is represent by a character. The valid robot moves are R (Right), L (Left), U (Up) and D (down). The output should be true or false representing whether the robot makes a circle.</p>
<p><strong>Example 1:</strong></p>
<blockquote>
<p>Input: “UD”<br>Output: true</p>
</blockquote>
<p><strong>Example 2:</strong></p>
<blockquote>
<p>Input: “LL”<br>Output: false</p>
</blockquote>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>设置两个变量代表x,y轴坐标，然后对应操作就好。最后查看x，y是否还等于0。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgeCircle</span><span class="params">(<span class="built_in">string</span> moves)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:moves) &#123;</span><br><span class="line">            <span class="keyword">switch</span>(m) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'L'</span>:x--;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'R'</span>:x++;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'U'</span>:y++;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'D'</span>:y--;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>760 Find Anagram Mappings</title>
    <url>/2018/01/11/760-Find-Anagram-Mappings/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given two lists Aand <code>B</code>, and <code>B</code> is an anagram of <code>A</code>. <code>B</code> is an anagram of <code>A</code> means <code>B</code> is made by randomizing the order of the elements in <code>A</code>.</p>
<p>We want to find an index mapping <code>P</code>, from <code>A</code> to <code>B</code>. <code>A</code> mapping <code>P[i] = j</code> means the ith element in <code>A</code> appears in <code>B</code> at index <code>j</code>.</p>
<p>These lists <code>A</code> and <code>B</code> may contain duplicates. If there are multiple answers, output any of them.</p>
<p>For example, given</p>
<blockquote>
<p>A = [12, 28, 46, 32, 50]<br>B = [50, 12, 32, 46, 28]</p>
</blockquote>
<p>We should return</p>
<blockquote>
<p>[1, 4, 3, 2, 0]</p>
</blockquote>
<p>as <code>P[0] = 1</code> because the 0th element of A appears at <code>B[1]</code>, and <code>P[1] = 4</code> because the 1st element of <code>A</code> appears at <code>B[4]</code>, and so on.</p>
<p>Note:</p>
<ol>
<li>A, B have equal lengths in range [1, 100].</li>
<li>A[i], B[i] are integers in range [0, 10^5].</li>
</ol>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用一个Map把B里面的元素和它的位置存起来，然后便利一遍A就好</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java Solution</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] anagramMappings(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; m = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.length;i++) &#123;</span><br><span class="line">            m.put(B[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length;i++) &#123;</span><br><span class="line">            result[i] = m.get(A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ Solution</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">anagramMappings</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; a;</span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:B) &#123;</span><br><span class="line">            a[i] = counter++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:A) &#123;</span><br><span class="line">            result.push_back(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>8. String to Integer (atoi)</title>
    <url>/2018/04/16/8-String-to-Integer-atoi/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Implement atoi which converts a string to an integer.</p>
<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>
<p>If no valid conversion could be performed, a zero value is returned.</p>
<p><strong>Note:</strong> </p>
<p>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (2^31 − 1) or INT_MIN (−2^31 ) is returned.</p>
<a id="more"></a>

<p><strong>Example 1:</strong></p>
<blockquote>
<p><strong>Input:</strong> “42”<br><strong>Output:</strong> 42</p>
</blockquote>
<p><strong>Example 2:</strong></p>
<blockquote>
<p><strong>Input:</strong> “&nbsp;&nbsp;&nbsp;&nbsp; -42”<br><strong>Output:</strong> -42<br><strong>Explanation:</strong> The first non-whitespace character is ‘-‘, which is the minus sign.Then take as many numerical digits as possible, which gets 42.</p>
</blockquote>
<p><strong>Example 3:</strong></p>
<blockquote>
<p><strong>Input:</strong> “4193 with words”<br><strong>Output:</strong> 4193<br><strong>Explanation:</strong> Conversion stops at digit ‘3’ as the next character is not a numerical digit.</p>
</blockquote>
<p><strong>Example 4:</strong></p>
<blockquote>
<p><strong>Input:</strong> “words and 987”<br><strong>Output:</strong> 0<br><strong>Explanation:</strong> The first non-whitespace character is ‘w’, which is not a numerical digit or a +/- sign. Therefore no valid conversion could be performed.</p>
</blockquote>
<p><strong>Example 5:</strong></p>
<blockquote>
<p><strong>Input:</strong> “-91283472332”<br><strong>Output:</strong> -2147483648<br><strong>Explanation:</strong> The number “-91283472332” is out of the range of a 32-bit signed integer. Thefore INT_MIN (−231) is returned.</p>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>这题太他妈傻逼了！！！！</strong></p>
<p>题目5个要求：</p>
<ol>
<li>string 转 int</li>
<li>丢弃数字前面的空格</li>
<li>丢弃数字后面的字符串</li>
<li>无视字符串后面的数字</li>
<li>超过INT_MAX (2^31 − 1) 或 INT_MIN (−2^31 )返回边界值</li>
</ol>
<p>本来挺简单的，题目写if else就好，但是测试用例里面居然还有<code>+-2</code>,<code>+1</code>这种情况！！ 什么破玩意。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(str[i] == <span class="string">' '</span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(str[i] == <span class="string">'-'</span>||str[i] == <span class="string">'+'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i+<span class="number">1</span>] != <span class="string">'-'</span>||str[i+<span class="number">1</span>] != <span class="string">'-'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">'-'</span>) &#123;</span><br><span class="line">                flag = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(str[i]&lt;=<span class="string">'9'</span>&amp;&amp;str[i]&gt;=<span class="string">'0'</span>&amp;&amp;i&lt;str.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        result*=<span class="number">10</span>;</span><br><span class="line">        result+=(<span class="keyword">int</span>)str[i] - <span class="number">48</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result *= flag;</span><br><span class="line">    result = result&lt;INT_MIN?INT_MIN:result;</span><br><span class="line">    result = result&gt;INT_MAX?INT_MAX:result;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简洁版 https://leetcode.com/problems/string-to-integer-atoi/discuss/4642/8ms-C++-solution-easy-to-understand</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> indicator = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;str.<span class="built_in">size</span>();)</span><br><span class="line">    &#123;</span><br><span class="line">        i = str.find_first_not_of(<span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">'-'</span> || str[i] == <span class="string">'+'</span>)</span><br><span class="line">            indicator = (str[i++] == <span class="string">'-'</span>)? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="string">'0'</span>&lt;= str[i] &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            result = result*<span class="number">10</span> + (str[i++]-<span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">if</span>(result*indicator &gt;= INT_MAX) <span class="keyword">return</span> INT_MAX;</span><br><span class="line">            <span class="keyword">if</span>(result*indicator &lt;= INT_MIN) <span class="keyword">return</span> INT_MIN;                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result*indicator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>9. Palindrome Number</title>
    <url>/2018/04/12/9-Palindrome-Number/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Determine whether an integer is a palindrome. Do this without extra space.</p>
<a id="more"></a>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>声明一个临时变量<code>sum</code>，辗转相除以及辗转相乘，然后比较<code>sum</code>和输入量的大小即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>|| (x!=<span class="number">0</span> &amp;&amp;x%<span class="number">10</span>==<span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;sum) &#123;</span><br><span class="line">        sum*=<span class="number">10</span>;</span><br><span class="line">        sum+=x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (sum==x)||(x==sum/<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Alamofire</title>
    <url>/2015/10/27/Alamofire/</url>
    <content><![CDATA[<p><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="noopener">Alamofire</a> 是一款用swift写的用于http网络连接的库，目的是用来在swift中代替OC的AFNetworking。</p>
<p>使用十分简单：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">import</span> Alamofire</span><br><span class="line"></span><br><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">GET</span>, <span class="string">"http://httpbin.org/get"</span>)</span><br></pre></td></tr></table></figure>


<a id="more"></a>


<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>须要用swift，项目必须运行在iOS 8或者更高版本iOS。OS X Mavericks或者更高版本OS上。用OC其实也可以，但是折腾很多东西……OC还是直接用AFNetworking吧～</p>
</blockquote>
<p><strong>CocoaPods</strong></p>
<p>把下面这些加到<code>Podfile</code>里面然后 <code>pod install</code>：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">source <span class="string">'https://github.com/CocoaPods/Specs.git'</span></span><br><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'8.0'</span></span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line">pod <span class="string">'Alamofire'</span>, <span class="string">'~&gt; 1.2'</span></span><br></pre></td></tr></table></figure>

<p><strong>carthage</strong></p>
<p>把下面这些加到 <code>Cartfile</code>里面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github &quot;Alamofire&#x2F;Alamofire&quot; &gt;&#x3D; 1.2</span><br></pre></td></tr></table></figure>

<p>或者也可以手动安装……详情见<a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="noopener">Alamofire</a></p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><blockquote>
<p>Alamofire所有请求都是是异步的，所以可以放心大胆的用～</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">import</span> Alamofire</span><br></pre></td></tr></table></figure>

<p><strong>发起一个连接：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">import</span> Alamofire</span><br><span class="line"></span><br><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">GET</span>, <span class="string">"http://httpbin.org/get"</span>)</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">**收到数据转为string**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```swift</span><br><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">GET</span>, <span class="string">"http://httpbin.org/get"</span>)</span><br><span class="line">         .responseString &#123; (<span class="number">_</span>, <span class="number">_</span>, string, <span class="number">_</span>) <span class="keyword">in</span></span><br><span class="line">                  <span class="built_in">println</span>(string)</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<p><strong>收到数据转为JSON</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">GET</span>, <span class="string">"http://httpbin.org/get"</span>)</span><br><span class="line">         .responseJSON &#123; (<span class="number">_</span>, <span class="number">_</span>, <span class="type">JSON</span>, <span class="number">_</span>) <span class="keyword">in</span></span><br><span class="line">                  <span class="built_in">println</span>(<span class="type">JSON</span>)</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<p><strong>转化结果的方法：</strong></p>
<ul>
<li><code>response()</code></li>
<li><code>responseString(encoding: NSStringEncoding)</code></li>
<li><code>responseJSON(options: NSJSONReadingOptions)</code></li>
<li><code>responsePropertyList(options: NSPropertyListReadOptions)</code></li>
</ul>
<p><strong>Alamofire支持的HTTP方法</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Method</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">OPTIONS</span> = <span class="string">"OPTIONS"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">GET</span> = <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">HEAD</span> = <span class="string">"HEAD"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">POST</span> = <span class="string">"POST"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">PUT</span> = <span class="string">"PUT"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">PATCH</span> = <span class="string">"PATCH"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">DELETE</span> = <span class="string">"DELETE"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">TRACE</span> = <span class="string">"TRACE"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">CONNECT</span> = <span class="string">"CONNECT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用时修改第一个参数即可：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">POST</span>, <span class="string">"http://httpbin.org/post"</span>)</span><br><span class="line"></span><br><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">PUT</span>, <span class="string">"http://httpbin.org/put"</span>)</span><br><span class="line"></span><br><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">DELETE</span>, <span class="string">"http://httpbin.org/delete"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="加参数的网络请求："><a href="#加参数的网络请求：" class="headerlink" title="加参数的网络请求："></a>加参数的网络请求：</h2><p><strong>GET请求：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">GET</span>, <span class="string">"http://httpbin.org/get"</span>, parameters: [<span class="string">"foo"</span>: <span class="string">"bar"</span>])</span><br><span class="line"><span class="comment">// http://httpbin.org/get?foo=bar</span></span><br></pre></td></tr></table></figure>

<p><strong>POST请求：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">let</span> parameters = [</span><br><span class="line">    <span class="string">"foo"</span>: <span class="string">"bar"</span>,</span><br><span class="line">    <span class="string">"baz"</span>: [<span class="string">"a"</span>, <span class="number">1</span>],</span><br><span class="line">    <span class="string">"qux"</span>: [</span><br><span class="line">        <span class="string">"x"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"y"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"z"</span>: <span class="number">3</span></span><br><span class="line">    ]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">POST</span>, <span class="string">"http://httpbin.org/post"</span>, parameters: parameters)</span><br><span class="line"><span class="comment">// HTTP body: foo=bar&amp;baz[]=a&amp;baz[]=1&amp;qux[x]=1&amp;qux[y]=2&amp;qux[z]=3</span></span><br></pre></td></tr></table></figure>

<!--**form形式上传图片**-->




<p>由于大部分网络数据都是JSON格式的，所以Alamofire搭配<a href="http://caoyudong.com/2015/10/27/SwiftyJSON/">SwiftyJSON</a>会比较好用</p>
<blockquote>
<p>介于swift一直在升级，很多东西会经常变动。这篇文档也可能过一段时间就过时了，可以到<a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="noopener">Alamofire</a>查看具体的改动，我也会经常来更新下博客的～</p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CUICatalog：Invalid asset name supplied：(null)</title>
    <url>/2015/09/07/CUICatalog%EF%BC%9AInvalid-asset-name-supplied%EF%BC%9A-null/</url>
    <content><![CDATA[<p>今天遇到了个神奇的问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2015-09-06 14:32:32.246 B-smart[1056:65917] CUICatalog: Invalid asset name supplied: (null)</span><br><span class="line">2015-09-06 14:32:32.246 B-smart[1056:65917] Could not load the &quot;(null)&quot; image referenced from a nib in the bundle with identifier &quot;com.scut.B-smart&quot;</span><br></pre></td></tr></table></figure>

<p>查了下，这个提示的意思是说你用了这个方法：<code>[UIImage imageNamed:name];</code>但是这个name却是空的，所以就报了这个错了。</p>
<p>解决方法，在项目中搜索<code>[UIImage imageNamed:</code>,然后打印看看所谓的name是否为空。找到后替换。</p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>8皇后问题</title>
    <url>/2018/01/11/8%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>如何能够在8×8的国际象棋棋盘上放置8个皇后，使得任何一个皇后都无法直接吃掉其他的皇后？高斯认为有76种方案。1854年在柏林的象棋杂志上不同的作者发表了40种不同的解，后来有人用图论的方法解出92种结果。</p>
<p>因为在国际象棋中，皇后可以横、直或者斜着走，格数不限，所以棋盘中任意2个皇后都不能在同一行、同一列以及同一斜线。</p>
<a id="more"></a>

<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>依次检测同一行、同一列以及同一斜线有没有皇后，如果没有就检测下一行。累计检测满八个皇后就记一种解法。</p>
<p>一个皇后q(x,y)能被满足以下条件的皇后q(row,col)吃掉：</p>
<ol>
<li><p>x=row(在纵向不能有两个皇后)</p>
</li>
<li><p>y=col（横向）</p>
</li>
<li><p>col + row = y+x;（斜向正方向）</p>
</li>
<li><p>col - row = y-x;（斜向反方向）</p>
</li>
</ol>
<p>我们用 queen[x]来表示 第x个皇后在第几列。</p>
<h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># python Solution</span></span><br><span class="line"><span class="comment"># 检查有没有在同一列或者同一斜线</span></span><br><span class="line"><span class="comment"># 同一行不用检测因为后面皇后的行数是递增的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">available</span><span class="params">(row,col)</span>:</span></span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> range(row):</span><br><span class="line">		<span class="keyword">if</span> queen[x]==col <span class="keyword">or</span> x - queen[x] == row - col <span class="keyword">or</span> queen[x] + x == row + col:</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(row)</span>:</span></span><br><span class="line"><span class="comment"># 如果不冲突就记下当前的row和queen[row]（列）</span></span><br><span class="line"><span class="comment"># 然后检查下一行</span></span><br><span class="line">	<span class="keyword">global</span> count,queen</span><br><span class="line">	<span class="keyword">if</span> row == <span class="number">8</span>:</span><br><span class="line">		count += <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">			<span class="keyword">if</span> available(row,col):</span><br><span class="line">				queen[row] = col</span><br><span class="line">				<span class="comment"># 递归</span></span><br><span class="line">				find(row+<span class="number">1</span>)</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	<span class="keyword">global</span> count,queen</span><br><span class="line">	count = <span class="number">0</span></span><br><span class="line">	queen = [<span class="number">-1</span>]*<span class="number">8</span></span><br><span class="line">	find(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">print</span> count</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java Solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queen8</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span>[] queen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Queen8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		find(<span class="number">0</span>);</span><br><span class="line">    	System.out.println(count);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">// 检查有没有在同一列或者同一斜线</span></span><br><span class="line"><span class="comment">// 同一行不用检测因为后面皇后的行数是递增的</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">avaliable</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x&lt;row;x++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (queen[x]==col || x-queen[x]==row-col || x+queen[x]==row+col) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (row == <span class="number">8</span>) &#123;</span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>;col&lt;<span class="number">8</span>;col++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (avaliable(row, col)) &#123;</span><br><span class="line">					queen[row] = col;</span><br><span class="line">					<span class="comment">// 递归</span></span><br><span class="line">					find(row+<span class="number">1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    	Queen8 queen8 = <span class="keyword">new</span> Queen8();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="非递归-回溯法"><a href="#非递归-回溯法" class="headerlink" title="非递归(回溯法)"></a>非递归(回溯法)</h2><p>回溯法（探索与回溯法）是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。</p>
<p>算法描述如下：</p>
<ol>
<li>开始时清空棋盘，将当前行设为第零行，当前列设为第零列。</li>
<li>判断当前位置是否合法，若不合法到第4步。</li>
<li>当前位置合法，则在当前位置放置一棋子。<ul>
<li>若当前行为最后一行，则记录一个解。<ul>
<li>若当前列是最后一列，当前行设为前一行，当前列设为当前行对应列的下一列。</li>
<li>若当前列不是最后一列，当前列设为下一列.</li>
</ul>
</li>
<li>若当前行不是最后一行，则将当前行设为下一行，当前列设为第零列。<br>回至第2步。</li>
</ul>
</li>
<li>当前位置不合法。</li>
</ol>
<ul>
<li>若当前列不是最后最后一列，则当前列设为下一列，回到第2步。</li>
<li>若当前列是最后一列<ul>
<li>若当前行为第零行，结束</li>
<li>若当前不是第零行，当前行设为前一行，当前列设为当前行对应列的下一列。<br>回至第2步。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">available</span><span class="params">(row,col)</span>:</span></span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> range(row):</span><br><span class="line">		<span class="keyword">if</span> queen[x]==col <span class="keyword">or</span> x - queen[x] == row - col <span class="keyword">or</span> queen[x] + x == row + col:</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">()</span>:</span></span><br><span class="line">	count = <span class="number">0</span></span><br><span class="line">	row = <span class="number">0</span></span><br><span class="line">	<span class="keyword">global</span> queen</span><br><span class="line">	queen[row] = <span class="number">0</span></span><br><span class="line">	<span class="keyword">while</span> row&gt;=<span class="number">0</span>: <span class="comment">#当前行为 -1 时结束</span></span><br><span class="line">		<span class="keyword">if</span> row &lt; <span class="number">8</span> <span class="keyword">and</span> queen[row] &lt; <span class="number">8</span>: <span class="comment">#当前行、当前列均为到达最后</span></span><br><span class="line">			<span class="keyword">if</span> available(row,queen[row]): <span class="comment">#当前位置合法，则探索下一行</span></span><br><span class="line">				row += <span class="number">1</span></span><br><span class="line">				queen[row] = <span class="number">0</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				queen[row] += <span class="number">1</span></span><br><span class="line">		<span class="keyword">else</span>: <span class="comment">#当前位置不合法，探测当前行的下一个位置</span></span><br><span class="line">			<span class="keyword">if</span> row&gt;=<span class="number">8</span>: <span class="comment">#当前行、当前列均到了最后，记录一个解</span></span><br><span class="line">				count+=<span class="number">1</span></span><br><span class="line">			row -= <span class="number">1</span> <span class="comment"># 返回上一行，继续探索</span></span><br><span class="line">			queen[row] += <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	<span class="keyword">global</span> queen</span><br><span class="line">	queen = [<span class="number">-1</span>]*<span class="number">9</span></span><br><span class="line">	<span class="keyword">print</span> find()</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queen8</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span>[] queen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Queen8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">    	System.out.println(find());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">avaliable</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x&lt;row;x++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (queen[x]==col || x-queen[x]==row-col || x+queen[x]==row+col) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">		queen[row] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (row &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (row&lt;<span class="number">8</span> &amp;&amp; queen[row]&lt;<span class="number">8</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (avaliable(row, queen[row])) &#123;</span><br><span class="line">					row++;</span><br><span class="line">					queen[row] = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					queen[row]++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (row&gt;=<span class="number">8</span>) &#123;</span><br><span class="line">					count++;</span><br><span class="line">				&#125;</span><br><span class="line">				row--;</span><br><span class="line">				System.out.println(row);</span><br><span class="line">				<span class="keyword">if</span> (row&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">					queen[row]++;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    	Queen8 q = <span class="keyword">new</span> Queen8();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<blockquote>
<p>参考:<br><a href="http://www.cnblogs.com/jillzhang/archive/2007/10/21/922830.html" target="_blank" rel="noopener">http://www.cnblogs.com/jillzhang/archive/2007/10/21/922830.html</a><br><a href="https://baike.baidu.com/item/%E5%9B%9E%E6%BA%AF%E6%B3%95" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%9B%9E%E6%BA%AF%E6%B3%95</a><br><a href="https://github.com/zhsj/nqueen/blob/master/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98.md" target="_blank" rel="noopener">https://github.com/zhsj/nqueen/blob/master/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98.md</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular2+项目中添加Bootstrap</title>
    <url>/2018/10/19/Angular2-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%B7%BB%E5%8A%A0Bootstrap/</url>
    <content><![CDATA[<p>大部分内容翻译自 <a href="https://github.com/angular/angular-cli/wiki/stories-include-bootstrap" target="_blank" rel="noopener">https://github.com/angular/angular-cli/wiki/stories-include-bootstrap</a></p>
<p>Boostrap是一款很好用的CSS框架，但是如何把它加到Angular2项目里好像中文文档写的很少。下面就介绍下如何讲Bootstrap添加到Angular2+项目中。</p>
<a id="more"></a>

<h2 id="如果你使用CSS"><a href="#如果你使用CSS" class="headerlink" title="如果你使用CSS"></a>如果你使用CSS</h2><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>先新建一个Angular2 项目然后cd到项目目录下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new my-app</span><br><span class="line"><span class="built_in">cd</span> my-app</span><br></pre></td></tr></table></figure>


<h3 id="安装Bootstrap"><a href="#安装Bootstrap" class="headerlink" title="安装Bootstrap"></a>安装Bootstrap</h3><p>新建好项目之后就需要将Bootstrap添加到项目中。使用—save可以把依赖顺便添加到package.json文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install bootstrap --save</span><br></pre></td></tr></table></figure>

<h3 id="修改项目配置"><a href="#修改项目配置" class="headerlink" title="修改项目配置"></a>修改项目配置</h3><p>找到项目中的angular.json文件。在文件中的projects.architect.build.options下找到style属性。添加一条到bootstrap.min.css的路径。</p>
<p>配置文件build部分如下所示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"build": &#123;</span><br><span class="line">  "options": &#123;</span><br><span class="line">    "styles": [</span><br><span class="line">      "./node_modules/bootstrap/dist/css/bootstrap.min.css",</span><br><span class="line">      <span class="string">"styles.css"</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>官网的路径写的是<code>../node_modules/bootstrap/dist/css/bootstrap.min.css</code> 但是我觉得他们可能写错了，node_modules和angular.json明明在同一层级。</p>
</blockquote>
<h3 id="测试项目"><a href="#测试项目" class="headerlink" title="测试项目"></a>测试项目</h3><p>在app.component.html 添加以下代码，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Test Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后通过ng serve运行项目，打开浏览器访问<code>localhost:4200</code>，查看按钮样式是否改变。</p>
<h2 id="如果你使用SASS"><a href="#如果你使用SASS" class="headerlink" title="如果你使用SASS"></a>如果你使用SASS</h2><h3 id="新建项目-1"><a href="#新建项目-1" class="headerlink" title="新建项目"></a>新建项目</h3><p>先新建一个Angular2 项目然后cd到项目目录下。（注意这次有–style=scss）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new my-app --style=scss</span><br><span class="line"><span class="built_in">cd</span> my-app</span><br></pre></td></tr></table></figure>


<h3 id="安装Bootstrap-1"><a href="#安装Bootstrap-1" class="headerlink" title="安装Bootstrap"></a>安装Bootstrap</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install bootstrap --save</span><br></pre></td></tr></table></figure>

<h3 id="修改项目配置-1"><a href="#修改项目配置-1" class="headerlink" title="修改项目配置"></a>修改项目配置</h3><p>在 src/文件夹下新建一个文件_variables.scss。</p>
<p>将以下内容添加到_variables.scss文件中：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$icon-font-path</span>: <span class="string">'../node_modules/bootstrap-sass/assets/fonts/bootstrap/'</span>;</span><br></pre></td></tr></table></figure>

<p>在项目根目录下找到 styles.scss文件添加以下内容：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">'variables'</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">'../node_modules/bootstrap/scss/bootstrap'</span>;</span><br></pre></td></tr></table></figure>


<h3 id="测试项目-1"><a href="#测试项目-1" class="headerlink" title="测试项目"></a>测试项目</h3><p>在app.component.html 添加以下代码，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Test Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后通过ng serve运行项目，打开浏览器访问localhost:4200，查看按钮样式是否改变。</p>
<p>为了确保项目已经配置好，可以打开_variables.scss添加：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$primary</span>: red;</span><br></pre></td></tr></table></figure>

<p>然后保存刷新网页查看字体颜色是否变成了红色。</p>
]]></content>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>CMMotionActivityManager</title>
    <url>/2018/09/24/CMMotionActivityManager/</url>
    <content><![CDATA[<p>现在很多应用都需要检测用户的运动情况，而iPhone上有一整套传感器可以帮助开发者确定用户的运动状况例如 气压计，陀螺仪，磁强计，加速度传感器和GPS模块，然而这些传感器模块的数据需要通过CPU计算得到判断得到结果，如果一直在后台运行程序来不断获取数据容易让app变得十分耗电，比如美国的一家新型保险公司root。他们通过app来检测得到用户的驾驶数据，然后通过计算得到用户的驾驶习惯，评估之后会给出用户相应的保险报价。比如这个人加速过快或者转弯过猛就说明这个人驾驶习惯不好，保险费用就会相对来说高一些。然后我下载了这个app之后惊奇的发现，就算半夜我没开车它也一直在后台获取我的数据，导致我手机一晚上耗电百分之十几（新的iPhone 8P，平时一晚上大约掉1%的电）</p>
<a id="more"></a>

<h2 id="M系列协处理器"><a href="#M系列协处理器" class="headerlink" title="M系列协处理器"></a>M系列协处理器</h2><p>对于这个问题，苹果有更好的解决办法了。自从2013年的iPhone5s之后每一台iPhone和Apple Watch上都装上了<strong>M系列</strong>协处理器。通过这个专用硬件系统可以将所有传感器处理工作从CPU上卸载掉，从而减少电量的使用。CMMotionActivityManager 由 Core Motion 框架提供。Core Motion 通过调用<strong>M系列</strong>协处理器来获取用户运动情况。</p>
<h2 id="CMMotionActivity"><a href="#CMMotionActivity" class="headerlink" title="CMMotionActivity"></a>CMMotionActivity</h2><p>CMMotionActivity 对每种运动都会有个布尔值属性，并且还有一个设备是否处于静止状态的属性。也就是说用户可能同时处于多个状态，比如开着车突然停在了红灯前，那么 automotive和 stationary都会为 ture。</p>
<p>属性列表如下：</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">stationary</td>
<td align="left">禁止状态</td>
</tr>
<tr>
<td align="left">walking</td>
<td align="left">走路</td>
</tr>
<tr>
<td align="left">running</td>
<td align="left">跑步</td>
</tr>
<tr>
<td align="left">cycling</td>
<td align="left">自行车</td>
</tr>
<tr>
<td align="left">automotive</td>
<td align="left">交通工具（如果是在陆地上可以视为开车，如果是在水里可以视为在坐船）</td>
</tr>
<tr>
<td align="left">unknown</td>
<td align="left">无法识别</td>
</tr>
</tbody></table>
<p>为了方便理解我自己写了个app，放几张截图来解释下，其中红色背景代表熟悉布尔值为<code>false</code>的情况，绿色为<code>true</code>的情况：</p>
<p>这是你在开车 <em>（刚开始开车不会识别，大约行驶1分钟之后显示为在开车）</em>：</p>
<p><img src="../../../../../image/d7fbe7a4-ae14-45bf-a3e7-1cb23e7f2640.PNG"></p>
<p>这是你开车停到了红灯前：</p>
<p><img src="../../../../../image/359d0179-68d9-4e40-8bab-f4f927cafd66.PNG"></p>
<p>这是手机放着不动：</p>
<p><img src="../../../../../image/7aff2260-cb42-4b58-8d23-87a981ddb981.PNG"></p>
<p>这是跑步或者你快速的摇手机：</p>
<p><img src="../../../../../image/e62d20ad-05a2-46d7-9e40-ec072d1a07c2.PNG"></p>
<p>这是人在走路或者慢慢的摇手机：</p>
<p><img src="../../../../../image/8113be39-f23f-408d-b3c1-686b937caee3.PNG"></p>
<h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> CoreMotion</span><br><span class="line"><span class="keyword">let</span> manager = <span class="type">CMMotionActivityManager</span>()</span><br><span class="line">manager.startActivityUpdates(to: .main) &#123; (activity) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> activity = activity <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> activity.walking &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"🚶‍"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> activity.running &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"🏃‍"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> activity.cycling &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"🚴‍"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> activity.automotive &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"🚗"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> activity.stationary &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"🛑"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://developer.apple.com/documentation/coremotion/cmmotionactivity" target="_blank" rel="noopener">https://developer.apple.com/documentation/coremotion/cmmotionactivity</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>AFNetworking</title>
    <url>/2015/12/21/AFNetworking/</url>
    <content><![CDATA[<p><a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener">https://github.com/AFNetworking/AFNetworking</a></p>
<p>AFNetworking 是一款备受喜爱的iOS端和Mac OS X端的网络库。它构建于<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html" target="_blank" rel="noopener"> Foundation URL Loading System</a>之上, 对cocoa的网络层做了扩展。它拥有良好的架构,丰富的api,以及模块化构建方式,使得使用起来非常轻松。</p>
<a id="more"></a>


<blockquote>
<p>Swift可以使用<a href="http://caoyudong.com/2015/10/27/Alamofire/">Alamofire</a></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="使用CocoaPods安装"><a href="#使用CocoaPods安装" class="headerlink" title="使用CocoaPods安装"></a>使用CocoaPods安装</h3><p>在<code>Podfile</code>里面加入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="string">'https://github.com/CocoaPods/Specs.git'</span></span><br><span class="line">platform :ios, <span class="string">'8.0'</span></span><br><span class="line"></span><br><span class="line">pod <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 3.0'</span></span><br></pre></td></tr></table></figure>

<h3 id="使用Carthage安装"><a href="#使用Carthage安装" class="headerlink" title="使用Carthage安装"></a>使用Carthage安装</h3><p>在<code>Cartfile</code>中加入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">github <span class="string">"AFNetworking/AFNetworking"</span> ~&gt; 3.0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.0版本只支持<code>iOS 7</code>、<code>OS X 10.9</code>以上的版本</p>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>导入头文件</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;AFNetworking.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="检查网络是否连接"><a href="#检查网络是否连接" class="headerlink" title="检查网络是否连接"></a>检查网络是否连接</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Reachability: %@"</span>, AFStringFromNetworkReachabilityStatus(status));</span><br><span class="line">    </span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[[AFNetworkReachabilityManager sharedManager] startMonitoring];</span><br></pre></td></tr></table></figure>

<p>其中<code>status</code>表示网络状态,通过Wi-Fi链接返回2，用手机流量返回1，无连接为0，为止状态为－1 。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, AFNetworkReachabilityStatus) &#123;</span><br><span class="line">    AFNetworkReachabilityStatusUnknown          = <span class="number">-1</span>,</span><br><span class="line">    AFNetworkReachabilityStatusNotReachable     =  <span class="number">0</span>,</span><br><span class="line">    AFNetworkReachabilityStatusReachableViaWWAN =  <span class="number">1</span>,</span><br><span class="line">    AFNetworkReachabilityStatusReachableViaWiFi =  <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="请求JSON数据"><a href="#请求JSON数据" class="headerlink" title="请求JSON数据"></a>请求JSON数据</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://example.com"</span>];</span><br><span class="line">AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</span><br><span class="line">[manager GET:URL.absoluteString parameters:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionTask</span> *task, <span class="keyword">id</span> responseObject) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"JSON: %@"</span>, responseObject);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果穿回来的数据带有数组可以这样</span></span><br><span class="line">    <span class="comment">//NSArray *data = [responseObject objectForKey:@"data"];</span></span><br><span class="line">    <span class="comment">//NSString *name = [data[0] objectForKey:@"name"];</span></span><br><span class="line">    <span class="comment">//NSLog(@"name: %@", name);</span></span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionTask</span> *operation, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Error: %@"</span>, error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>其中<code>parameters</code>可以用<code>NSDictionary</code>，如</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSDictionary</span> *parameters = @&#123;<span class="string">@"foo"</span>: <span class="string">@"bar"</span>, <span class="string">@"baz"</span>: @[@<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>]&#125;;</span><br></pre></td></tr></table></figure>

<p>post数据的话将 <code>GET</code>改为<code>POST</code>就可以了～</p>
<hr>
<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line">AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://example.com/download.zip"</span>];</span><br><span class="line"><span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:URL];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURLSessionDownloadTask</span> *downloadTask = [manager downloadTaskWithRequest:request progress:<span class="literal">nil</span> destination:^<span class="built_in">NSURL</span> *(<span class="built_in">NSURL</span> *targetPath, <span class="built_in">NSURLResponse</span> *response) &#123;</span><br><span class="line">    <span class="built_in">NSURL</span> *documentsDirectoryURL = [[<span class="built_in">NSFileManager</span> defaultManager] URLForDirectory:<span class="built_in">NSDocumentDirectory</span> inDomain:<span class="built_in">NSUserDomainMask</span> appropriateForURL:<span class="literal">nil</span> create:<span class="literal">NO</span> error:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">return</span> [documentsDirectoryURL URLByAppendingPathComponent:[response suggestedFilename]];</span><br><span class="line">&#125; completionHandler:^(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSURL</span> *filePath, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"File downloaded to: %@"</span>, filePath);</span><br><span class="line">&#125;];</span><br><span class="line">[downloadTask resume];</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line">AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://example.com/upload"</span>];</span><br><span class="line"><span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:URL];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURL</span> *filePath = [<span class="built_in">NSURL</span> fileURLWithPath:<span class="string">@"file://path/to/image.png"</span>];</span><br><span class="line"><span class="built_in">NSURLSessionUploadTask</span> *uploadTask = [manager uploadTaskWithRequest:request fromFile:filePath progress:<span class="literal">nil</span> completionHandler:^(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> responseObject, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Error: %@"</span>, error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Success: %@ %@"</span>, response, responseObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br><span class="line">[uploadTask resume];</span><br></pre></td></tr></table></figure>


<blockquote>
<p>从2.0迁移到3.0的方法，<a href="https://github.com/AFNetworking/AFNetworking/wiki/AFNetworking-3.0-Migration-Guide" target="_blank" rel="noopener">官方文档</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Category</title>
    <url>/2016/03/24/Category/</url>
    <content><![CDATA[<p>开发的时候，如果我们想往一个已经存在的并且很复杂的类里面添加一个方法怎么办呢？翻源码加？源码已经那么复杂了，如果不断往里面添加，代码将变得不可维护。。。那就创建子类喽！问题是，那么多子类，谁会记得调用哪个类的哪个方法……就算你征服了如此复杂的代码，系统顺利跑起来了，一段时间后接手维护代码的人肯定要问候你全家千万遍。</p>
<p>所以，苹果给出了解决这一问题的方法–<strong>Category</strong>。</p>
<a id="more"></a>

<p>Category 是一种往已经存在的类里面添加新函数的方法。对于被扩展的类我们不需要访问他的源码，也不需要创建子类。</p>
<p>这里一般使用约定俗成的习惯，将声明文件和实现文件统一采用 <strong>原类名+Category名</strong> 的方式命名。使用也非常简单，引入Category的声明文件，然后正常调用即可。</p>
<p><strong>创建Category的方法：</strong></p>
<blockquote>
<p><code>New file</code> -&gt; <code>Objective-C File</code> -&gt; (<code>file type</code> -&gt; <code>Category</code>, <code>subclass</code> -&gt; <code>NSXXXX</code>, <code>name</code> -&gt; <code>……</code>) -&gt; <code>Create~</code>就可以了</p>
</blockquote>
<h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>比如，开发中我们经常用到NSUserDefault。每次使用我们都要这样：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] setValue:status forKey:<span class="string">@"userId"</span>];</span><br></pre></td></tr></table></figure>
<p>很麻烦，而且不同地方使用如果把<code>key</code>写错了会得不到正确的值，改正这种Debug需要极高的想象力。</p>
<p>但是我们可以用Category解决这个问题：</p>
<p>创建一个NSUserDefault的Category,然后在里面写上一些常用的set和get方法，使用的时候就可以轻易的得到或者设置想要的值，不必担心<code>key</code>值写错。</p>
<p>比如：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  NSUserDefaults+CCUserDefaults.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSUserDefaults</span> (<span class="title">CCUserDefaults</span>)</span></span><br><span class="line"></span><br><span class="line">+(<span class="keyword">void</span>)setUserPassword:(<span class="built_in">NSString</span> *)password;</span><br><span class="line">+(<span class="built_in">NSString</span> *)userPassword;</span><br><span class="line"></span><br><span class="line">+(<span class="keyword">void</span>)setUserAccount:(<span class="built_in">NSString</span> *)account;</span><br><span class="line">+(<span class="built_in">NSString</span> *)userAccount;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  NSUserDefaults+CCUserDefaults.m</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"NSUserDefaults+CCUserDefaults.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> userPassword = <span class="string">@"password"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> userAccount  = <span class="string">@"account"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSUserDefaults</span> (<span class="title">CCUserDefaults</span>)</span></span><br><span class="line"></span><br><span class="line">+(<span class="keyword">void</span>)setUserPassword:(<span class="built_in">NSString</span> *)password &#123;</span><br><span class="line">    [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] setValue:password forKey:userPassword];</span><br><span class="line">&#125;</span><br><span class="line">+(<span class="built_in">NSString</span> *)userPassword &#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] stringForKey:userPassword];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+(<span class="keyword">void</span>)setUserAccount:(<span class="built_in">NSString</span> *)account &#123;</span><br><span class="line">    [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] setValue:account forKey:userAccount];</span><br><span class="line">&#125;</span><br><span class="line">+(<span class="built_in">NSString</span> *)userAccount &#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] stringForKey:userAccount];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>使用的时候直接使用就可以，方便了很多：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//某个controller</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"NSUserDefaults+CCUserDefaults.h"</span></span></span><br><span class="line"></span><br><span class="line">[<span class="built_in">NSUserDefaults</span> setUserPassword:<span class="keyword">self</span>.password];</span><br><span class="line">[<span class="built_in">NSUserDefaults</span> setUserAccount:<span class="keyword">self</span>.account];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>貌似这个例子有点抠脚……</p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Carthage和CocoaPods</title>
    <url>/2015/12/24/Carthage%E5%92%8CCocoaPods/</url>
    <content><![CDATA[<p><a href="https://github.com/Carthage/Carthage" target="_blank" rel="noopener">Carthage</a></p>
<p><img src="https://github.com/Carthage/Carthage/raw/master/Logo/PNG/header.png"></p>
<p><a href="https://github.com/CocoaPods/CocoaPods" target="_blank" rel="noopener">CocoaPods</a><br><img src="https://camo.githubusercontent.com/bc5c9328a1d48a8c805e0fa16904b617adca99b4/68747470733a2f2f7261772e6769746875622e636f6d2f436f636f61506f64732f7368617265645f7265736f75726365732f6d61737465722f6173736574732f636f636f61706f64732d62616e6e65722d726561646d652e706e67"></p>
<p>Carthage和CocoaPods和都是主流的iOS包管理工具。其中CocoaPods比较主流，因为使用方便，开发者很容易就可以将一个第三方库集成到自己的项目里。</p>
<p>但是CocoaPods会改变项目结构， CocoaPods 会生成一个 Workspace，打开项目需要通过新建的Workspave，不然项目会报错。而Carthage就不会。</p>
<p>Carthage编译你的依赖，并提供框架的二进制文件，但你仍然保留对项目的结构和设置的完整控制。Carthage不会自动的修改你的项目文件或编译设置。</p>
<h4 id="PS：Carthage和CocoaPods在同一个项目里面可以混用！！"><a href="#PS：Carthage和CocoaPods在同一个项目里面可以混用！！" class="headerlink" title="PS：Carthage和CocoaPods在同一个项目里面可以混用！！"></a>PS：Carthage和CocoaPods在同一个项目里面可以混用！！</h4><a id="more"></a>


<h2 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h2><p><strong>安装</strong></p>
<p>安装CocoaPods需要Ruby环境，Ruby是Mac OS X自带的，所以可以直接安装。</p>
<p>输入以下命令就可以安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure>

<blockquote>
<p>国内安装会卡住，因为链接被墙了。这时候可以用VPN或者淘宝Ruby镜像来访问。  </p>
</blockquote>
<p>按照下面的顺序在终端中敲入依次敲入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/</span><br></pre></td></tr></table></figure>

<p>等有反应之后再敲入以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem sources -a http://ruby.taobao.org/</span><br></pre></td></tr></table></figure>

<p>为了验证你的Ruby镜像是并且仅是taobao，可以用以下命令查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gem sources -l</span><br></pre></td></tr></table></figure>
<p>只有在终端中出现下面文字才表明你上面的命令是成功的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">http://ruby.taobao.org/</span><br></pre></td></tr></table></figure>

<p>这时候再运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure>
<p>就可以了</p>
<p><strong>使用</strong></p>
<p>举个例子吧</p>
<p>比如你想安装 <code>AFNetworking</code> <a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener">https://github.com/AFNetworking/AFNetworking</a></p>
<p>先在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pod search AFNetworking</span><br></pre></td></tr></table></figure>
<p>可以看到以下结果，说明可以用CocoaPods安装 AFNetworking</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-24/68424321.jpg"></p>
<p>或者，可以直接去<code>AFNetworking</code>的Github页面上看，一般支持CocoaPods安装的项目作者都会写到README.md里面</p>
<ul>
<li><p>在你需要用到的工厂目录下创建个新文件，文件名交<code>PodFile</code>。<br>  <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-24/26981649.jpg"></p>
</li>
<li><p>在<code>PodFile</code>中加入  </p>
  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'8.0'</span></span><br><span class="line">pod <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 3.0'</span></span><br></pre></td></tr></table></figure></li>
<li><p>然后在终端CD到项目目录下，输入</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pod install</span><br></pre></td></tr></table></figure>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-24/47224208.jpg"></p>
</li>
</ul>
<p>这时候文件目录就会变成这样：<br><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-24/77644882.jpg"></p>
<p>现在点击<code>.xcworkspace</code> 才可以正常打开项目。</p>
<h2 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h2><p>Carthage的基本工作流：</p>
<ol>
<li>创建一个Cartfile，包含你希望在项目中使用的框架的列表。</li>
<li>运行Carthage，将会获取列出的框架并编译它们。</li>
<li>将编译完成的.framework二进制文件拖拽到你的Xcode项目当中。</li>
</ol>
<p><strong>安装</strong></p>
<p>Carthage提供OS X平台的pkg安装文件，你可以从Github的最新<a href="https://github.com/Carthage/Carthage/releases" target="_blank" rel="noopener">release</a>中找到，按照引导一步步安装即可。</p>
<p><strong>使用</strong></p>
<p>假设项目中要加入AFNetworking</p>
<ul>
<li><p>在项目目录下创建一个叫做<code>Cartfile</code>的文件</p>
</li>
<li><p>文件中写入</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github &quot;AFNetworking&#x2F;AFNetworking&quot; ~&gt; 3.0</span><br></pre></td></tr></table></figure>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-24/96350374.jpg"></p>
</li>
<li><p>然后在控制台中CD到项目目录下，输入<code>carthage update</code></p>
</li>
</ul>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-24/57524755.jpg"></p>
<p>然后文件目录就会变成这样：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-24/86681271.jpg"></p>
<p>在<code>Carthage</code>-&gt;<code>Build</code>-&gt;<code>iOS</code>找到<code>AFNetworking.framework</code></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-24/7963598.jpg"></p>
<p>将<code>framwork</code>拖入项目中就可以使用了。</p>
<blockquote>
<p>参考资料<br><a href="http://www.open-open.com/lib/view/open1436886568084.html" target="_blank" rel="noopener">http://www.open-open.com/lib/view/open1436886568084.html</a><br><a href="http://blog.csdn.net/iunion/article/details/17010267" target="_blank" rel="noopener">http://blog.csdn.net/iunion/article/details/17010267</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>C＃使用sqlite数据库</title>
    <url>/2015/09/16/C%EF%BC%83%E4%BD%BF%E7%94%A8sqlite%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<blockquote>
<p>环境：Mac win7虚拟机，vs2013 </p>
</blockquote>
<p>首先下载安装<a href="http://system.data.sqlite.org/index.html/doc/trunk/www/downloads.wiki" target="_blank" rel="noopener">Sqlite ADO.NET</a>(有很多版本，我用的是1.0.93)</p>
<a id="more"></a>

<p>下载下来一路next就可以安装好。</p>
<p>然后在工程里面添加引用<code>system.data.sqlite.dll</code>和<code>SQLite.Interop.dll</code>。我电脑里面这两个文件在<code>C:\Program Files (x86)\System.Data.SQLite\2013\bin</code>。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-9-16/1523753.jpg"></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-9-16/20560647.jpg"></p>
<p>然后添加<code>using System.Data.SQLite;</code>就可以用了。</p>
<hr>
<h2 id="具体增删查改操作"><a href="#具体增删查改操作" class="headerlink" title="具体增删查改操作"></a>具体增删查改操作</h2><h3 id="创建数据库文件"><a href="#创建数据库文件" class="headerlink" title="创建数据库文件"></a>创建数据库文件</h3><p>在根目录下创建一个sqlite文件   </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SQLiteConnection <span class="title">getDatabase</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            SQLiteConnection conn = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> dbPath = <span class="string">"Data Source ="</span> + Environment.CurrentDirectory + <span class="string">"/test.db"</span>;</span><br><span class="line">            conn = <span class="keyword">new</span> SQLiteConnection(dbPath);<span class="comment">//创建数据库实例，指定文件位置 </span></span><br><span class="line">            <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createTable</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        SQLiteConnection conn = getDatabase();</span><br><span class="line"></span><br><span class="line">        conn.Open();<span class="comment">//打开数据库，若文件不存在会自动创建  </span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">string</span> sql = <span class="string">"CREATE TABLE IF NOT EXISTS testTable(id integer primary key,a text,b text,c text);"</span>;<span class="comment">//建表语句  </span></span><br><span class="line">        SQLiteCommand cmdCreateTable = <span class="keyword">new</span> SQLiteCommand(sql, conn);</span><br><span class="line">        cmdCreateTable.ExecuteNonQuery();<span class="comment">//如果表不存在，创建数据表 </span></span><br><span class="line">        conn.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertIntoDatabase</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            SQLiteConnection conn = getDatabase();</span><br><span class="line">            conn.Open();</span><br><span class="line">            SQLiteCommand cmdInsert = <span class="keyword">new</span> SQLiteCommand(conn);</span><br><span class="line">            cmdInsert.CommandText = <span class="string">"INSERT INTO testTable(a,b,c) VALUES(1,2,3)"</span>;<span class="comment">//插入数据  </span></span><br><span class="line">            cmdInsert.ExecuteNonQuery();</span><br><span class="line">            conn.Close();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteFromDatabase</span>(<span class="params"><span class="keyword">int</span> a</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            SQLiteConnection conn = getDatabase();</span><br><span class="line">            conn.Open();</span><br><span class="line">            <span class="keyword">string</span> sql = <span class="string">"delete from testTable where id = "</span> + a;</span><br><span class="line">            SQLiteCommand cmdInsert = <span class="keyword">new</span> SQLiteCommand(conn);</span><br><span class="line">            cmdInsert.CommandText = sql;  </span><br><span class="line">            cmdInsert.ExecuteNonQuery();</span><br><span class="line">            conn.Close();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readNameFromDatabase</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            SQLiteConnection conn = getDatabase();</span><br><span class="line">            conn.Open();<span class="comment">//打开数据库，若文件不存在会自动创建  </span></span><br><span class="line">            <span class="keyword">string</span> sql = <span class="string">"select id name from testTable"</span>;</span><br><span class="line">            SQLiteCommand cmdQ = <span class="keyword">new</span> SQLiteCommand(sql, conn);</span><br><span class="line">            SQLiteDataReader reader = cmdQ.ExecuteReader();</span><br><span class="line">            <span class="keyword">while</span> (reader.Read())</span><br><span class="line">            &#123;</span><br><span class="line">            	<span class="keyword">int</span> id = reader.GetInt32(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">string</span> a = reader.GetString(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">string</span> b = reader.GetString(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">string</span> c = reader.GetString(<span class="number">3</span>);</span><br><span class="line">                <span class="comment">//………………</span></span><br><span class="line">            &#125;</span><br><span class="line">            conn.Close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Console.ReadKey(); </span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateDatabase</span>(<span class="params"><span class="keyword">int</span> a</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            SQLiteConnection conn = getDatabase();</span><br><span class="line">            conn.Open();</span><br><span class="line">            <span class="keyword">string</span> sql = <span class="string">"update testTable set a = 5,b = 6,c = 7 where id = "</span> + a;</span><br><span class="line">            SQLiteCommand cmdInsert = <span class="keyword">new</span> SQLiteCommand(conn);</span><br><span class="line">            cmdInsert.CommandText = sql;</span><br><span class="line">            cmdInsert.ExecuteNonQuery();</span><br><span class="line">            conn.Close();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>跟iOS上sqlite用法好像啊……</p>
</blockquote>
]]></content>
      <tags>
        <tag>C＃</tag>
        <tag>sqlite</tag>
      </tags>
  </entry>
  <entry>
    <title>Could not launch “My App” process launch failed： Security</title>
    <url>/2015/11/08/Could-not-launch-%E2%80%9CMy-App%E2%80%9D-process-launch-failed%EF%BC%9A-Security/</url>
    <content><![CDATA[<ol>
<li><p>iOS9真机调试的时候，Xcode会弹出<code>Could not launch &quot;My App&quot; process launch failed: Security</code>。</p>
<p> <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-11-8/5012101.jpg"></p>
</li>
</ol>
<a id="more"></a>

<ol start="2">
<li>这时会发现手机上已经安装了你的应用了。点击应用又会弹出<br>  <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-11-8/65641080.jpg"></li>
</ol>
<p><strong>当时我就跪了！！设置那么大！！你让我去哪里找！！！</strong></p>
<p> 把设置遍历了一遍终于找到了：</p>
<blockquote>
<p><code>设置</code> -&gt; <code>通用</code> -&gt; <code>描述文件</code> -&gt; “你真机运行的AppleID” 选择信任</p>
</blockquote>
<p>然后就可以了。</p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CocoaLumberjack</title>
    <url>/2015/12/23/CocoaLumberjack/</url>
    <content><![CDATA[<p><a href="https://github.com/CocoaLumberjack/CocoaLumberjack" target="_blank" rel="noopener">https://github.com/CocoaLumberjack/CocoaLumberjack</a></p>
<p>CocoaLumberjack是一款log框架，支持iOS和Mac。最大的好处就是可以把Log分成不同等级，方便调适，从此抛弃NSLog。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-23/42692645.jpg"></p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>CocoaPods:</strong></p>
<p>在<code>Podfile</code>中加上：</p>
<p>Objective-C</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'7.0'</span></span><br><span class="line">pod <span class="string">'CocoaLumberjack'</span></span><br></pre></td></tr></table></figure>
<p>Swift</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'8.0'</span></span><br><span class="line">pod <span class="string">'CocoaLumberjack/Swift'</span></span><br><span class="line">use_frameworks!</span><br></pre></td></tr></table></figure>
<p><em>或者：</em></p>
<p><strong>Carthage</strong></p>
<p>在<code>Cartfile</code>中加上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github &quot;CocoaLumberjack&#x2F;CocoaLumberjack&quot;</span><br></pre></td></tr></table></figure>

<p><em>或者手动安装</em></p>
<blockquote>
<p>好麻烦不想写了……官网上有😷😷😷。 大概意思就是把<code>CocoaLumberjack/Lumberjack.xcodeproj</code>拖到项目中，编译然后选自己项目对应的框架。</p>
</blockquote>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>引入</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;CocoaLumberjack/CocoaLumberjack.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>Log分为以下几种，分别代表不同的等级</p>
<ul>
<li>DDLogError</li>
<li>DDLogWarn</li>
<li>DDLogInfo</li>
<li>DDLogDebug</li>
<li>DDLogVerbose</li>
</ul>
<p>严重度：<code>DDLogError</code>&gt;<code>DDLogWarn</code>&gt;<code>DDLogInfo</code>&gt;<code>DDLogDebug</code>&gt;<code>DDLogVerbose</code></p>
<p>通过下面这个语句可以设置调适的时候在控制台输出哪个等级的Log：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> DDLogLevel ddLogLevel = DDLogLevelDebug;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">`DDLog`语法跟`<span class="built_in">NSLog</span>`语法一摸一样</span><br><span class="line"></span><br><span class="line">```objectivec</span><br><span class="line"><span class="comment">// Convert from this:</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"Broken sprocket detected!"</span>);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"User selected file:%@ withSize:%u"</span>, filePath, fileSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// To this:</span></span><br><span class="line">DDLogError(<span class="string">@"Broken sprocket detected!"</span>);</span><br><span class="line">DDLogVerbose(<span class="string">@"User selected file:%@ withSize:%u"</span>, filePath, fileSize);</span><br></pre></td></tr></table></figure>

<p>比如选了<code>DDLogLevelDebug</code>调试的时候只会在控制台输出<code>Debug</code>,<code>Info</code>,<code>Warn</code>和<code>Error</code>。</p>
<p>swift用法</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="type">DDLog</span>.addLogger(<span class="type">DDTTYLogger</span>.sharedInstance()) <span class="comment">// TTY = Xcode console</span></span><br><span class="line"><span class="type">DDLog</span>.addLogger(<span class="type">DDASLLogger</span>.sharedInstance()) <span class="comment">// ASL = Apple System Logs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fileLogger: <span class="type">DDFileLogger</span> = <span class="type">DDFileLogger</span>() <span class="comment">// File Logger</span></span><br><span class="line">fileLogger.rollingFrequency = <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>  <span class="comment">// 24 hours</span></span><br><span class="line">fileLogger.logFileManager.maximumNumberOfLogFiles = <span class="number">7</span></span><br><span class="line"><span class="type">DDLog</span>.addLogger(fileLogger)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="type">DDLogVerbose</span>(<span class="string">"Verbose"</span>);</span><br><span class="line"><span class="type">DDLogDebug</span>(<span class="string">"Debug"</span>);</span><br><span class="line"><span class="type">DDLogInfo</span>(<span class="string">"Info"</span>);</span><br><span class="line"><span class="type">DDLogWarn</span>(<span class="string">"Warn"</span>);</span><br><span class="line"><span class="type">DDLogError</span>(<span class="string">"Error"</span>);</span><br></pre></td></tr></table></figure>

<p>Objective-C用法：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[DDLog addLogger:[DDTTYLogger sharedInstance]]; <span class="comment">// TTY = Xcode console</span></span><br><span class="line">[DDLog addLogger:[DDASLLogger sharedInstance]]; <span class="comment">// ASL = Apple System Logs</span></span><br><span class="line"></span><br><span class="line">DDFileLogger *fileLogger = [[DDFileLogger alloc] init]; <span class="comment">// File Logger</span></span><br><span class="line">fileLogger.rollingFrequency = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>; <span class="comment">// 24 hour rolling</span></span><br><span class="line">fileLogger.logFileManager.maximumNumberOfLogFiles = <span class="number">7</span>;</span><br><span class="line">[DDLog addLogger:fileLogger];</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">DDLogVerbose(<span class="string">@"Verbose"</span>);</span><br><span class="line">DDLogDebug(<span class="string">@"Debug"</span>);</span><br><span class="line">DDLogInfo(<span class="string">@"Info"</span>);</span><br><span class="line">DDLogWarn(<span class="string">@"Warn"</span>);</span><br><span class="line">DDLogError(<span class="string">@"Error"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="如何输出有颜色的Log？"><a href="#如何输出有颜色的Log？" class="headerlink" title="如何输出有颜色的Log？"></a>如何输出有颜色的Log？</h3><p>首先要去安装一个Xcode插件<a href="https://github.com/robbiehanson/XcodeColors" target="_blank" rel="noopener">XcodeColors</a></p>
<p><strong>安装方法</strong></p>
<p>把项目下载下来，运行，然后重启Xcode。。。。点击<code>Load Bundle</code>就好</p>
<p>然后在项目中加入这两个语句（可以写在<code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code> 里面）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Standard lumberjack initialization</span><br><span class="line">[DDLog addLogger:[DDTTYLogger sharedInstance]];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; And we also enable colors</span><br><span class="line">[[DDTTYLogger sharedInstance] setColorsEnabled:YES];</span><br></pre></td></tr></table></figure>

<p><strong>还没完！！！</strong></p>
<p>然后在Xcode中设置：</p>
<ul>
<li>Xcode中点击<code>Product</code> -&gt; <code>Edit Scheme</code></li>
<li>点击左边的<code>Run</code>，然后选中<code>Arguments</code></li>
<li>添加一项新的<code>Environment Variable</code>叫<code>XcodeColors</code>，<code>value</code>写<code>YES</code>。</li>
</ul>
<p>现在控制台输出的就是带有颜色的Log了，默认</p>
<ul>
<li><code>DDLogError</code> : 红色</li>
<li><code>DDLogWarn</code>  : 橙色</li>
</ul>
<p><strong>自定义颜色</strong></p>
<p>代码中加入：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Let's customize our colors.</span></span><br><span class="line"><span class="comment">// DDLogInfo : Pink</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> TARGET_OS_IPHONE</span></span><br><span class="line"><span class="built_in">UIColor</span> *pink = [<span class="built_in">UIColor</span> colorWithRed:(<span class="number">255</span>/<span class="number">255.0</span>) green:(<span class="number">58</span>/<span class="number">255.0</span>) blue:(<span class="number">159</span>/<span class="number">255.0</span>) alpha:<span class="number">1.0</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="built_in">NSColor</span> *pink = [<span class="built_in">NSColor</span> colorWithCalibratedRed:(<span class="number">255</span>/<span class="number">255.0</span>) green:(<span class="number">58</span>/<span class="number">255.0</span>) blue:(<span class="number">159</span>/<span class="number">255.0</span>) alpha:<span class="number">1.0</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">[[DDTTYLogger sharedInstance] setForegroundColor:pink backgroundColor:<span class="literal">nil</span> forFlag:DDLogFlagInfo];</span><br><span class="line"></span><br><span class="line">DDLogInfo(<span class="string">@"Warming up printer"</span>); <span class="comment">// Prints in Pink !</span></span><br></pre></td></tr></table></figure>

<hr>
<p></br></br></br></p>
<p>####有个小技巧：</p>
<p>创建一个pch文件，在这个文件里面引入</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;CocoaLumberjack/CocoaLumberjack.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>然后设置log等级</p>
<pre><code class="objectivec">static const DDLogLevel ddLogLevel = DDLogLevelDebug;</code></pre>
<p>整个项目的其它文件就都可以正常使用<code>DDLog</code>了~</p>
<blockquote>
<p>对于如何创建pch文件，以及什么是pch文件有疑问的同学<a href="http://caoyudong.com/2016/01/21/%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0PCH%E6%96%87%E4%BB%B6/">传送门</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>EI CAPTAIN设置使用三根手指拖动窗口</title>
    <url>/2015/11/08/EI-CAPTAIN%E8%AE%BE%E7%BD%AE%E4%BD%BF%E7%94%A8%E4%B8%89%E6%A0%B9%E6%89%8B%E6%8C%87%E6%8B%96%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    <content><![CDATA[<p>前几天手贱抹了磁盘，废了好大的劲才把系统重新装回来。结果设置触控板的时候发现，原来系统上的<code>三根手指拖动窗口</code>的选项不见了！！找了很多地方终于在<a href="http://www.cio.com/article/2978840/os-x/os-x-el-capitan-enable-the-three-finger-drag-gesture.html" target="_blank" rel="noopener">这个网上</a>找到了。(其实一开始就用谷歌哪来那么多事，怪我手贱用百度浪费了好多时间……)</p>
<a id="more"></a>

<ol>
<li><p>打开<code>系统偏好设置</code>-&gt;<code>辅助功能</code></p>
<p> <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-11-8/11007584.jpg"></p>
</li>
<li><p>找到<code>鼠标与触控板</code>—&gt;<code>触控板选项…</code></p>
<p> <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-11-8/58151926.jpg"></p>
</li>
<li><p>勾选<code>启用拖移</code>-&gt;<code>三指拖移</code>就可以了</p>
<p> <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-11-8/83040441.jpg"></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言使用Sqlite</title>
    <url>/2015/10/28/C%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8Sqlite/</url>
    <content><![CDATA[<h2 id="Mac下"><a href="#Mac下" class="headerlink" title="Mac下"></a>Mac下</h2><p>Xcode中需要引入<code>libsqlite3.0.tbd</code></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-28/18226100.jpg"></p>
<h2 id="Windows下"><a href="#Windows下" class="headerlink" title="Windows下"></a>Windows下</h2><p>需要用到sqlite3.lib</p>
<a id="more"></a>

<p> sqlite3官网上并没有sqlite3.lib可下载，要用需自编译生成。<a href="http://www.sqlite.org/" target="_blank" rel="noopener">官网地址</a>  </p>
<p> 如从sqlite3.7.5版本中得到sqlite3.lib，可用VS的LIB工具链接得到。<br>具体过程如下：   </p>
<ol>
<li>先将sqlite-dll-win64-x64-3090100.rar解压到文件夹sqlite-dll-win64-x64-3090100，   </li>
<li>再将VS安装目录下VC中的LIB.EXE，LINK.EXE复制到sqlite-dll-win64-x64-3090100文件夹，**(lib.exe，link.exe地址：C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\bin)**   </li>
<li>在网上下载<a href="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-28/86470628-mspdb60.dll" target="_blank" rel="noopener">mspdb60.dll</a>，复制到sqlite-dll-win64-x64-3090100文件夹，   </li>
<li>将Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE内的   mspdb110.dll复制到sqlite-dll-win64-x64-3090100文件夹。   </li>
<li>在命令窗内运行命令进入sqlite-dll-win64-x64-3090100文件夹   </li>
<li>执行LIB /DEF:SQLITE3.DEF /MACHINE:IX86或LIB /DEF:SQLITE3.DEF 即可生成sqlite3.lib文件。</li>
<li>然后将sqlite3.lib文件引入项目中</li>
</ol>
<p><a href="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-28/2668125-SQLITE3.lib" target="_blank" rel="noopener">sqlite3.lib下载</a></p>
<blockquote>
<p>或者，使用一个超简单的方法.直接从官网上下载源文件，然后把<code>sqlite3.c</code>, <code>sqlite3.h</code> 放入工程中～</p>
</blockquote>
<h2 id="主要函数"><a href="#主要函数" class="headerlink" title="主要函数"></a>主要函数</h2><h3 id="sqlite3-open-const-char-filename-sqlite3-ppDb"><a href="#sqlite3-open-const-char-filename-sqlite3-ppDb" class="headerlink" title="sqlite3_open(const char *filename,sqlite3 **ppDb)"></a><strong>sqlite3_open(const char *filename,sqlite3 **ppDb)</strong></h3><ul>
<li><strong>filename:</strong> 数据库文件的名字</li>
<li><strong>ppDb:</strong> sqlite的一个handle，之后通过这个handle对数据库做操作</li>
</ul>
<h3 id="sqlite3-exec-sqlite3-const-char-sql-int-callback-void-int-char-char-void-char-errmsg"><a href="#sqlite3-exec-sqlite3-const-char-sql-int-callback-void-int-char-char-void-char-errmsg" class="headerlink" title="sqlite3_exec(sqlite3*, const char *sql,int (*callback)(void*,int,char**,char**),void *,char **errmsg)"></a><strong>sqlite3_exec(sqlite3*, const char *sql,int (*callback)(void*,int,char**,char**),void *,char **errmsg)</strong></h3><ul>
<li><strong>sqlite3:</strong> 一个已经打开的handle（通过sqlite3_open处理过）</li>
<li><strong>sql:</strong>  需要执行的sql语句</li>
<li><strong>int (*callback)(void*,int,char**,char**):</strong>  一个回调函数</li>
<li><strong>void*:</strong>  一个回调参数</li>
<li><strong>**errmsg</strong>  错误消息                                  </li>
</ul>
<h2 id="具体增删查改操作"><a href="#具体增删查改操作" class="headerlink" title="具体增删查改操作"></a>具体增删查改操作</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlite3.h"</span></span></span><br></pre></td></tr></table></figure>

<h3 id="创建数据库文件"><a href="#创建数据库文件" class="headerlink" title="创建数据库文件"></a>创建数据库文件</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c</span></span><br><span class="line"><span class="function">sqlite3 *<span class="title">getDatabase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqlite3 *db=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> rc;</span><br><span class="line">    rc = sqlite3_open(<span class="string">"test.db"</span>, &amp;db);   <span class="comment">//打开指定的数据库文件,如果不存在将创建一个同名的数据库文件</span></span><br><span class="line">    <span class="keyword">if</span>( rc )&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Can't open database: %s\n"</span>, sqlite3_errmsg(db));</span><br><span class="line">        sqlite3_close(db);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> db;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createTable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqlite3 *db = getDatabase();</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * sql = <span class="string">"CREATE TABLE IF NOT EXISTS testTable(id integer primary key,a text,b text,c text);"</span>;</span><br><span class="line">    <span class="keyword">char</span> * pErrMsg = <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">int</span> result = sqlite3_exec(db, sql, <span class="number">0</span>, <span class="number">0</span>, &amp;pErrMsg );</span><br><span class="line">    <span class="keyword">if</span>( result != SQLITE_OK )&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"SQL error: %s\n"</span>, pErrMsg);</span><br><span class="line">        sqlite3_free(pErrMsg);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlite3_close(db);                <span class="comment">//关闭数据库</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertIntoDatabase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqlite3 *db = getDatabase();</span><br><span class="line">    <span class="keyword">char</span> * pErrMsg = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> result = sqlite3_exec(db, <span class="string">"INSERT INTO testTable(a,b,c) VALUES(1,2,3);"</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;pErrMsg);</span><br><span class="line">    <span class="keyword">if</span>(result == SQLITE_OK)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入数据成功\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlite3_close(db);                <span class="comment">//关闭数据库</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteFromTable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqlite3 *db = getDatabase();</span><br><span class="line">    <span class="keyword">char</span> *pErrMsg = <span class="number">0</span>;</span><br><span class="line">    sqlite3_exec(db, <span class="string">"delete from testTable where id = 2"</span>, <span class="literal">NULL</span>,<span class="literal">NULL</span>, &amp;pErrMsg);</span><br><span class="line">    sqlite3_close(db);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select_callback</span><span class="params">(<span class="keyword">void</span> * data, <span class="keyword">int</span> col_count, <span class="keyword">char</span> ** col_values, <span class="keyword">char</span> ** col_Name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 每条记录回调一次该函数,有多少条就回调多少次</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; col_count; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">"%s = %s\n"</span>, col_Name[i], col_values[i] == <span class="number">0</span> ? <span class="string">"NULL"</span> : col_values[i] );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">databaseQuery</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqlite3 *db = getDatabase();</span><br><span class="line">    <span class="keyword">char</span> * pErrMsg = <span class="number">0</span>;</span><br><span class="line">    sqlite3_exec(db, <span class="string">"select * from testTable;"</span>, select_callback, <span class="number">0</span>, &amp;pErrMsg);</span><br><span class="line">    sqlite3_close(db);                <span class="comment">//关闭数据库</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出很奇葩，需要根据自己项目做修改</p>
</blockquote>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-28/40328337.jpg"></p>
<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateTable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sqlite3 *db = getDatabase();</span><br><span class="line">    <span class="keyword">char</span> *pErrMsg = <span class="number">0</span>;</span><br><span class="line">    sqlite3_exec(db, <span class="string">"update testTable set a = 666 where id = 1"</span> , <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;pErrMsg);</span><br><span class="line">    sqlite3_close(db);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>sqlite</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron中使用Bootstrap和JQuery</title>
    <url>/2018/05/01/Electron%E4%B8%AD%E4%BD%BF%E7%94%A8Bootstrap%E5%92%8CJQuery/</url>
    <content><![CDATA[<p>一般网页都可以直接使用<code>bootstrap</code>和<code>JQuery</code> 的CDN来请求<code>bootstrap</code>和<code>JQuery</code>。但是做electron应用的时候希望做成本地的，因为不是每时每刻都可以联网。原以为 <code>npm</code> 安装之后直接用就可以，结果遇到了很多坑，这里记录下。</p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先使用npm安装bootstrap 和 JQuery</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install bootstrap --save</span><br><span class="line">npm install JQuery --save</span><br></pre></td></tr></table></figure>

<p>然后就会发现有一行警告</p>
<blockquote>
<p>npm WARN <a href="mailto:&#98;&#x6f;&#x6f;&#116;&#x73;&#116;&#114;&#x61;&#x70;&#64;&#52;&#46;&#49;&#46;&#x31;">&#98;&#x6f;&#x6f;&#116;&#x73;&#116;&#114;&#x61;&#x70;&#64;&#52;&#46;&#49;&#46;&#x31;</a> requires a peer of popper.js@^1.14.3 but none is installed. You must install peer dependencies yourself.</p>
</blockquote>
<p>于是还需要安装 <code>popper.js</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install popper.js --save</span><br></pre></td></tr></table></figure>

<p>安装部分就完成了。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>bootstrap 直接从安装文件里面拿就好，地址是 <code>./node_modules/bootstrap/dist/css/bootstrap.min.css</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./node_modules/bootstrap/dist/css/bootstrap.min.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JQuery 就很坑了，google了好多资料，electron里面你应该这么写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.$ = <span class="built_in">window</span>.jQuery = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不然会报错，很多神奇的错误。</p>
<hr>
<h2 id="关于bootstrap-datepicker的一个坑"><a href="#关于bootstrap-datepicker的一个坑" class="headerlink" title="关于bootstrap-datepicker的一个坑"></a>关于bootstrap-datepicker的一个坑</h2><p><del>使用npm安装的bootstrap-datepicker完全没用，我从网上复制粘贴了整个<code>bootstrap-datepicker.js</code> 的代码，本地新建文件，然后<code>&lt;script src = &quot;bootstrap-datepicker.js&quot;&gt;&lt;/script&gt;</code>才可以正常使用</del></p>
<p>后来发现可以这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install bootstrap-datepicker --save</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> <span class="built_in">require</span>(<span class="string">'bootstrap-datepicker'</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>菜的抠脚</p>
</blockquote>
]]></content>
      <tags>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>JGProgressHUD</title>
    <url>/2015/12/22/JGProgressHUD/</url>
    <content><![CDATA[<p><a href="https://github.com/JonasGessner/JGProgressHUD" target="_blank" rel="noopener">https://github.com/JonasGessner/JGProgressHUD</a></p>
<p>JGProgressHUD是HUD(head up Display)中的一种，虽然它在Github上的star不是做多的，但是它功能应该是最花哨的，我比较喜欢～～ <del>毕竟可以装逼</del></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-22/81178201.jpg"></p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>CocoaPods:</strong>  </p>
<p>把下面这行写进<code>Podfile</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod <span class="string">'JGProgressHUD'</span></span><br></pre></td></tr></table></figure>


<p><strong>Carthage:</strong></p>
<p>把下面这行写进<code>Cartfile</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">github <span class="string">"JonasGessner/JGProgressHUD"</span> &gt;= 1.3.1</span><br></pre></td></tr></table></figure>


<p><strong>Framework (iOS &gt;= 8.0 only):</strong>  </p>
<ol>
<li>把<code>JGProgressHUD.xcodeproj</code>拖入工程文件。</li>
<li>把<code>JGProgressHUD.framework</code> 加到工程的<code>General</code>-&gt;<code>Embedded Binaries</code>中。</li>
<li>在<code>Build Settings</code>-&gt;<code>Other Linker Flags</code>中加入<code>-ObjC flag</code>。</li>
</ol>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先要“import”头文件 </p>
<p>Objective-C:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"JGProgressHUD.h"</span></span></span><br></pre></td></tr></table></figure>

<p>swift:  </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> JGProgressHUD</span><br></pre></td></tr></table></figure>

<h3 id="模糊进度显示-其实就是一朵菊花"><a href="#模糊进度显示-其实就是一朵菊花" class="headerlink" title="模糊进度显示(其实就是一朵菊花)"></a>模糊进度显示(其实就是一朵菊花)</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">JGProgressHUD *HUD = [JGProgressHUD progressHUDWithStyle:JGProgressHUDStyleDark];</span><br><span class="line">   HUD.textLabel.text = <span class="string">@"Loading"</span>;</span><br><span class="line">   [HUD showInView:<span class="keyword">self</span>.view];</span><br><span class="line">   [HUD dismissAfterDelay:<span class="number">3.0</span>];</span><br></pre></td></tr></table></figure>

<h3 id="错误显示"><a href="#错误显示" class="headerlink" title="错误显示"></a>错误显示</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">JGProgressHUD *HUD = [JGProgressHUD progressHUDWithStyle:JGProgressHUDStyleDark];</span><br><span class="line">    HUD.textLabel.text = <span class="string">@"Error"</span>;</span><br><span class="line">    HUD.indicatorView = [[JGProgressHUDErrorIndicatorView alloc] init]; <span class="comment">//JGProgressHUDSuccessIndicatorView is also available</span></span><br><span class="line">    [HUD showInView:<span class="keyword">self</span>.view];</span><br><span class="line">    [HUD dismissAfterDelay:<span class="number">3.0</span>];</span><br></pre></td></tr></table></figure>

<h3 id="自定义图片显示"><a href="#自定义图片显示" class="headerlink" title="自定义图片显示"></a>自定义图片显示</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">JGProgressHUD *HUD = [JGProgressHUD progressHUDWithStyle:JGProgressHUDStyleDark];</span><br><span class="line">HUD.indicatorView = [[JGProgressHUDImageIndicatorView alloc] initWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"my_image.png"</span>]];</span><br><span class="line">[HUD showInView:<span class="keyword">self</span>.view];</span><br><span class="line">[HUD dismissAfterDelay:<span class="number">3.0</span>];</span><br></pre></td></tr></table></figure>

<h3 id="有进度显示"><a href="#有进度显示" class="headerlink" title="有进度显示"></a>有进度显示</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">JGProgressHUD *HUD = [JGProgressHUD progressHUDWithStyle:JGProgressHUDStyleDark];</span><br><span class="line">HUD.indicatorView = [[JGProgressHUDPieIndicatorView alloc] initWithHUDStyle:HUD.style]; <span class="comment">//Or JGProgressHUDRingIndicatorView</span></span><br><span class="line">[HUD showInView:<span class="keyword">self</span>.view];</span><br><span class="line">[HUD dismissAfterDelay:<span class="number">3.0</span>];</span><br></pre></td></tr></table></figure>


<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-22/99720404.jpg"></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-22/40583952.jpg"></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-22/10991201.jpg"></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-22/35768606.jpg"></p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron autoUpdater 自动更新</title>
    <url>/2018/06/13/Electron-autoUpdater-%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>Electron是一款可以使用 JavaScript，HTML 和 CSS构建跨平台桌面应用的框架。但是当用户获取下一个版本的时候，只能下载重新安装一遍下一个版本，十分僵硬，于是我们需要引入一个Electron自动更新的方法。</p>
<p>有多种方法可以更新Electron应用. 最简单并且获得官方支持的方法是利用内置的Squirrel框架和Electron的<code>autoUpdater</code>模块。但是目前<code>autoUpdater</code>只有 macOS 和 Window 支持该功能。在 Linux 上没有对自动更新程序的内置支持。</p>
<p>然而，各种谷歌到的官方文档和博客实在是太坑，感觉讲的都不是很详细，我这里记录汇总并加点自己的观点。</p>
<a id="more"></a>

<p>根据官方文档，有两种可以更新的方法：<a href="https://github.com/electron/update.electronjs.org" target="_blank" rel="noopener">update.electronjs.org</a>和<a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="noopener">electron-builder</a>。但是官方API例子<a href="https://github.com/electron/electron-api-demos" target="_blank" rel="noopener">electron-api-demos</a>使用的是<a href="https://github.com/electron-userland/electron-packager" target="_blank" rel="noopener">electron-packager</a>。这里我都会做讨论。</p>
<h2 id="平台区别"><a href="#平台区别" class="headerlink" title="平台区别"></a>平台区别</h2><p>目前<code>autoUpdater</code>只有 macOS 和 Window 支持该功能。在 Linux 上没有对自动更新程序的内置支持。</p>
<h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>在macOS上, autoUpdater模块建立在 Squirrel.Mac上,也就是说不需要任何别的设置，直接打包就可以用了。</p>
<p><strong>但是需要注意：macOS自动更新一定要签名！！而且一定要使用苹果开发者证书，自己生成的没有用（看别人博客说的，我自己也没试过）</strong></p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在 Windows 上实现自动更新是通过 Squirrel.Windows。但它的处理方式与 OSX 完全不同。</p>
<p>与 Squirrel.Mac 不同的点在于：Squirrel.Windows 并不需要一个用于检测新版本的 API 路径，它需要的是一个文件服务器。另外，该 Squirrel 更新器并不内置于 Electron，它是一个第三方依赖。也就是说，你必须把打包的Windows应用生成一个安装程序，<strong>安装之后才可以使用！！！直接运行打包好的程序会报错。</strong>（<code>Cannot find module &#39;squirrel&#39;</code>）</p>
<p><img src="../../../../image/77c4cf93-211e-476a-bc49-ddead2767589.png"></p>
<p>打包程序见下文。</p>
<h2 id="Electron-packager"><a href="#Electron-packager" class="headerlink" title="Electron-packager"></a>Electron-packager</h2><p>Electron-packager 是一款命令行工具以及Node.js库，可以将Electron的应用程序以及所需代码库打包成各个平台可执行文件。</p>
<p>支持的平台有：</p>
<ul>
<li>Windows (32/64 bit)</li>
<li>OS X (also known as macOS)</li>
<li>Linux (x86/x86_64)</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>需要Node.js 4.0 以上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for use in npm scripts</span></span><br><span class="line">npm install electron-packager --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># for use from cli</span></span><br><span class="line">npm install electron-packager -g</span><br></pre></td></tr></table></figure>

<p>非windows平台上面打包windows可执行程序需要先安装<code>Wine</code>，<strong>但是按照我个人经验，在Mac上打包一次需要超过半小时（windows虚拟机可能会快点），但是同样的程序在Windows上只需要2分钟</strong></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>安装好之后直接在命令行输入一下命令就可以：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">electron-packager &lt;sourcedir&gt; &lt;appname&gt; --platform=&lt;platform&gt; --arch=&lt;arch&gt; [optional flags...]</span><br></pre></td></tr></table></figure>

<p>比如我在<code>package.json</code>里面写的就是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"package:mac"</span>: <span class="string">"electron-packager . --overwrite --platform=darwin --arch=x64 --out=out"</span>,</span><br><span class="line">    <span class="string">"package:win"</span>: <span class="string">"electron-packager . --overwrite --platform=win32 --arch=ia32 --out=out"</span>,</span><br><span class="line">    <span class="string">"package:linux"</span>: <span class="string">"electron-packager . --overwrite --platform=linux --arch=x64 --out=out"</span>,</span><br><span class="line">	&#125;,</span><br></pre></td></tr></table></figure>

<p>这样在命令行直接运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run package:win</span><br></pre></td></tr></table></figure>

<p>就可以打包windows平台的程序了。</p>
<h3 id="生成安装包"><a href="#生成安装包" class="headerlink" title="生成安装包"></a>生成安装包</h3><p>生成安装包可以使用<a href="https://github.com/electron/windows-installer" target="_blank" rel="noopener">electron-winstaller</a>。</p>
<p>electron-winstaller 是一个基于<code>Squirrel</code>的生成Windows安装包的 npm 模块，基本的参数说明可以到它官网上查看，这里我只是写下我自己demo的参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//windowsInstaller.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> electronInstaller = <span class="built_in">require</span>(<span class="string">'electron-winstaller'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line">resultPromise = electronInstaller.createWindowsInstaller(&#123;</span><br><span class="line">    appDirectory: <span class="string">'./out/MyApp-win32-ia32'</span>,</span><br><span class="line">    outputDirectory: <span class="string">'./windows32'</span>,</span><br><span class="line">    authors: <span class="string">'cyd'</span>,</span><br><span class="line">    exe: <span class="string">'MyApp.exe'</span>,</span><br><span class="line">    noMsi: <span class="literal">true</span>,</span><br><span class="line">    outputDirectory: path.join(<span class="string">'./out/'</span>, <span class="string">'windows-installer'</span>),</span><br><span class="line">    setupExe: <span class="string">'ElectronAPIDemosSetup.exe'</span>,</span><br><span class="line">    skipUpdateIcon: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">resultPromise.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"It worked!"</span>), (e) =&gt; <span class="built_in">console</span>.log(<span class="string">`No dice: <span class="subst">$&#123;e.message&#125;</span>`</span>));</span><br></pre></td></tr></table></figure>

<p>在使用<code>electron-builder</code>打包之后，通过运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node ./windowsInstaller.js</span><br></pre></td></tr></table></figure>

<p>运行这个文件就可以在<code>windows32</code>文件夹下找到名为<code>MyApp.exe</code>的安装包。双击运行就可以自动安装。安装界面如下所示，注意这个方法不能选择安装目录，程序会自动安装到C盘。（可能作者模仿Mac简易的安装方式？</p>
<p>安装过程会运行一个默认的gif动画。</p>
<p><img src="https://github.com/cydjohn/cydjohn.github.io/raw/master/image/42892ecc-3408-4c97-8cb5-7c177c1eebd6.gif"></p>
<p>如果之前部署过新版程序在服务器上，双击运行程序，没什么问题应该就会看到这个画面，点击restart 就可以运行最新的程序了。</p>
<h2 id="Electron-builder"><a href="#Electron-builder" class="headerlink" title="Electron-builder"></a>Electron-builder</h2><p><code>electron-builder</code>是一个完整的解决方案，对于Macos、windows、linux下的electron app，它可以提供打包及构建的相关功能。同时，它还提供开箱即用的“自动更新”功能支持。</p>
<h3 id="部署服务器"><a href="#部署服务器" class="headerlink" title="部署服务器"></a>部署服务器</h3><p><a href="">Hazel</a> – 用于私人或开源应用的更新服务器，可以在 Now 上免费部署。 它从GitHub Releases中拉取更新文件，并且利用 GitHub CDN 的强大性能。</p>
<p><a href="">使用自己的服务器</a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong><em>注意开发的时候不要调用这些代码块，可以使用<a href="https://github.com/sindresorhus/electron-is-dev" target="_blank" rel="noopener">electron-is-dev</a>检查当前的环境</em></strong></p>
<p><strong><em>以下代码需要添加到<code>main.js</code>中</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, autoUpdater, dialog &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br></pre></td></tr></table></figure>

<p>然后构建更新服务器的URL并且通知autoUpdater:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line"><span class="keyword">const</span> server = <span class="string">'https://your-deployment-url.com'</span></span><br><span class="line"><span class="keyword">const</span> feed = <span class="string">`<span class="subst">$&#123;server&#125;</span>/update/<span class="subst">$&#123;process.platform&#125;</span>/<span class="subst">$&#123;app.getVersion()&#125;</span>`</span></span><br><span class="line">  </span><br><span class="line">autoUpdater.setFeedURL(feed)</span><br></pre></td></tr></table></figure>

<p>最后，检查更新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line"><span class="comment">//每分钟检查一次</span></span><br><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    autoUpdater.checkForUpdates()</span><br><span class="line">  &#125;, <span class="number">60000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="应用更新"><a href="#应用更新" class="headerlink" title="应用更新"></a>应用更新</h3><p>通过<code>autoUpdate</code>的API，可以知道应用更新的状态，然后来通知用户</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line">autoUpdater.on(<span class="string">'update-downloaded'</span>, (event, releaseNotes, releaseName) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> dialogOpts = &#123;</span><br><span class="line">      type: <span class="string">'info'</span>,</span><br><span class="line">      buttons: [<span class="string">'Restart'</span>, <span class="string">'Later'</span>],</span><br><span class="line">      title: <span class="string">'Application Update'</span>,</span><br><span class="line">      message: process.platform === <span class="string">'win32'</span> ? releaseNotes : releaseName,</span><br><span class="line">      detail: <span class="string">'A new version has been downloaded. Restart the application to apply the updates.'</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    dialog.showMessageBox(dialogOpts, (response) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (response === <span class="number">0</span>) autoUpdater.quitAndInstall()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>同时要确保错误已经被处理了:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line">autoUpdater.on(<span class="string">'error'</span>, message =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'There was a problem updating the application'</span>)</span><br><span class="line">    <span class="built_in">console</span>.error(message)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>


<hr>
<p><a href="https://electronjs.org/docs/tutorial/updates" target="_blank" rel="noopener">https://electronjs.org/docs/tutorial/updates</a></p>
<p><a href="https://electronjs.org/docs/api/auto-updater" target="_blank" rel="noopener">https://electronjs.org/docs/api/auto-updater</a></p>
<p><a href="https://github.com/sorrycc/blog/issues/26" target="_blank" rel="noopener">https://github.com/sorrycc/blog/issues/26</a></p>
<p><a href="https://github.com/electron-userland/electron-packager" target="_blank" rel="noopener">https://github.com/electron-userland/electron-packager</a></p>
<p><a href="https://segmentfault.com/a/1190000010271226" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010271226</a></p>
]]></content>
      <tags>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>MBProgressHUD</title>
    <url>/2015/12/23/MBProgressHUD/</url>
    <content><![CDATA[<p><a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="noopener">https://github.com/jdg/MBProgressHUD</a></p>
<p>MBProgressHUD 是目前Github上<strong>star</strong>最多的HUD，支持所有版本的iOS，但是不支持Mac。</p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-23/731771.jpg"><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-23/74700189.jpg"><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-23/11697486.jpg"><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-23/50268525.jpg"><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-23/84569473.jpg"><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-23/31201509.jpg"><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-23/84728130.jpg"></p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>Cocoapods</strong></p>
<p>在<code>Podfile</code>里面添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod <span class="string">'MBProgressHUD'</span>, <span class="string">'~&gt; 0.9.2'</span></span><br></pre></td></tr></table></figure>

<p><em>或者：</em></p>
<p><strong>Carthage</strong></p>
<p>在<code>Cartfile</code>里面添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">github <span class="string">"jdg/MBProgressHUD"</span> ~&gt; 0.9.2</span><br></pre></td></tr></table></figure>
<p><em>或者：</em></p>
<p><strong>Source files</strong></p>
<p>直接把 <code>MBProgressHUD.h</code>和<code>MBProgressHUD.m</code>添加到工程中。</p>
<p><em>或者:</em></p>
<p><strong>Static library</strong></p>
<p>把<code>MBProgressHUD.xcodeproj</code>拖到工程文件中，Libraries中添加<code>libMBProgressHUD.a</code>，再将<code>MBProgressHUD</code>添加到<code>Target Dependencies list</code>里面。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>标准情况</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">HUD = [[MBProgressHUD alloc] initWithView:<span class="keyword">self</span>.navigationController.view];</span><br><span class="line">	[<span class="keyword">self</span>.navigationController.view addSubview:HUD];</span><br><span class="line">	</span><br><span class="line">	HUD.delegate = <span class="keyword">self</span>;</span><br><span class="line">	HUD.labelText = <span class="string">@"Loading"</span>;</span><br><span class="line">	HUD.detailsLabelText = <span class="string">@"updating data"</span>;</span><br><span class="line">	HUD.square = <span class="literal">YES</span>;</span><br><span class="line">	</span><br><span class="line">	[HUD showWhileExecuting:<span class="keyword">@selector</span>(myTask) onTarget:<span class="keyword">self</span> withObject:<span class="literal">nil</span> animated:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)myTask &#123;</span><br><span class="line">	<span class="comment">// Do something usefull in here instead of sleeping ...</span></span><br><span class="line">	sleep(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>带进度条的情况</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">HUD = [[MBProgressHUD alloc] initWithView:<span class="keyword">self</span>.navigationController.view];</span><br><span class="line">	[<span class="keyword">self</span>.navigationController.view addSubview:HUD];</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Set determinate mode</span></span><br><span class="line">	HUD.mode = MBProgressHUDModeAnnularDeterminate;</span><br><span class="line">	</span><br><span class="line">	HUD.delegate = <span class="keyword">self</span>;</span><br><span class="line">	HUD.labelText = <span class="string">@"Loading"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// myProgressTask uses the HUD instance to update progress</span></span><br><span class="line">	[HUD showWhileExecuting:<span class="keyword">@selector</span>(myProgressTask) onTarget:<span class="keyword">self</span> withObject:<span class="literal">nil</span> animated:<span class="literal">YES</span>];</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)myProgressTask &#123;</span><br><span class="line">	<span class="comment">// This just increases the progress indicator in a loop</span></span><br><span class="line">	<span class="keyword">float</span> progress = <span class="number">0.0</span>f;</span><br><span class="line">	<span class="keyword">while</span> (progress &lt; <span class="number">1.0</span>f) &#123;</span><br><span class="line">		progress += <span class="number">0.01</span>f;</span><br><span class="line">		HUD.progress = progress;</span><br><span class="line">		usleep(<span class="number">50000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更详细的用法可以参考官方的<a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="noopener">DEMO</a></p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>FMDB</title>
    <url>/2015/08/05/FMDB/</url>
    <content><![CDATA[<p>IOS中原生的SQLite API十分不友好，对于我这种菜鸟来说简直不能用，于是就有大神写了封装了SQLite API的库，比如FMDB,<a href="https://github.com/ccgus/fmdb" target="_blank" rel="noopener">https://github.com/ccgus/fmdb</a>。</p>
<a id="more"></a>

<p>安装方法可以在官网上看，我是直接用了cocoaPods。如果是swift项目要直接把fmdb文件夹下的这些文件拖到你的项目中</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-4/44494850.jpg"><br>然后Xcode会自动新建一个<em>桥接文件（bridge）</em>，然后在那个文件添加一行</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"FMDB.h"</span></span></span><br></pre></td></tr></table></figure>
<p>就可以用了。</p>
<p>OC直接添加<code>#import &quot;FMDB.h&quot;</code>就可以。</p>
<blockquote>
<p>用之前需要在<code>General</code>的<code>Linked Frameworks and Libraries</code>里面添加<code>libsqlite3.0.dylib</code>，不然会报错（而且是30多个）！</p>
</blockquote>
<p>创建<code>FMDatabase</code>需要指定一个路径，通过下面这条语句实现。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">FMDatabase *db = [FMDatabase databaseWithPath:<span class="string">@"/tmp/tmp.db"</span>];</span><br></pre></td></tr></table></figure>
<p>不过既然是用数据库，那一般都是要持久化的存储，那么这个sqlite文件应该放到<code>Document</code>文件夹下。所以一般我是这么创建的（其实貌似也是标准的创建方法）：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="built_in">NSString</span> *documentsDirectory = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) objectAtIndex:<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">NSString</span>* databasePath = [documentsDirectory stringByAppendingPathComponent: <span class="string">@"test.sqlite"</span>];</span><br><span class="line">    FMDatabase* db = [FMDatabase databaseWithPath:databasePath];</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">let</span> documentsFolder = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.<span class="type">DocumentDirectory</span>, .<span class="type">UserDomainMask</span>, <span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">let</span> path = documentsFolder.stringByAppendingPathComponent(<span class="string">"test.sqlite"</span>)</span><br><span class="line"><span class="keyword">let</span> database = <span class="type">FMDatabase</span>(path: path)</span><br></pre></td></tr></table></figure>

<p>里面的<code>@&quot;user.sqlite&quot;</code>，是sqlite文件的名字，随你怎么叫。然后就可以拿着这个<code>db</code>做增删查改的活了。</p>
<h2 id="创建数据库："><a href="#创建数据库：" class="headerlink" title="创建数据库："></a>创建数据库：</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="keyword">if</span> (![db open]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Could not open db."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">NSString</span> *sql = <span class="string">@"create table test(x text, y text, z text)"</span>;</span><br><span class="line">    <span class="keyword">if</span> (![db executeUpdate:sql] ) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"create table failed: %@"</span>,[db lastErrorMessage]);</span><br><span class="line">    &#125;</span><br><span class="line">    [db close];</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"> <span class="keyword">if</span> database.<span class="keyword">open</span>() &#123;</span><br><span class="line">       <span class="keyword">if</span> !database.executeUpdate(<span class="string">"create table if not exists test(x text, y text, z text)"</span>, withArgumentsInArray: <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="built_in">println</span>(<span class="string">"create table failed: \(database.lastErrorMessage())"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    database.close()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h2 id="增加一行数据："><a href="#增加一行数据：" class="headerlink" title="增加一行数据："></a>增加一行数据：</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">    <span class="keyword">if</span> (![db open]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Could not open db."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (![db executeUpdate:<span class="string">@"insert into test(x, y, z) values (? , ?, ?)"</span>,<span class="string">@"a"</span>,<span class="string">@"b"</span>,<span class="string">@"c"</span>]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"insert 1 table failed: %@"</span>, [db lastErrorMessage]);</span><br><span class="line">    &#125;</span><br><span class="line">    [db close];</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"> <span class="keyword">if</span> database.<span class="keyword">open</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> !database.executeUpdate(<span class="string">"create table if not exists test(x text, y text, z text)"</span>, withArgumentsInArray: <span class="literal">nil</span>) &#123;</span><br><span class="line">                <span class="built_in">println</span>(<span class="string">"create table failed: \(database.lastErrorMessage())"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            database.close()</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>注意参数必须是NSObject的子类，所以什么int,double,bool都需要封装</p>
<p>比如官网上的例子：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="comment">// 错误，42不能作为参数</span></span><br><span class="line">[db executeUpdate:<span class="string">@"INSERT INTO myTable VALUES (?)"</span>, <span class="number">42</span>];</span><br><span class="line"><span class="comment">// 正确，将42封装成 NSNumber 类</span></span><br><span class="line">[db executeUpdate:<span class="string">@"INSERT INTO myTable VALUES (?)"</span>, [<span class="built_in">NSNumber</span> numberWithInt:<span class="number">42</span>]];</span><br></pre></td></tr></table></figure>




<h2 id="删除一行数据："><a href="#删除一行数据：" class="headerlink" title="删除一行数据："></a>删除一行数据：</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="keyword">if</span> (![db open]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Could not open db."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (![db executeUpdate:<span class="string">@"delete from test where x = ?"</span>,<span class="string">@"a"</span>]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"delete failed: %@"</span>,[db lastErrorMessage]);</span><br><span class="line">    &#125;</span><br><span class="line">    [db close];</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">if</span> database.<span class="keyword">open</span>()&#123;</span><br><span class="line">            <span class="keyword">if</span> !database.executeUpdate(<span class="string">"delete from test where x = ?"</span>, withArgumentsInArray: [<span class="string">"a"</span>])&#123;</span><br><span class="line">                <span class="built_in">println</span>(<span class="string">"delete failed: \(database.lastErrorMessage())"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            database.close()</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询："><a href="#查询：" class="headerlink" title="查询："></a>查询：</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="keyword">if</span> (![db open]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Could not open db."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    FMResultSet *rs = [db executeQuery:<span class="string">@"select x, y, z from test"</span>];</span><br><span class="line">    <span class="keyword">while</span> (rs.next) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *x = [rs stringForColumn:<span class="string">@"x"</span>];</span><br><span class="line">        <span class="built_in">NSString</span> *y = [rs stringForColumn:<span class="string">@"y"</span>];</span><br><span class="line">        <span class="built_in">NSString</span> *z = [rs stringForColumn:<span class="string">@"z"</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"x = %@; y = %@; z = %@"</span>,x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    [db close];</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"> <span class="keyword">if</span> database.<span class="keyword">open</span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> rs = database.executeQuery(<span class="string">"select x, y, z from test"</span>, withArgumentsInArray: <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> rs.next() &#123;</span><br><span class="line">                <span class="keyword">let</span> x = rs.stringForColumn(<span class="string">"x"</span>)</span><br><span class="line">                <span class="keyword">let</span> y = rs.stringForColumn(<span class="string">"y"</span>)</span><br><span class="line">                <span class="keyword">let</span> z = rs.stringForColumn(<span class="string">"z"</span>)</span><br><span class="line">                <span class="built_in">println</span>(<span class="string">"x = \(x); y = \(y); z = \(z)"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">println</span>(<span class="string">"select failed: \(database.lastErrorMessage())"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        database.close()</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"> <span class="keyword">if</span> (![db open]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Could not open db."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (![db executeUpdate:<span class="string">@"update test set y = ? where x = ?"</span>,<span class="string">@"00"</span>,<span class="string">@"a"</span>]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"update falied: %@"</span> , [db lastErrorMessage]);</span><br><span class="line">    &#125;</span><br><span class="line">    [db close];</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">if</span> database.<span class="keyword">open</span>()&#123;</span><br><span class="line">            <span class="keyword">if</span> !database.executeUpdate(<span class="string">"update test set y = ? where x = ?"</span>, withArgumentsInArray: [<span class="string">"00"</span>,<span class="string">"a"</span>])&#123;</span><br><span class="line">                <span class="built_in">println</span>(<span class="string">"update failed: \(database.lastErrorMessage())"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            database.close()</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-5/19333329-fmdbOC.zip" target="_blank" rel="noopener">OC示例下载</a><br><a href="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-5/87232102-fmdbSwift.zip" target="_blank" rel="noopener">swift示例下载（swift1.2；Xcode 6.4）</a></p>
<p>如果各位在用的时候<strong>FMDB</strong>发现增删查改的时候老是报 <em>“no such table”</em> 这种错，而且拍着胸脯表示自己绝对创建表了！！怎么可能报错说没有表！！！</p>
<p>那应该是犯了跟我一样的小错误～～  </p>
<p>当然为了搞清楚这是怎么回事我今天从下午三点一直谷歌，百度，stackoverflow，github……到处找原因，甚至还跑去看日语，俄语的博客（当然我看不懂，只是翻翻代码）。然后我惊讶的发现，遇到跟我一样问题的人只是极少数，而且都只是提了问题后续都没有结果！</p>
<p>经验告诉我，这不会是<strong>FMDB</strong>的问题只会是我自己的问题，而且是一个特别傻的问题。但是到底是什么问题我还是找不出来……  </p>
<p><strong><em>于是我就出去理了个发。</em></strong>  </p>
<p>俗话说的好，头发长见识短。理完发回来就是晚上九点了，这时的我精神焕发，思路清晰，智商比下午至少提高了7点！再次打开代码，啊！哈！果然！</p>
<blockquote>
<p>###在FMDB中，只有<code>查询操作</code>需要用到<code>executeQuery</code>，其他增删查改操作都是用<code>executeUpdate</code>！！！！  </p>
</blockquote>
<p>这么一改果然没问题了……可怜了我的头发，现在感觉自己像个和尚😭</p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP请求方法</title>
    <url>/2016/04/15/HTTP%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在软件学院混到大四了，对于http的请求方法还局限于<code>GET</code>,<code>POST</code>,<code>DELETE</code>,<code>PUT</code>四种。其中绝大部份做过的项目只有<code>GET</code>,<code>POST</code>两种，当然也遇到过所有请求全部用<code>POST</code>的奇葩项目。</p>
<p>今天看了《图解HTTP》也对HTTP请求方法有了进一步了解，介于网上好像也没有很好的介绍HTTP请求方法的资料，我在这里记录下～</p>
<table>
<thead>
<tr>
<th align="center">method</th>
<th align="center">description</th>
<th align="center">HTTP vision</th>
</tr>
</thead>
<tbody><tr>
<td align="center">GET</td>
<td align="center">获取资源</td>
<td align="center">1.0、 1.1</td>
</tr>
<tr>
<td align="center">POST</td>
<td align="center">传输实体主体</td>
<td align="center">1.0、 1.1</td>
</tr>
<tr>
<td align="center">PUT</td>
<td align="center">传输文件</td>
<td align="center">1.0、 1.1</td>
</tr>
<tr>
<td align="center">HEAD</td>
<td align="center">获得报文头部</td>
<td align="center">1.0、 1.1</td>
</tr>
<tr>
<td align="center">DELETE</td>
<td align="center">删除文件</td>
<td align="center">1.0、 1.1</td>
</tr>
<tr>
<td align="center">OPTIONS</td>
<td align="center">询问支持的方法</td>
<td align="center">1.1</td>
</tr>
<tr>
<td align="center">TRACE</td>
<td align="center">追踪路径</td>
<td align="center">1.1</td>
</tr>
<tr>
<td align="center">CONNECT</td>
<td align="center">要求用隧道协议链接代理</td>
<td align="center">1.1</td>
</tr>
<tr>
<td align="center">LINK</td>
<td align="center">建立和资源之间的联系</td>
<td align="center">1.0</td>
</tr>
<tr>
<td align="center">UNLINK</td>
<td align="center">断开链接关系</td>
<td align="center">1.0</td>
</tr>
</tbody></table>
<a id="more"></a>

<h1 id="HTTP-1-1中可使用的方法"><a href="#HTTP-1-1中可使用的方法" class="headerlink" title="HTTP/1.1中可使用的方法"></a>HTTP/1.1中可使用的方法</h1><h2 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法"></a>GET方法</h2><p><code>GET</code>方法通常用来请求被URI识别的资源，资源经过服务区端解析后返回。比如：你请求了一个网页，它就给你返回个html； 如果你请求了某个搜索，服务器就把搜索结果返回给你。</p>
<h2 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h2><p><code>POST</code>方法用来传输实体的主体。</p>
<p>意思就是<code>POST</code>方法是用来向服务器发送内容的。<code>POST</code>和<code>GET</code>很像，<code>GET</code>也可以向服务器传输实体的主体，但是<code>GET</code>主要是用来向服务器获取内容的，而<code>POST</code>不是。</p>
<h2 id="PUT方法"><a href="#PUT方法" class="headerlink" title="PUT方法"></a>PUT方法</h2><p><code>PUT</code>方法用来传输文件，要求在请求主报文的主体中包含文件内容，然后保存在指定位置。</p>
<p>但是由于<code>PUT</code>不带验证机制，任何人都可以上传文件。这样就产生了安全问题，所以一般的网站不用这个方法，除非可以配合Web应用的验证机制（spring security）或架构设计采用REST标准的同类web网站，就可能会开放使用PUT方法。</p>
<h2 id="DELETE方法"><a href="#DELETE方法" class="headerlink" title="DELETE方法"></a>DELETE方法</h2><p><code>DELETE</code>方法与<code>PUT</code>方法相反，用于删除URI指定的资源。</p>
<p><code>DELETE</code>同样不带有验证机制，所以一般的网站不用这个方法，除非在网站中加入了验证机制。</p>
<h2 id="HEAD方法"><a href="#HEAD方法" class="headerlink" title="HEAD方法"></a>HEAD方法</h2><p><code>HEAD</code>方法用于确认URI的有效性及资源更新时间等，相当于不返回报文主体部分的GET方法。</p>
<h2 id="OPTIONS方法"><a href="#OPTIONS方法" class="headerlink" title="OPTIONS方法"></a>OPTIONS方法</h2><p><code>OPTIONS</code>方法用来查询服务器支持的HTTP方法。</p>
<p>比如你发了个<code>OPTIONS</code>请求给服务器，服务器返回了 <code>GET</code>,<code>POST</code>,<code>PUT</code>,<code>DELETE</code>，说明服务器支持这四种方法。</p>
<h2 id="TRACE方法"><a href="#TRACE方法" class="headerlink" title="TRACE方法"></a>TRACE方法</h2><p><code>TRACE</code>方法是让Web服务器将之前的请求通信环回给客户端的方法。</p>
<p>客户端可以通过<code>TRACE</code>方法查询发送出去的请求是怎样被加工／篡改的。因为，请求想要连接到源目标服务器可能会通过代理中转，<code>TRACE</code>方法就是用来确认链接过程中发生的一系列操作。</p>
<p>（这个方法一般不用）</p>
<h2 id="CONNECT方法"><a href="#CONNECT方法" class="headerlink" title="CONNECT方法"></a>CONNECT方法</h2><p><code>CONNECT</code>方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。主要是用SSL和TLS协议把通信内容加密后经网络隧道传输。</p>
<hr>
<h2 id="URI和URL"><a href="#URI和URL" class="headerlink" title="URI和URL"></a>URI和URL</h2><p><strong>URI:(Uniform Resource Identifier)</strong></p>
<p><strong>URL: (Uniform Resource Loccator)</strong></p>
<p>相比起URI，我们更熟悉URL。每次我们访问网页需要在浏览器中输入的网址就是URL。</p>
<p><code>URI</code>用字符串标示某一互联网资源，而<code>URL</code>表示资源地点。所以<code>URL</code>是<code>URI</code>的子集，但是也可以认为<code>URL</code>就是<code>URI</code>。。</p>
<h2 id="什么是REST标准？"><a href="#什么是REST标准？" class="headerlink" title="什么是REST标准？"></a>什么是REST标准？</h2><p>REST（Representational State Transfer）描述了一个架构样式的网络系统，比如 web 应用程序。REST并没有一个明确的标准，而更像是一种设计的风格。<br>所以REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。</p>
<p>资源是由URI来指定。<br>对资源的操作包括获取、创建、修改和删除资源，这些操作正好对应HTTP协议提供的GET、POST、PUT和DELETE方法。<br>通过操作资源的表形来操作资源。</p>
<blockquote>
<p>参考资料：<br>上野宣. 图解HTTP[M]. 人民邮电出版社, 2014.<br><a href="http://www.cnblogs.com/taven/archive/2009/09/06/1561358.html" target="_blank" rel="noopener">http://www.cnblogs.com/taven/archive/2009/09/06/1561358.html</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>NPOI的使用之读写Excel</title>
    <url>/2016/04/12/NPOI%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8B%E8%AF%BB%E5%86%99Excel/</url>
    <content><![CDATA[<p>NPOI 是 POI 项目的 .NET 版本。POI是一个开源的Java读写Excel、WORD等微软OLE2组件文档的项目。</p>
<p>使用 NPOI 你就可以在没有安装 Office 或者相应环境的机器上对 WORD/EXCEL 文档进行读写。NPOI是构建在POI 3.x版本之上的，它可以在没有安装Office的情况下对Word/Excel文档进行读写操作。</p>
<a id="more"></a>

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>首先到<a href="http://npoi.codeplex.com/" target="_blank" rel="noopener">http://npoi.codeplex.com/</a>官网上下载NPOI的<code>dll</code>，有<code>2</code>和<code>4</code>两个不同版本的<code>dll</code>，分别对应不同的.NET版本，我在自己的项目中使用了<code>4</code>版本的.NET。</p>
<h2 id="添加引用"><a href="#添加引用" class="headerlink" title="添加引用"></a>添加引用</h2><p>右键项目 -&gt;<code>添加</code>-&gt;<code>引用</code>,如图</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-4-10/70924586.jpg"></p>
<p>然后点击<code>浏览</code>，把刚才下载好的<code>dll</code>选中添加到项目中**<em>（建议把<code>dll</code>文件夹直接放倒项目根目录下）**</em></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-4-10/28167142.jpg"></p>
<h2 id="操作Excel"><a href="#操作Excel" class="headerlink" title="操作Excel"></a>操作Excel</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> NPOI;</span><br><span class="line"></span><br><span class="line">NPOI.HSSF.UserModel.HSSFWorkbook book = <span class="keyword">new</span> NPOI.HSSF.UserModel.HSSFWorkbook();</span><br><span class="line">NPOI.SS.UserModel.ISheet sheet = book.CreateSheet(<span class="string">"export"</span>);</span><br><span class="line"></span><br><span class="line">NPOI.SS.UserModel.IRow row = sheet.CreateRow(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>


<h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><p>参数分别是：起始行，结束行，起始列，结束列</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">sheet.AddMergedRegion(<span class="keyword">new</span> NPOI.SS.Util.CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">12</span>));</span><br></pre></td></tr></table></figure>

<h3 id="单元格水平对齐"><a href="#单元格水平对齐" class="headerlink" title="单元格水平对齐"></a>单元格水平对齐</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">row.CreateCell(i).CellStyle.Alignment = NPOI.SS.UserModel.HorizontalAlignment.Center;</span><br></pre></td></tr></table></figure>

<h3 id="单元格垂直对齐"><a href="#单元格垂直对齐" class="headerlink" title="单元格垂直对齐"></a>单元格垂直对齐</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">row.CreateCell(i).CellStyle.VerticalAlignment = NPOI.SS.UserModel.VerticalAlignment.Center;</span><br></pre></td></tr></table></figure>

<h3 id="单元格自动换行（很不稳定会导致单元格内容突然没有了）"><a href="#单元格自动换行（很不稳定会导致单元格内容突然没有了）" class="headerlink" title="单元格自动换行（很不稳定会导致单元格内容突然没有了）"></a>单元格自动换行（很不稳定会导致单元格内容突然没有了）</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">row.CreateCell(i).CellStyle.WrapText = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>导出一个DataGridView的Excel</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 导出excel</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="dt"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="filePath"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteExcel</span>(<span class="params"><span class="keyword">string</span> filePath</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(filePath)) &#123;</span><br><span class="line">        NPOI.HSSF.UserModel.HSSFWorkbook book = <span class="keyword">new</span> NPOI.HSSF.UserModel.HSSFWorkbook();</span><br><span class="line">        NPOI.SS.UserModel.ISheet sheet = book.CreateSheet(<span class="string">"export"</span>);</span><br><span class="line"></span><br><span class="line">        NPOI.SS.UserModel.IRow row = sheet.CreateRow(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] columnWidth = &#123; <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnWidth.Length; i++) &#123;</span><br><span class="line">            row.CreateCell(i).CellStyle.Alignment = NPOI.SS.UserModel.HorizontalAlignment.Center;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//乘以256是因为Excel中列宽是以256为单位的，详情可以看函数的注释</span></span><br><span class="line">            sheet.SetColumnWidth(i, columnWidth[i] * <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//乘以256是因为Excel中行高是以20为单位的，详情可以看函数的注释</span></span><br><span class="line">            row.Height = <span class="number">15</span> * <span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sheet.AddMergedRegion(<span class="keyword">new</span> NPOI.SS.Util.CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        row.GetCell(<span class="number">0</span>).SetCellValue(<span class="string">"合并的单元格"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        NPOI.SS.UserModel.IRow row2 = sheet.CreateRow(<span class="number">1</span>);</span><br><span class="line">        row2.Height = <span class="number">28</span> * <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span>[] columnName = &#123; <span class="string">"编号"</span>, <span class="string">"标题"</span>, <span class="string">"标题"</span>, <span class="string">"标题"</span>, <span class="string">"长……长……的……标……题……"</span>, <span class="string">"长……长……的……标……题……"</span>, <span class="string">"标题"</span>, <span class="string">"标题"</span>, <span class="string">"标题"</span>, <span class="string">"标题"</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnName.Length; i++) &#123;</span><br><span class="line">            row2.CreateCell(i).CellStyle.VerticalAlignment = NPOI.SS.UserModel.VerticalAlignment.Center;</span><br><span class="line">            row2.CreateCell(i).SetCellValue(columnName[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//具体信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            NPOI.SS.UserModel.IRow rowDetail = sheet.CreateRow(i + <span class="number">2</span>);</span><br><span class="line">            rowDetail.Height = <span class="number">70</span> * <span class="number">20</span>;</span><br><span class="line">            rowDetail.CreateCell(i).CellStyle.WrapText = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            rowDetail.CreateCell(<span class="number">0</span>).SetCellValue((i + <span class="number">1</span>).ToString());</span><br><span class="line">            rowDetail.CreateCell(<span class="number">1</span>).SetCellValue(<span class="string">"内容"</span>);</span><br><span class="line">            rowDetail.CreateCell(<span class="number">2</span>).SetCellValue(<span class="string">"内容"</span>);</span><br><span class="line">            rowDetail.CreateCell(<span class="number">3</span>).SetCellValue(<span class="string">"内容"</span>);</span><br><span class="line">            rowDetail.CreateCell(<span class="number">4</span>).SetCellValue(<span class="string">"好……多……好……多……好……多……的……内……容……好……多……好……多……好……多……的……内……容……好……多……好……多……好……多……的……内……容……"</span>);</span><br><span class="line">            rowDetail.CreateCell(<span class="number">5</span>).SetCellValue(<span class="string">"好……多……好……多……好……多……的……内……容……好……多……好……多……好……多……的……内……容……好……多……好……多……好……多……的……内……容……"</span>);</span><br><span class="line">            rowDetail.CreateCell(<span class="number">6</span>).SetCellValue(<span class="string">"内容"</span>);</span><br><span class="line">            rowDetail.CreateCell(<span class="number">7</span>).SetCellValue(<span class="string">"内容"</span>);</span><br><span class="line">            rowDetail.CreateCell(<span class="number">8</span>).SetCellValue(<span class="string">"内容"</span>);</span><br><span class="line">            rowDetail.CreateCell(<span class="number">9</span>).SetCellValue(<span class="string">"内容"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入到客户端  </span></span><br><span class="line">        <span class="keyword">using</span>(System.IO.MemoryStream ms = <span class="keyword">new</span> System.IO.MemoryStream()) &#123;</span><br><span class="line">            book.Write(ms);</span><br><span class="line">            <span class="keyword">using</span>(FileStream fs = <span class="keyword">new</span> FileStream(filePath, FileMode.Create, FileAccess.Write)) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] data = ms.ToArray();</span><br><span class="line">                fs.Write(data, <span class="number">0</span>, data.Length);</span><br><span class="line">                fs.Flush();</span><br><span class="line">            &#125;</span><br><span class="line">            book = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">SaveFileDialog sfd = <span class="keyword">new</span> SaveFileDialog();</span><br><span class="line">sfd.Filter = <span class="string">"Excel Documents (*.xls)|*.xls"</span>;</span><br><span class="line">sfd.FileName = <span class="string">"export.xls"</span>;</span><br><span class="line"><span class="keyword">if</span> (sfd.ShowDialog() == DialogResult.OK)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.WriteExcel(sfd.FileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-4-12/79687687.jpg"></p>
<h2 id="读取Excel"><a href="#读取Excel" class="headerlink" title="读取Excel"></a>读取Excel</h2><p>NPOI 使用 <code>HSSFWorkbook</code> 类来处理 <code>xls</code>，<code>XSSFWorkbook</code> 类来处理 <code>xlsx</code>，它们都继承接口 <code>IWorkbook</code>，因此可以通过 <code>IWorkbook</code> 来统一处理 <code>xls</code> 和 <code>xlsx</code> 格式的文件。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadFromExcelFile</span>(<span class="params"><span class="keyword">string</span> filePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IWorkbook wk = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">string</span> extension = System.IO.Path.GetExtension(filePath);</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        FileStream fs = File.OpenRead(filePath);</span><br><span class="line">        <span class="keyword">if</span> (extension.Equals(<span class="string">".xls"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//把xls文件中的数据写入wk中</span></span><br><span class="line">            wk = <span class="keyword">new</span> HSSFWorkbook(fs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//把xlsx文件中的数据写入wk中</span></span><br><span class="line">            wk = <span class="keyword">new</span> XSSFWorkbook(fs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fs.Close();</span><br><span class="line">        <span class="comment">//读取当前表数据</span></span><br><span class="line">        ISheet sheet = wk.GetSheetAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        IRow row = sheet.GetRow(<span class="number">0</span>);  <span class="comment">//读取当前行数据</span></span><br><span class="line">        <span class="comment">//LastRowNum 是当前表的总行数-1（注意）</span></span><br><span class="line">        <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= sheet.LastRowNum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            row = sheet.GetRow(i);  <span class="comment">//读取当前行数据</span></span><br><span class="line">            <span class="keyword">if</span> (row != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//LastCellNum 是当前行的总列数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; row.LastCellNum; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//读取该行的第j列数据</span></span><br><span class="line">                    <span class="keyword">string</span> <span class="keyword">value</span> = row.GetCell(j).ToString();</span><br><span class="line">                    Console.Write(<span class="keyword">value</span>.ToString() + <span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//只在Debug模式下才输出</span></span><br><span class="line">        Console.WriteLine(e.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出如图：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-4-12/18579406.jpg"></p>
]]></content>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>NSArray二维数组的定义</title>
    <url>/2015/08/01/NSArray%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<p>初始化使用这个方法[[NSArray alloc] initWithObjects:……,nil];</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="built_in">NSArray</span> *arr = [[<span class="built_in">NSArray</span> alloc] initWithObjects:</span><br><span class="line">				  [[<span class="built_in">NSArray</span> alloc] initWithObjects: <span class="string">@"1"</span>,<span class="string">@"1"</span>,<span class="literal">nil</span>],</span><br><span class="line">				  [[<span class="built_in">NSArray</span> alloc] initWithObjects: <span class="string">@"2"</span>,<span class="string">@"2"</span>,<span class="string">@"2"</span>,<span class="literal">nil</span>],</span><br><span class="line">				  [[<span class="built_in">NSArray</span> alloc] initWithObjects: <span class="string">@"3"</span>,<span class="string">@"3"</span>,<span class="string">@"3"</span>,<span class="string">@"3"</span>,<span class="literal">nil</span>],</span><br><span class="line">				  ,<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>如果要初始化1000项，可以这样：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="built_in">NSMutableArray</span> *arr = [[<span class="built_in">NSMutableArray</span> alloc] initWithCapacity:<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">1000</span>; i++) &#123;</span><br><span class="line">        [arr addObject:<span class="string">@"德玛西亚"</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当然换成swift就超级简单了：</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">            [<span class="string">"1"</span>],</span><br><span class="line">            [<span class="string">"2"</span>,<span class="string">"2"</span>],</span><br><span class="line">            [<span class="string">"3"</span>,<span class="string">"3"</span>,<span class="string">"3"</span>]</span><br><span class="line">            ]</span><br></pre></td></tr></table></figure>

<p>初始化1000项:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="type">String</span>](<span class="built_in">count</span>: <span class="number">1000</span>, repeatedValue: <span class="string">"德玛西亚"</span>)</span><br></pre></td></tr></table></figure>

<p>多维数组：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">var</span> arr = [[<span class="type">String</span>]](<span class="built_in">count</span>: <span class="number">1000</span>, repeatedValue: [<span class="type">String</span>](<span class="built_in">count</span>: <span class="number">10</span>, repeatedValue: <span class="string">"德玛西亚"</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>好像每个人都是准备OC转swift，是不是只有我这个奇葩放掉了swift来重新学OC<img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-7-16/47607869.jpg"></p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>NavigationBar，NavigationController无法显示title</title>
    <url>/2016/03/09/NavigationBar%EF%BC%8CNavigationController%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BAtitle/</url>
    <content><![CDATA[<p>做项目的时候发现在一个界面里面，设置 self.title = @”XXX”, 但是项目运行的时候发现并没有显示内容。这个问题困扰了我好久。。。直到今天</p>
<a id="more"></a>

<p>我用谷歌搜了一下，点开了第一条，找到了解决办法：</p>
<p>调用这一条函数即可：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.navigationController.navigationBar.topItem setTitle:<span class="string">@"XXX"</span>];</span><br></pre></td></tr></table></figure>

<p>为什么我要一直用百度查呢？我什么我就不突发奇想尝试下谷歌呢？这样问题早就解决了……我真是菜的抠脚</p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Openssl产生随机数</title>
    <url>/2015/10/27/Openssl%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<p><strong>终端</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">openssl rand[-<span class="type">out</span> <span class="type">file</span>] [-<span class="type">randfile</span>(<span class="type">s</span>)] [-<span class="type">base64</span>] [-<span class="type">hex</span>] num</span><br></pre></td></tr></table></figure>
<p>产生10位的随机数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rand 10</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>结果为<code>:M??;?????</code>，全是乱码</p>
<p>可以尝试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rand -hex 10</span><br></pre></td></tr></table></figure>
<p>结果为<code>02aa218ecc084e5f263f</code></p>
<p>或者</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rand -base64 10</span><br></pre></td></tr></table></figure>
<p>结果为<code>sNzstP2XbcJ9mw==</code></p>
<p>来输出不同编码的随机数</p>
<p>或者通过</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rand -out <span class="built_in">test</span> -hex 10</span><br></pre></td></tr></table></figure>

<p>来输出到<code>test</code>文件上</p>
<p><strong>C语言</strong></p>
<p>C语言有很多函数可以调用:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RAND_bytes</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *buf,<span class="keyword">int</span> num)</span></span>;</span><br></pre></td></tr></table></figure>
<p>根据加密算法生成随机数，其实也是一个伪随机数，但是，如果在调用此函数之前，设定好随机种子，那么生成的随机数是不能被预先计算出来的。<br>buf：输出，生产的随机数存储的数组；</p>
<p>num： 输入，生产的随机数个数；</p>
<p>返回值：1 ，成功， 0 失败；</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RAND_seed</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *buf,<span class="keyword">int</span> num)</span></span>;</span><br></pre></td></tr></table></figure>

<p>随机数生成前设定种子；</p>
<p>buf： 输入， 种子保存的数组；</p>
<p>num： 输入，种子数据长度；</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RAND_add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *buf,<span class="keyword">int</span> num,<span class="keyword">double</span> entropy)</span></span>;</span><br></pre></td></tr></table></figure>
<p>增加随机数生成的不可预知性，将buf数组中num个数据加入PRNG中，entropy是对buf中数据的随机性估计值，如果entropy 和num相等，那么RAND_add函数与Rand_seed函数相同；</p>
<p>buf中的数据，一般采用系统中随机性的事件，比如一些交互性数据，用户敲击的键盘值，鼠标滑过的位置等等。</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RAND_screen</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>RAND_screen也是为Windows系统设计的函数，将当前屏幕数据加入到PRNG中，在windows系统中，对于应用开发者，最好采用RAND_event函数来收集硬件事件，增加PRNG的随机性，需要注意的是，这两个函数，不能在没有交互性的系统比如服务器中使用。</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">RAND_file_name</span><span class="params">(<span class="keyword">char</span> *buf, <span class="keyword">size_t</span> num)</span></span>;</span><br></pre></td></tr></table></figure>
<p>在默认路径下，生成随机数种子文件，<br>buf： 保存文件名<br>num： 文件名字符数；<br>如果$RANDFILE设定，文件名即为$RANDFILE，如果没有设定，那么文件名是$HOME/.rnd<br>如果$HOME或者num的数字太小，不能容纳文件名，那么函数将返回错误。<br>返回值，如果成功，返回buf的地址，如果失败，NULL</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RAND_load_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">long</span> max_bytes)</span></span>;</span><br></pre></td></tr></table></figure>

<p>从随机数种子文件中读取数据，加入到PRNG中；<br>filename： 随机数种子文件；<br>max_bytes：可以读取的最大字节数；如果max_bytes 的值是-1，将读取整个文件；<br>返回值： 读取的数据个数；</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RAND_write_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename)</span></span>;</span><br></pre></td></tr></table></figure>

<p>将随机数写入种子文件，当前是1024个字节，使用者后面可以调用RAND_load_file读取这些随机数；</p>
<p>返回值： 写入的字节数，如果失败，则写入-1；</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RAND_cleanup</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>清除PRNG的状态；</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RAND_egd</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path)</span></span>;</span><br></pre></td></tr></table></figure>

<p>向取随机数种子的Dameon程序EGD要求种子数据，数据长度为255个字节；<br>path： EGD的socket路径；<br>返回值：读取的数据字节数，如果失败，返回-1</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RAND_egd_bytes</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">int</span> bytes)</span></span></span><br></pre></td></tr></table></figure>

<p>向取随机数种子的Dameon程序EGD要求种子数据，数据长度为bytes定义的字节数；<br>path： EGD的socket路径；<br>bytes：请求的字节数；<br>返回值：读取的数据字节数，如果失败，返回-1</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RAND_query_egd_bytes</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> bytes)</span></span>;</span><br></pre></td></tr></table></figure>
<p>向取随机数种子的Dameon程序EGD要求种子数据，数据长度为bytes定义的字节数，如果buf不是空，那么数据保存在buf定义的内存中，否则直接加到PRNG中；<br>path： EGD的socket路径；<br>bytes：请求的字节数；<br>返回值：读取的数据字节数，如果失败，返回-1</p>
<blockquote>
<p>关于EGD：//tbc<br>系统中如果没有/dev/*random服务，可以通过edg Deamon服务来实现对随机数种子的获取，edg通过socket界面来通信，一次最多可以获取255个字节，一次连接可以获取多次数据；</p>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/rand.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> ** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    r = RAND_bytes(a, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(r)&#123;</span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(i =<span class="number">0</span>;i&lt;<span class="number">128</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title>Openssl从证书中获取公钥</title>
    <url>/2015/10/27/Openssl%E4%BB%8E%E8%AF%81%E4%B9%A6%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%85%AC%E9%92%A5/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl x509 -<span class="keyword">in</span> ca.crt -pubkey</span><br></pre></td></tr></table></figure>
<p>其中 <code>－in</code> 为输入文件名</p>
<p>结果：</p>
<a id="more"></a>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvLgG+bUnsMJCgAf/lGWh</span><br><span class="line">2vqn3ZgoKHwERvgVmgCdn8LPUwc2/kGf6ucmkHKE+VcZ7qQg7A/2K8PyDvs3K+qS</span><br><span class="line">SpkyeC0lhaUxYFJGmSjdeqDkLF+fJ5DcTgqi9sJJfozQN2Uk5ppsN76t4BEW7IW/</span><br><span class="line">a8NReMJ18iB3H18wcJQS0ml4pf/O5h3YxArbGl5LE2sWVRFvE9cSn/Vi+zjMP4e8</span><br><span class="line">FIMWi6snIhQpXUMQmP7ecCfzEAEtfVDEXa2Dzka+FJpnJNJ2nQXJIEWF55YOOe1D</span><br><span class="line">4gJAl9qsI8cVEnZK3fseqHpZ8kKY2SuGyNlsgEf7+DfUT/m3Igg+n2MsoxndtOUi</span><br><span class="line">GwIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIEnjCCA4agAwIBAgIJAN7TiN2CbZx9MA0GCSqGSIb3DQEBCwUAMIGQMQswCQYD</span><br><span class="line">VQQGEwJDTjESMBAGA1UECBMJR3Vhbmdkb25nMRIwEAYDVQQHEwlHdWFuZ3pob3Ux</span><br><span class="line">EjAQBgNVBAoTCU9wZW5UQ0dBQTELMAkGA1UECxMCQ0ExFTATBgNVBAMTDE9wZW5U</span><br><span class="line">Q0dBQSBDQTEhMB8GCSqGSIb3DQEJARYSaW5mb0BvcGVudGNnYWEub3JnMB4XDTE1</span><br><span class="line">MTAyNzAxNTk0MVoXDTI1MTAyNDAxNTk0MVowgZAxCzAJBgNVBAYTAkNOMRIwEAYD</span><br><span class="line">VQQIEwlHdWFuZ2RvbmcxEjAQBgNVBAcTCUd1YW5nemhvdTESMBAGA1UEChMJT3Bl</span><br><span class="line">blRDR0FBMQswCQYDVQQLEwJDQTEVMBMGA1UEAxMMT3BlblRDR0FBIENBMSEwHwYJ</span><br><span class="line">KoZIhvcNAQkBFhJpbmZvQG9wZW50Y2dhYS5vcmcwggEiMA0GCSqGSIb3DQEBAQUA</span><br><span class="line">A4IBDwAwggEKAoIBAQC8uAb5tSewwkKAB/+UZaHa+qfdmCgofARG+BWaAJ2fws9T</span><br><span class="line">Bzb+QZ/q5yaQcoT5VxnupCDsD/Yrw/IO+zcr6pJKmTJ4LSWFpTFgUkaZKN16oOQs</span><br><span class="line">X58nkNxOCqL2wkl+jNA3ZSTmmmw3vq3gERbshb9rw1F4wnXyIHcfXzBwlBLSaXil</span><br><span class="line">/87mHdjECtsaXksTaxZVEW8T1xKf9WL7OMw/h7wUgxaLqyciFCldQxCY/t5wJ/MQ</span><br><span class="line">AS19UMRdrYPORr4Ummck0nadBckgRYXnlg457UPiAkCX2qwjxxUSdkrd+x6oelny</span><br><span class="line">QpjZK4bI2WyAR/v4N9RP+bciCD6fYyyjGd205SIbAgMBAAGjgfgwgfUwHQYDVR0O</span><br><span class="line">BBYEFDMpinnH9UEjObLR/BukzOSFRadVMIHFBgNVHSMEgb0wgbqAFDMpinnH9UEj</span><br><span class="line">ObLR/BukzOSFRadVoYGWpIGTMIGQMQswCQYDVQQGEwJDTjESMBAGA1UECBMJR3Vh</span><br><span class="line">bmdkb25nMRIwEAYDVQQHEwlHdWFuZ3pob3UxEjAQBgNVBAoTCU9wZW5UQ0dBQTEL</span><br><span class="line">MAkGA1UECxMCQ0ExFTATBgNVBAMTDE9wZW5UQ0dBQSBDQTEhMB8GCSqGSIb3DQEJ</span><br><span class="line">ARYSaW5mb0BvcGVudGNnYWEub3JnggkA3tOI3YJtnH0wDAYDVR0TBAUwAwEB/zAN</span><br><span class="line">BgkqhkiG9w0BAQsFAAOCAQEAZdsMS7WCCAOyER3yVozOQ4R9MLt1LW0RSK1I3JXx</span><br><span class="line">MScTHA/bHiFDMvK9CuOOvMZvnYjhHXPpCKIf8fgRTRfBA1lE3VUBEXj2WeH5wzNG</span><br><span class="line">wIXXhVUqB4kW1mqDwxfcLRvp7dof8dqFJ0AoCYAj7dUejrb51tzLNaXnr6/AatAS</span><br><span class="line">MwaIfchjJYT2XdeDMB60aiVlS7NITjUUOiRnW4GtCfxpqonccpUAYpljy0m1eMjv</span><br><span class="line">Qw0cgxI8FZh95xkZPSKVEOai95PAkeCX3ua8GIFrCbvuupALf/hMA4HpObk6uNn5</span><br><span class="line">rlJvvhklTtaotVIkQNCJG7h84Ah2VLUP2HiZVfHb/hADhA==</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title>RKTagsView</title>
    <url>/2016/04/03/RKTagsView/</url>
    <content><![CDATA[<h1 id="RKTagsView"><a href="#RKTagsView" class="headerlink" title="RKTagsView"></a>RKTagsView</h1><p>安利一个神奇的东西：<a href="https://github.com/kuler90/RKTagsView" target="_blank" rel="noopener">RKTagsView</a>，可以把输入的内容变成一段一段的标签样式。</p>
<p>效果如图：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-4-3/57474176.jpg"></p>
<a id="more"></a>

<p><a href="https://github.com/kuler90/RKTagsView" target="_blank" rel="noopener">项目地址</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="cocoapods"><a href="#cocoapods" class="headerlink" title="cocoapods"></a>cocoapods</h3><p>在<code>PodFile</code>中添加：即可</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod <span class="string">"RKTagsView"</span></span><br></pre></td></tr></table></figure>

<h3 id="添加源文件"><a href="#添加源文件" class="headerlink" title="添加源文件"></a>添加源文件</h3><p>直接把<code>RKTagsView.h</code>,<code>RKTagsView.m</code>两个文件拖到自己项目中也可以。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h3><p>使用非常简单，新建一个<code>UIView</code>，然后设置这个View的类为 <strong>RKTagsView</strong></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-4-3/6970625.jpg"></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//是否可以编辑</span></span><br><span class="line"><span class="keyword">self</span>.tagsView.editable = <span class="literal">NO</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//标签是否可以被选中</span></span><br><span class="line"><span class="keyword">self</span>.tagsView.selectable = <span class="literal">NO</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//是否可以同时选择多个标签</span></span><br><span class="line"><span class="keyword">self</span>.tagsView.allowsMultipleSelection = <span class="literal">NO</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//标签之间的左右间距</span></span><br><span class="line"><span class="keyword">self</span>.tagsView.interitemSpacing = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标签之间的上下间距</span></span><br><span class="line"><span class="keyword">self</span>.tagsView.lineSpacing = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加标签</span></span><br><span class="line">[<span class="keyword">self</span>.tagsView addTag:<span class="string">@"tag"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除标签</span></span><br><span class="line">[<span class="keyword">self</span>.tagsView removeAllTags];</span><br></pre></td></tr></table></figure>

<h3 id="自定义标签样式"><a href="#自定义标签样式" class="headerlink" title="自定义标签样式"></a>自定义标签样式</h3><p>自定义需要设置View的代理</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">&lt;RKTagsViewDelegate&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.tagsView.delegate = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure>

<p>然后在<code>(UIButton *)tagsView:(RKTagsView *)tagsView buttonForTagAtIndex:(NSInteger)index</code>函数中设置相应的样式，比如下面这个例子就设置了每隔四个标签显示不同颜色的<code>tagsView</code>:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UIButton</span> *)tagsView:(RKTagsView *)tagsView buttonForTagAtIndex:(<span class="built_in">NSInteger</span>)index &#123;</span><br><span class="line">    <span class="built_in">UIButton</span> *customButton = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</span><br><span class="line">  customButton.titleLabel.font = tagsView.font;</span><br><span class="line">  [customButton setTitle:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@" %@ "</span>, tagsView.tags[index]] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    customButton.layer.cornerRadius = <span class="number">3.0</span>;</span><br><span class="line">    customButton.layer.masksToBounds = <span class="literal">YES</span>;</span><br><span class="line">    </span><br><span class="line">    customButton.layer.borderWidth = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (index % <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            [customButton setTitleColor:[<span class="built_in">UIColor</span> colorWithRed:<span class="number">66.0</span>/<span class="number">255</span> green:<span class="number">175.0</span>/<span class="number">255</span> blue:<span class="number">137.0</span>/<span class="number">255</span> alpha:<span class="number">1.0</span>] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">            customButton.layer.borderColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">66.0</span>/<span class="number">255</span> green:<span class="number">175.0</span>/<span class="number">255</span> blue:<span class="number">137.0</span>/<span class="number">255</span> alpha:<span class="number">1.0</span>].CGColor;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            [customButton setTitleColor:[<span class="built_in">UIColor</span> colorWithRed:<span class="number">110.0</span>/<span class="number">255</span> green:<span class="number">193.0</span>/<span class="number">255</span> blue:<span class="number">209.0</span>/<span class="number">255</span> alpha:<span class="number">1.0</span>] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">            customButton.layer.borderColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">110.0</span>/<span class="number">255</span> green:<span class="number">193.0</span>/<span class="number">255</span> blue:<span class="number">209.0</span>/<span class="number">255</span> alpha:<span class="number">1.0</span>].CGColor;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            [customButton setTitleColor:[<span class="built_in">UIColor</span> colorWithRed:<span class="number">223.0</span>/<span class="number">255</span> green:<span class="number">162.0</span>/<span class="number">255</span> blue:<span class="number">42.0</span>/<span class="number">255</span> alpha:<span class="number">1.0</span>] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">            customButton.layer.borderColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">223.0</span>/<span class="number">255</span> green:<span class="number">162.0</span>/<span class="number">255</span> blue:<span class="number">42.0</span>/<span class="number">255</span> alpha:<span class="number">1.0</span>].CGColor;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            [customButton setTitleColor:[<span class="built_in">UIColor</span> colorWithRed:<span class="number">209.0</span>/<span class="number">255</span> green:<span class="number">33.0</span>/<span class="number">255</span> blue:<span class="number">96.0</span>/<span class="number">255</span> alpha:<span class="number">1.0</span>] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">            customButton.layer.borderColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">209.0</span>/<span class="number">255</span> green:<span class="number">33.0</span>/<span class="number">255</span> blue:<span class="number">96.0</span>/<span class="number">255</span> alpha:<span class="number">1.0</span>].CGColor;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> customButton;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-4-7/76263015.jpg"></p>
<blockquote>
<p>你可以说这样写很丑但是你不可以说我审美有问题……我又不是设计师我怎么知道怎么配色好看🌚🌚🌚</p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>OS X系统上安装树莓派Raspbian系统</title>
    <url>/2015/12/03/OS-X%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85%E6%A0%91%E8%8E%93%E6%B4%BERaspbian%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>首先去<a href="https://www.raspberrypi.org/" target="_blank" rel="noopener">官网</a>下载一个<a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">Raspbin</a></p>
<p>下载完成之后得到一个压缩包，解压之后得到一个镜像文件 <code>2015-11-21-raspbian-jessie.img</code>。</p>
<p>然后准备一张SD卡，最好8G以上吧。</p>
<a id="more"></a>

<h2 id="图形化界面安装"><a href="#图形化界面安装" class="headerlink" title="图形化界面安装"></a>图形化界面安装</h2><ul>
<li>将SD卡插入Mac上的读卡器。</li>
<li>点击屏幕左上角苹果标志，<code>关于本机</code>-&gt;<code>系统报告</code>,找到<code>USB</code>-&gt;<code>Card Reader</code>-&gt;<code>BSD</code>。找到一个类似于 <code>diskn</code>的数据，比如我的是 <code>disk2</code>。</li>
<li>用磁盘工具抹掉SD卡，<strong>SD卡文件格式必须为 FAT32</strong>，如果不是自己用磁盘工具重新格式化（<code>launchpad</code>-&gt;<code>其他</code>-&gt;<code>磁盘工具</code>）。</li>
<li>在终端输入   </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dd bs=1m <span class="keyword">if</span>=path_of_your_image.img of=/dev/rdiskn</span><br></pre></td></tr></table></figure>
<p>   其中<code>path_of_your_image.img</code>是你放镜像文件的路径，<code>rdiskn</code>中<code>n</code>是你之前看的<code>diskn</code>那个数字，我的是2，所以就是<code>rdisk2</code></p>
<ul>
<li>如果命令失效，就用<code>diskn</code>代替<code>rdiskn</code>。</li>
</ul>
<h2 id="用命令行安装"><a href="#用命令行安装" class="headerlink" title="用命令行安装"></a>用命令行安装</h2><p>1.打开终端<br>2.输入 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></table></figure>

<p>找到你的SD卡的磁盘号，我的是disk2。</p>
<p>3.抹除SD卡</p>
<p>输入来抹除SD卡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diskutil unmountDisk /dev/diskn <span class="comment">#n需要替换成数字</span></span><br></pre></td></tr></table></figure>
<p>例如我的是这样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diskutil unmountDisk /dev/disk2</span><br></pre></td></tr></table></figure>

<p>4.把镜像拷到SD卡上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dd bs=1m <span class="keyword">if</span>=image.img of=/dev/rdiskn <span class="comment">#n需要替换成数字</span></span><br></pre></td></tr></table></figure>

<p>例如我的是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dd bs=1m <span class="keyword">if</span>=2015-11-21-raspbian-jessie.img of=/dev/rdisk2</span><br></pre></td></tr></table></figure>

<p>如果出现<code>dd: invalid number &#39;1m&#39;</code>，就把<code>1m</code>换车<code>1M</code>。</p>
<blockquote>
<p>时间很慢，大约需要5分多钟，没有进度条，慢慢等喽</p>
</blockquote>
<hr>
<p>2018-10月更新</p>
<h2 id="通过-etcher-io-安装"><a href="#通过-etcher-io-安装" class="headerlink" title="通过 etcher.io 安装"></a>通过 <code>etcher.io</code> 安装</h2><p>最近发现了一个app，支持所有平台，鼠标点点就可以吧镜像写到SD卡里面。</p>
<p>app名字叫<code>etcher</code></p>
<p>官方网站是：<a href="https://etcher.io/" target="_blank" rel="noopener">https://etcher.io/</a></p>
<p><img src="../../../../image/30ee5f86-a846-4706-bfde-08adc07f9382.gif"></p>
<hr>
<p><a href="https://www.raspberrypi.org/documentation/installation/installing-images/README.md" target="_blank" rel="noopener">官方安装教程</a></p>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>MacDown</title>
    <url>/2015/07/15/MacDown/</url>
    <content><![CDATA[<blockquote>
<p>我也不知道为什么我会选了这个软件，之前用过Mou，感觉不错，但是后来又删掉了。今天想重新装回Mou，但是从官网上下下来发现运行不了……然后就发现了这个软件，感觉比Mou好用，缘分啊～</p>
</blockquote>
<a id="more"></a>

<h3 id="MacDown官网上作者也说了为什么又要写一个Markdown编辑器"><a href="#MacDown官网上作者也说了为什么又要写一个Markdown编辑器" class="headerlink" title="MacDown官网上作者也说了为什么又要写一个Markdown编辑器"></a><a href="http://macdown.uranusjr.com/" target="_blank" rel="noopener">MacDown官网</a>上作者也说了为什么又要写一个Markdown编辑器</h3><blockquote>
<h3 id="Why-Another-Markdown-Editor"><a href="#Why-Another-Markdown-Editor" class="headerlink" title="Why Another Markdown Editor?"></a>Why Another Markdown Editor?</h3><p>  I like Mou. I write Markdown all the time, and since I use OS X on a daily basis, Mou is my go-to editor whenever I wish to generate something with markup. But I had always wanted something more.</p>
</blockquote>
<blockquote>
<p>  It came as a great shock when Chen Luo announced that he felt he could not actively continue the development, and wished to sell the ownership of Mou. No suitable offers surfaced (I honestly do not think there will be, either), and I decided that instead of waiting for others to do something about this, I should act myself.</p>
<p>  I don’t have nearly enough money to match Chen Luo’s purposed offer, but I do have my own pocket of tricks and some free time. So I started from scratch, spent some weekends hacking together my own solution. And this is the result.</p>
</blockquote>
<p>大概意思是他自己也经常用Mou写Markdown，感觉Mou很方便。但是有一天惊讶的发现Mou的作者Chen Luo说自己已经不准备开发了而且想把要把<a href="http://www.v2ex.com/t/113734" target="_blank" rel="noopener">Mou卖了</a>(各种撕逼，评论很精彩啊)。但是作者表示自己包包里面的钱不够买（Mou拍卖底价50W 大洋），但是自己比价闲又有点程序开发基础，于是决定自己做一个，然后MacDown就这么诞生了!!</p>
<p><img src="../../../../image/42fe5948-92af-46f2-af7d-60e34cc86ed6.png" alt="Mac Down"></p>
<p>目前为止感觉跟Mou差不多，很好看，很好用。但是Macdown不要钱啊！！！而且Macdwon开源啊<a href="https://github.com/uranusjr/macdown" target="_blank" rel="noopener">github传送门</a>！！！！凭这两点就足矣完虐Mou了有没有！！！</p>
<h2 id="下面翻译一下Macdown的官方说明吧"><a href="#下面翻译一下Macdown的官方说明吧" class="headerlink" title="下面翻译一下Macdown的官方说明吧"></a>下面翻译一下Macdown的官方说明吧</h2><h2 id="Markdown偏好设置（The-Markdown-Preference-Pane）"><a href="#Markdown偏好设置（The-Markdown-Preference-Pane）" class="headerlink" title="Markdown偏好设置（The Markdown Preference Pane）"></a><a name="markdown-pane"></a>Markdown偏好设置（The Markdown Preference Pane）</h2><p>在这里设置markdown转换为html的偏好<br><img src="../../../../image/e10cd03b-6665-4d91-8abb-4ddf0fab95d5.png" alt="Markdown preferences pane"></p>
<h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h3><p><strong><em>Smartypants</em></strong>插件会根据上下文自动把 (<code>&quot;</code> 和 <code>&#39;</code>) 符号转化成 (<code>“</code>,<code>‘</code>,<code>”</code>和<code>’</code>)。这个功能对于像作者一样排版强迫症很有用。<br>比如 <code>&quot;test&quot;</code>写在上面就自动变成 “test”这样了<img src="../../../../image/4bf6df3d-537d-469d-b38a-e821eb4a22bf.png"></p>
<h3 id="Block-Formatting"><a href="#Block-Formatting" class="headerlink" title="Block Formatting"></a>Block Formatting</h3><h4 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h4><p>这是一张表：</p>
<table>
<thead>
<tr>
<th>标题1</th>
<th>标题2</th>
</tr>
</thead>
<tbody><tr>
<td>表格</td>
<td>表格</td>
</tr>
<tr>
<td>表格</td>
<td>表格</td>
</tr>
</tbody></table>
<p><em>（中文写这个简直反人类，一定要切换到英文输入法才可以识别！！）</em></p>
<p>可以通过在<code>|</code>之间加上<code>:</code>符号来控制表格里面文字的排版。</p>
<p>比如：<code>|:------------- |:---------------:| -------------:|</code>这么写分别代表靠左，居中，靠右。</p>
<table>
<thead>
<tr>
<th align="left">靠左</th>
<th align="center">居中</th>
<th align="right">靠右</th>
</tr>
</thead>
<tbody><tr>
<td align="left">col 3 is</td>
<td align="center">some wordy text</td>
<td align="right">$1600</td>
</tr>
<tr>
<td align="left">col 2 is</td>
<td align="center">centered</td>
<td align="right">$12</td>
</tr>
<tr>
<td align="left">zebra stripes</td>
<td align="center">are neat</td>
<td align="right">$1</td>
</tr>
</tbody></table>
<h4 id="Fenced-Code-Block"><a href="#Fenced-Code-Block" class="headerlink" title="Fenced Code Block"></a><a name="fenced-code-block">Fenced Code Block</a></h4><p>代码块长这样:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print (&#39;Hello world!&#39;)</span><br></pre></td></tr></table></figure>

<p>也可以用这个符号 (<code>~</code>) 代替这个符号(<code>`</code>):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&#39;Hello world!&#39;)</span><br></pre></td></tr></table></figure>



<p>你也可以在第一行末尾加个语言的名字，然后后面的代码酒会自动高亮了。<strong>当然你要把Syntax  highlighting in code blocks勾上</strong>（在 Preference—&gt;rendering里面）。</p>
<p><img src="../../../../image/18a6c905-3983-4d32-aa06-8b6ec12ee8ff.png" alt="Syntax highlighting example"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">foo = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">bar = (<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> f,b <span class="keyword">in</span> zip(foo,bar):</span><br><span class="line">	<span class="keyword">print</span> f,b</span><br><span class="line"><span class="comment"># Prints:</span></span><br><span class="line"><span class="comment"># 1 5</span></span><br><span class="line"><span class="comment"># 2 6</span></span><br><span class="line"><span class="comment"># 3 7</span></span><br><span class="line"><span class="comment"># 4 8</span></span><br></pre></td></tr></table></figure>


<p>他现在支持的语言有<a href="http://macdown.uranusjr.com/features/" target="_blank" rel="noopener">这些</a>, 基本上的都支持了。一大堆没见过的……</p>
<table>
<thead>
<tr>
<th>Language ID</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td>actionscript</td>
<td align="left"></td>
</tr>
<tr>
<td>apacheconf</td>
<td align="left">Configuration syntax for the Apache HTTP Server.</td>
</tr>
<tr>
<td>applescript</td>
<td align="left"></td>
</tr>
<tr>
<td>aspnet    ASP.NET</td>
<td align="left">markup in .aspx files.</td>
</tr>
<tr>
<td>autohotkey</td>
<td align="left"></td>
</tr>
<tr>
<td>bash</td>
<td align="left"></td>
</tr>
<tr>
<td>brainfuck</td>
<td align="left"></td>
</tr>
<tr>
<td>c</td>
<td align="left"></td>
</tr>
<tr>
<td>c++</td>
<td align="left">Alias to cpp.</td>
</tr>
<tr>
<td>clike</td>
<td align="left">Generic syntax for C-like languages.</td>
</tr>
<tr>
<td>coffee</td>
<td align="left">Alias to coffeescript.</td>
</tr>
<tr>
<td>coffee-script</td>
<td align="left">Alias to coffeescript.</td>
</tr>
<tr>
<td>coffeescript</td>
<td align="left"></td>
</tr>
<tr>
<td>cpp</td>
<td align="left">C++</td>
</tr>
<tr>
<td>cs</td>
<td align="left">Alias to csharp.</td>
</tr>
<tr>
<td>csharp</td>
<td align="left">C#</td>
</tr>
<tr>
<td>css</td>
<td align="left"></td>
</tr>
<tr>
<td>dart</td>
<td align="left"></td>
</tr>
<tr>
<td>eiffel</td>
<td align="left"></td>
</tr>
<tr>
<td>erlang</td>
<td align="left"></td>
</tr>
<tr>
<td>fortran</td>
<td align="left"></td>
</tr>
<tr>
<td>fsharp</td>
<td align="left"></td>
</tr>
<tr>
<td>gherkin</td>
<td align="left"></td>
</tr>
<tr>
<td>git</td>
<td align="left">Syntax used in Git commit messages.</td>
</tr>
<tr>
<td>go</td>
<td align="left"></td>
</tr>
<tr>
<td>groovy</td>
<td align="left"></td>
</tr>
<tr>
<td>haml</td>
<td align="left"></td>
</tr>
<tr>
<td>handlebars</td>
<td align="left"></td>
</tr>
<tr>
<td>haskell</td>
<td align="left"></td>
</tr>
<tr>
<td>html</td>
<td align="left">Alias to markup.</td>
</tr>
<tr>
<td>http</td>
<td align="left">Syntax used in HTTP requests and responses.</td>
</tr>
<tr>
<td>ini</td>
<td align="left">Windows INI format.</td>
</tr>
<tr>
<td>jade</td>
<td align="left"></td>
</tr>
<tr>
<td>java</td>
<td align="left"></td>
</tr>
<tr>
<td>javascript</td>
<td align="left"></td>
</tr>
<tr>
<td>jl</td>
<td align="left">Alias to julia.</td>
</tr>
<tr>
<td>js</td>
<td align="left">Alias to javascript.</td>
</tr>
<tr>
<td>json</td>
<td align="left">Alias to javascript.</td>
</tr>
<tr>
<td>jsx</td>
<td align="left"></td>
</tr>
<tr>
<td>julia</td>
<td align="left"></td>
</tr>
<tr>
<td>keyman</td>
<td align="left"></td>
</tr>
<tr>
<td>latex</td>
<td align="left"></td>
</tr>
<tr>
<td>less</td>
<td align="left"></td>
</tr>
<tr>
<td>lolcode</td>
<td align="left"></td>
</tr>
<tr>
<td>makefile</td>
<td align="left"></td>
</tr>
<tr>
<td>markdown</td>
<td align="left"></td>
</tr>
<tr>
<td>markup</td>
<td align="left">Generic *ML syntax, e.g. HTML, XML, etc.</td>
</tr>
<tr>
<td>matlab</td>
<td align="left"></td>
</tr>
<tr>
<td>nasm</td>
<td align="left">The Netwide Assembler.</td>
</tr>
<tr>
<td>nsis</td>
<td align="left"></td>
</tr>
<tr>
<td>obj-c</td>
<td align="left">Alias to objectivec.</td>
</tr>
<tr>
<td>objc</td>
<td align="left">Alias to objectivec.</td>
</tr>
<tr>
<td>objective-c</td>
<td align="left">Alias to objectivec.</td>
</tr>
<tr>
<td>objectivec</td>
<td align="left">Objective-C.</td>
</tr>
<tr>
<td>pascal</td>
<td align="left"></td>
</tr>
<tr>
<td>perl</td>
<td align="left"></td>
</tr>
<tr>
<td>php</td>
<td align="left"></td>
</tr>
<tr>
<td>powershell</td>
<td align="left"></td>
</tr>
<tr>
<td>py</td>
<td align="left">Alias to python.</td>
</tr>
<tr>
<td>python</td>
<td align="left">Python 2.</td>
</tr>
<tr>
<td>r</td>
<td align="left"></td>
</tr>
<tr>
<td>rb</td>
<td align="left">Alias to ruby.</td>
</tr>
<tr>
<td>rest</td>
<td align="left"></td>
</tr>
<tr>
<td>rip</td>
<td align="left"></td>
</tr>
<tr>
<td>ruby</td>
<td align="left"></td>
</tr>
<tr>
<td>rust</td>
<td align="left"></td>
</tr>
<tr>
<td>sas</td>
<td align="left">SAS. Not an alias to sass.</td>
</tr>
<tr>
<td>sass</td>
<td align="left">SASS (SASS)</td>
</tr>
<tr>
<td>scala</td>
<td align="left"></td>
</tr>
<tr>
<td>scheme</td>
<td align="left"></td>
</tr>
<tr>
<td>scss</td>
<td align="left">SASS (SCSS)</td>
</tr>
<tr>
<td>sh</td>
<td align="left">Alias to bash.</td>
</tr>
<tr>
<td>smalltalk</td>
<td align="left"></td>
</tr>
<tr>
<td>smarty</td>
<td align="left"></td>
</tr>
<tr>
<td>sql</td>
<td align="left"></td>
</tr>
<tr>
<td>stylus</td>
<td align="left"></td>
</tr>
<tr>
<td>swift</td>
<td align="left">Apple’s Swift programming language. Not the parallel scripting language.</td>
</tr>
<tr>
<td>twig</td>
<td align="left"></td>
</tr>
<tr>
<td>typescript</td>
<td align="left"></td>
</tr>
<tr>
<td>vhdl</td>
<td align="left"></td>
</tr>
<tr>
<td>wiki</td>
<td align="left"></td>
</tr>
<tr>
<td>xml</td>
<td align="left">Alias to markup.</td>
</tr>
<tr>
<td>yaml</td>
<td align="left">YAML</td>
</tr>
</tbody></table>
<h3 id="Inline-Formatting"><a href="#Inline-Formatting" class="headerlink" title="Inline Formatting"></a>Inline Formatting</h3><p>下面这个表代表支持的Inline Formatting</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>markdown写法</th>
<th>看到的结果</th>
</tr>
</thead>
<tbody><tr>
<td>Intra-word emphasis</td>
<td>So A*maz*ing</td>
<td>So A<em>maz</em>ing</td>
</tr>
<tr>
<td>Strikethrough</td>
<td>~<del>Much wow\</del></td>
<td><del>Much wow</del></td>
</tr>
<tr>
<td>Underline [^under]</td>
<td>_So doge_</td>
<td><u>So doge</u></td>
</tr>
<tr>
<td>Quote [^quote]</td>
<td>&quot;Such editor&quot;</td>
<td><q>Such editor</q></td>
</tr>
<tr>
<td>Highlight</td>
<td>==So good==</td>
<td><mark>So good</mark></td>
</tr>
<tr>
<td>Superscript</td>
<td>hoge^(fuga)</td>
<td>hoge<sup>fuga</sup></td>
</tr>
<tr>
<td>Autolink</td>
<td><a href="http://t.co/" target="_blank" rel="noopener">http://t.co</a></td>
<td><a href="http://t.co/" target="_blank" rel="noopener">http://t.co</a></td>
</tr>
<tr>
<td>Footnotes</td>
<td>[^4] and [^4]:</td>
<td><code>[^4]</code> and footnote 4</td>
</tr>
</tbody></table>
<p><code>[^4]:</code>脚注可以随意标记，可以不用数字，也不用按顺序排列。脚注会根据在文章中出现的顺序自动按顺序排列到文章的末尾(像这样写，他会自动显示在文章末尾，网页上显示不了)</p>
<h2 id="The-Rendering-Preference-Pane"><a href="#The-Rendering-Preference-Pane" class="headerlink" title="The Rendering Preference Pane"></a><a name="rendering-pane"></a>The Rendering Preference Pane</h2><p>这个板块用来设置页面的样式和颜色<br><img src="../../../../image/18234c28-471f-424f-ad09-94db84a099b9.png" alt="Rendering preferences pane"></p>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>你可以使用不同的CSS来改变html页面的样子，你甚至可以添加自己的CSS。</p>
<h3 id="句法高亮（Syntax-Highlighting-）"><a href="#句法高亮（Syntax-Highlighting-）" class="headerlink" title="句法高亮（Syntax Highlighting ）"></a>句法高亮（Syntax Highlighting ）</h3><p>之前写过如何让一个代码块高亮，不会的可以看这里 <a href="#fenced-code-block">Fenced Code Block</a> 。你也可以选用不同的主题来设置高亮。</p>
<h3 id="TeX风格的数学公式（TeX-like-Math-Syntax-）"><a href="#TeX风格的数学公式（TeX-like-Math-Syntax-）" class="headerlink" title="TeX风格的数学公式（TeX-like Math Syntax ）"></a>TeX风格的数学公式（TeX-like Math Syntax ）</h3><p>（需要联网） </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\\[</span><br><span class="line">    A^T_S &#x3D; B</span><br><span class="line">\\]</span><br></pre></td></tr></table></figure>


<p>\[<br>    A^T_S = B<br>\]</p>
<blockquote>
<p>或者</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">math</span> <span class="attr">display</span>=<span class="string">"block"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">msubsup</span>&gt;</span><span class="tag">&lt;<span class="name">mi</span>&gt;</span>A<span class="tag">&lt;/<span class="name">mi</span>&gt;</span> <span class="tag">&lt;<span class="name">mi</span>&gt;</span>S<span class="tag">&lt;/<span class="name">mi</span>&gt;</span> <span class="tag">&lt;<span class="name">mi</span>&gt;</span>T<span class="tag">&lt;/<span class="name">mi</span>&gt;</span><span class="tag">&lt;/<span class="name">msubsup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mo</span>&gt;</span>=<span class="tag">&lt;/<span class="name">mo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mi</span>&gt;</span>B<span class="tag">&lt;/<span class="name">mi</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">math</span>&gt;</span></span><br></pre></td></tr></table></figure>

<math display="block">
    <msubsup><mi>A</mi> <mi>S</mi> <mi>T</mi></msubsup>
    <mo>=</mo>
    <mi>B</mi>
</math>



<p>（完全不懂他在说什么……）</p>
<h3 id="复选框（Task-List-Syntax）"><a href="#复选框（Task-List-Syntax）" class="headerlink" title="复选框（Task List Syntax）"></a>复选框（Task List Syntax）</h3><p><img src="../../../../image/c30c643c-d69a-43f8-b073-7123f4015b5f.png"></p>
<h3 id="Jekyll-front-matter"><a href="#Jekyll-front-matter" class="headerlink" title="Jekyll front-matter"></a>Jekyll front-matter</h3><p>macdown支持 Jekyll，只需要在文件最开始用<code>---</code>标记就好了。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;Macdown is my friend&quot;</span><br><span class="line">date: 2014-06-06 20:00:00</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="Render-newline-literally"><a href="#Render-newline-literally" class="headerlink" title="Render newline literally"></a>Render newline literally</h3><p>通常重起一行需要在上一行末尾打两个空格和一个回车号，你也可以设置为只打一个回车符号。但是不建议你这么做，因为这样写在Macdown上没有任何问题，但是一旦这个文件由其他程序生成那个html界面就扑街了。。。</p>
<h2 id="The-General-Preferences-Pane"><a href="#The-General-Preferences-Pane" class="headerlink" title="The General Preferences Pane"></a><a name="general-pane"></a>The General Preferences Pane</h2><p><img src="../../../../image/2c552094-82d1-4f98-8408-fc7efeb6f826.png" alt="General preferences pane"></p>
<p>从上到下依次是:  </p>
<ol>
<li>改变编辑页内容的时候预览内容也会跟着改变  </li>
<li>滑动编辑页的时候预览也会跟着滑动  </li>
<li>把编辑页放到右边  </li>
<li>显示字符数. </li>
<li>更新的时候包括预发行版</li>
</ol>
<h2 id="编辑页偏好设置（The-Editor-Preference-Pane）"><a href="#编辑页偏好设置（The-Editor-Preference-Pane）" class="headerlink" title="编辑页偏好设置（The Editor Preference Pane）"></a><a name="editor-pane"></a>编辑页偏好设置（The Editor Preference Pane）</h2><p><img src="../../../../image/7fb0b039-3b94-4e53-8812-c0ca7f79df2c.png" alt="Editor preferences pane"></p>
<h3 id="Styling"><a href="#Styling" class="headerlink" title="Styling"></a>Styling</h3><p>编辑器自带文字高亮显示，你也可以自己修改和调整字体的颜色和大小。当然也有一些自带的主题可以选择。<br>你也可以自己添加新的主题，点击**<em>Reveal**</em>按钮就可以添加了，文件必须是(<code>.styles</code>)类型否则无法添加。<br>编辑器有自动补全功能，如果不需要可以手动关闭。</p>
<blockquote>
<p>第一次翻译别人的东西，比我想象中的难多了。本来以为两小时搞定，结果用了一下午，中间还有N多东西不确定……我还是好好学英语吧～</p>
</blockquote>
]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>React-Native跨平台调用代码</title>
    <url>/2018/12/11/React-Native%E8%B7%A8%E5%B9%B3%E5%8F%B0%E8%B0%83%E7%94%A8%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>有时候React-Native需要访问原生API，但是官方并没有封装，这时候就需要自己手动调用原生代码，比如调用安卓的Toast，比如需要调用某些硬件接口。这篇文章主要记录了如何调用安卓和iOS原生方法。</p>
<a id="more"></a>

<h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><p>首先创建一个<code>bridge</code>文件，我这里叫MessageBridge，继承RCTEventEmitter类，以及实现RCTBridgeModule协议，如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line">#import &lt;React&#x2F;RCTBridgeModule.h&gt;</span><br><span class="line">#import &lt;React&#x2F;RCTEventEmitter.h&gt;</span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line">@interface MessageBridge : RCTEventEmitter&lt;RCTBridgeModule&gt;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>为了实现RCTBridgeModule协议，类里面还需要加上RCT_EXPORT_MODULE()宏。这个宏是为了导出模块的方法给Javascript，假设不传递参数给他就默认导出当前类的名字，如果指定了Javascript调用的就是你指定的名字。比如下面代码在JavaScript中看到的模块名字就是<code>MessageBridge</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &quot;MessageBridge.h&quot;</span><br><span class="line">@implementation MessageBridge</span><br><span class="line">RCT_EXPORT_MODULE();</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>消息传递我分了两类，一个是从原生平台直接回调消息，一个是原生平台给JavaScript推送消息。</p>
<h3 id="回调消息"><a href="#回调消息" class="headerlink" title="回调消息"></a>回调消息</h3><p>iOS可以直接实现一个Promise给React-Native。使用ES2016中的<code>async/await</code>关键字可以极大的简化代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RCT_REMAP_METHOD(getMessage,:(NSString *)message</span><br><span class="line">                 findEventsWithResolver:(RCTPromiseResolveBlock)resolve</span><br><span class="line">                 rejecter:(RCTPromiseRejectBlock)reject)</span><br><span class="line">&#123;</span><br><span class="line">  NSDictionary *data &#x3D; @&#123;@&quot;success&quot;:@YES,@&quot;message&quot;:[message stringByAppendingString:@&quot; (Promises)&quot;]&#125;;</span><br><span class="line">  if (data) &#123;</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    NSError *error &#x3D; [[NSError alloc] initWithDomain:@&quot;show&quot; code:200 userInfo:nil];</span><br><span class="line">    reject(@&quot;no_events&quot;, @&quot;There were no events&quot;, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的话JavaScript可以得到一个Promise，使用<code>await</code>关键字就可以得到回调的值了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> getMessage() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">await</span> MessageBridge.getMessage(<span class="string">'Get Message'</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="string">"getMessage"</span>: data.message &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="推送消息"><a href="#推送消息" class="headerlink" title="推送消息"></a>推送消息</h3><p>对于某些特殊情况需要从原生平台推送消息给React-Native，我们可以通过实现<code>supportedEvents</code>方法然后调用<code>self sendEventWithNam:：</code>就可以完成消息的推送了。</p>
<blockquote>
<p>注意supportedEvents一定要实现不然会报错。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &quot;MessageBridge.h&quot;</span><br><span class="line">@implementation MessageBridge</span><br><span class="line">RCT_EXPORT_MODULE();</span><br><span class="line">RCT_REMAP_METHOD(pushMessage,:(NSString *)message)</span><br><span class="line">&#123;</span><br><span class="line">  NSDictionary *data &#x3D; @&#123;@&quot;success&quot;:@YES,@&quot;message&quot;:[message stringByAppendingString:@&quot; (send event)&quot;]&#125;;</span><br><span class="line">  [self sendEventWithName:@&quot;PushMessage&quot; body:data];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSArray&lt;NSString *&gt; *)supportedEvents &#123;</span><br><span class="line">  return @[@&quot;PushMessage&quot;];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>首先在<code>android/app/src/main/java/com/(your-app-name)/</code>文件夹下创建一个<code>MessageBridge</code>类，继承ReactContextBaseJavaModule。</p>
<p>然后要实现<code>ReactContextBaseJavaModule</code>中的<code>getName</code>方法，这个方法返回JavaScript调用时需要的类名。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.facebook.react.bridge.Arguments;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactContext;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactContextBaseJavaModule;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactMethod;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.bridge.WritableMap;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.modules.core.DeviceEventManagerModule;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.uimanager.IllegalViewOperationException;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.bridge.Promise;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageBridge</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MessageBridge"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在同一个目录下创建一个CustomReactPackages.java文件，这个文件用来导出自定的package名字，文件内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.facebook.react.ReactPackage;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.bridge.NativeModule;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.uimanager.ViewManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomReactPackages</span> <span class="keyword">implements</span> <span class="title">ReactPackage</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ViewManager&gt; <span class="title">createViewManagers</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;NativeModule&gt; <span class="title">createNativeModules</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ReactApplicationContext reactContext)</span> </span>&#123;</span><br><span class="line">        List&lt;NativeModule&gt; modules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        modules.add(<span class="keyword">new</span> MessageBridge(reactContext)); <span class="comment">// &lt;-- 添加刚创建的类名</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modules;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后在MainApplication.java文件中添加CustomToastPackage()：</p>
<blockquote>
<p>注意是MainApplication.java不是MainActivity.java，之前弄错了bug调的我怀疑人生。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">            <span class="keyword">new</span> MainReactPackage(),</span><br><span class="line">            <span class="keyword">new</span> CustomToastPackages()); <span class="comment">// &lt;-- package name.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="回调消息-1"><a href="#回调消息-1" class="headerlink" title="回调消息"></a>回调消息</h2><p>安卓也可以直接实现一个Promise给React-Native。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ReactMethod</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(String message, Promise promise)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        WritableMap data = Arguments.createMap();</span><br><span class="line">        data.putString(<span class="string">"status"</span>,<span class="string">"success"</span>);</span><br><span class="line">        data.putString(<span class="string">"message"</span>, message + <span class="string">" (promise)"</span>);</span><br><span class="line">        promise.resolve(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalViewOperationException e)&#123;</span><br><span class="line">        promise.reject(<span class="string">"error"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中注释@ReactMethod是为了将方法暴露给JavaScript。加了@ReactMethod后会将Java变量类型一一映射成JavaScript的变量类型</p>
<blockquote>
<p>Boolean -&gt; Bool<br>Integer -&gt; Number<br>Double -&gt; Number<br>Float -&gt; Number<br>String -&gt; String<br>Callback -&gt; function<br>ReadableMap -&gt; Object<br>ReadableArray -&gt; Array</p>
</blockquote>
<p>JavaScript端代码跟iOS一样，使用<code>await</code>关键字就可以得到回调的值了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> getMessage() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">await</span> MessageBridge.getMessage(<span class="string">'Get Message'</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="string">"getMessage"</span>: data.message &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="推送消息-1"><a href="#推送消息-1" class="headerlink" title="推送消息"></a>推送消息</h2><p>安卓中推送消息给<code>React-Native</code>最简单的方法就是通过使用<code>ReactContext</code>中的<code>RCTDeviceEventEmitter</code>方法，如下面代码所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendEvent</span><span class="params">(ReactContext reactContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                       String eventName,</span></span></span><br><span class="line"><span class="function"><span class="params">                       @Nullable WritableMap params)</span> </span>&#123;</span><br><span class="line">    reactContext</span><br><span class="line">            .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            .<span class="title">emit</span>(<span class="title">eventName</span>, <span class="title">params</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ReactMethod</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    WritableMap data = Arguments.createMap();</span><br><span class="line">    data.putString(<span class="string">"status"</span>,<span class="string">"success"</span>);</span><br><span class="line">    data.putString(<span class="string">"message"</span>,message + <span class="string">" (send event)"</span>);</span><br><span class="line">    <span class="keyword">this</span>.sendEvent(<span class="keyword">this</span>.mReactContext,<span class="string">"PushMessage"</span>,data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在JavaScript端可以直接使用<code>DeviceEventEmitter</code>来监听事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">componentWillMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  DeviceEventEmitter.addListener(<span class="string">'keyboardWillShow'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e: Event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle event.</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Demo 地址：<a href="https://github.com/cydjohn/RNNativeModules" target="_blank" rel="noopener">https://github.com/cydjohn/RNNativeModules</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>React-Native</tag>
      </tags>
  </entry>
  <entry>
    <title>React-Native推送消息</title>
    <url>/2019/06/28/React-Native%E6%8E%A8%E9%80%81%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<p>这里我基本上直接用的<a href="https://github.com/zo0r/react-native-push-notification" target="_blank" rel="noopener">react-native-push-notification</a>， 但是使用途中还是遇到了几个小坑，费了一些时间才解决掉，这里记录下步骤。</p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save react-native-push-notification</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add react-native-push-notification</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">react-native link react-native-push-notification</span><br></pre></td></tr></table></figure>

<h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><p>iOS 安装需要手动把<code>react-native-push-notification</code> 项目添加到自己的项目里面。</p>
<p>右键点击工程目录下的<code>Libraries</code>-&gt;<code>Add Files</code></p>
<p><img src="../../../../image/e67afc58-5231-4b21-908e-a58db0ab969b.png"></p>
<p>在<code>node_modules/react-native/Libraries/PushNotificationIOS</code>文件夹下找到 <code>RCTPushNotification.xcodeproj</code> 点击添加</p>
<p><img src="../../../../image/4a625874-2e88-4c2c-87cf-adf784a64ca0.png"></p>
<p>然后在 <code>General</code> -&gt; <code>Linked Frameworks and Libraries</code> 添加 <code>libRCTPushNotifaction.a</code></p>
<p><img src="../../../../image/6c52675c-ffde-4f53-9317-82fbb691efe3.png"></p>
<p> 找到 <code>Capabilities</code> -&gt; <code>Background Modes</code>， 选中 <code>Remote notifications</code>以及 <code>Background Modes</code> -&gt; <code>Remote notifications</code>。</p>
<p><img src="../../../../image/267b5dba-5c17-4a9c-9408-ba8c4a09f7c7.png"></p>
<blockquote>
<p>如果找不到Remote notifications，说明你的开发者账号不支持推送，需要换一个账号（应该是要充了钱那种。</p>
</blockquote>
<p>在AppDelegate.m 中添加</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTPushNotificationManager.h&gt;</span></span></span><br><span class="line">......</span><br><span class="line"> <span class="comment">// Required to register for notifications</span></span><br><span class="line"> - (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didRegisterUserNotificationSettings:(<span class="built_in">UIUserNotificationSettings</span> *)notificationSettings</span><br><span class="line"> &#123;</span><br><span class="line">  [RCTPushNotificationManager didRegisterUserNotificationSettings:notificationSettings];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// Required for the register event.</span></span><br><span class="line"> - (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didRegisterForRemoteNotificationsWithDeviceToken:(<span class="built_in">NSData</span> *)deviceToken</span><br><span class="line"> &#123;</span><br><span class="line">  [RCTPushNotificationManager didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// Required for the notification event. You must call the completion handler after handling the remote notification.</span></span><br><span class="line"> - (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didReceiveRemoteNotification:(<span class="built_in">NSDictionary</span> *)userInfo</span><br><span class="line">                                                        fetchCompletionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">UIBackgroundFetchResult</span>))completionHandler</span><br><span class="line"> &#123;</span><br><span class="line">   [RCTPushNotificationManager didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// Required for the registrationError event.</span></span><br><span class="line"> - (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didFailToRegisterForRemoteNotificationsWithError:(<span class="built_in">NSError</span> *)error</span><br><span class="line"> &#123;</span><br><span class="line">  [RCTPushNotificationManager didFailToRegisterForRemoteNotificationsWithError:error];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// Required for the localNotification event.</span></span><br><span class="line"> - (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didReceiveLocalNotification:(<span class="built_in">UILocalNotification</span> *)notification</span><br><span class="line"> &#123;</span><br><span class="line">  [RCTPushNotificationManager didReceiveLocalNotification:notification];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取推送证书"><a href="#获取推送证书" class="headerlink" title="获取推送证书"></a>获取推送证书</h3><p>从<a href="https://developer.apple.com/account/" target="_blank" rel="noopener">苹果开发者中心</a>登录。</p>
<p>选择 <code>Certificates</code> -&gt; <code>Identifiers &amp; Profiles</code> -&gt; <code>Keys ▸ All </code>， 点击 <code>+</code> 创建一个新的密钥。</p>
<p>给密钥随便取个名字，比如<code>Push Notification Key</code> ， 然后选中<code>Apple Push Notifications service (APNs)</code>。</p>
<p><img src="../../../../image/e01eb1db-fa4f-4bbf-8b5b-f158ab3efe5b.jpeg"></p>
<p>点击<code>Continue</code> 然后<code>Confirm</code>，下载生成的密钥。密钥命名会像这样：<code>AuthKey_4SVKWF966R.p8</code>，其中 <code>4SVKWF966R</code> 就是 <code>Key ID</code>。此外我们还需要 <code>Team ID</code>，可以在<a href="https://developer.apple.com/account/#/membership" target="_blank" rel="noopener">这个页面</a>找到。</p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>在 <code>AndroidManifest.xml</code>里面添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt; Only if you're using GCM or localNotificationSchedule() &gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WAKE_LOCK"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">permission</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"$&#123;applicationId&#125;.permission.C2D_MESSAGE"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:protectionLevel</span>=<span class="string">"signature"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"$&#123;applicationId&#125;.permission.C2D_MESSAGE"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt; Only if you're using GCM or localNotificationSchedule() &gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.VIBRATE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">....</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span>  <span class="attr">android:name</span>=<span class="string">"com.dieam.reactnativepushnotification.notification_channel_name"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"YOUR NOTIFICATION CHANNEL NAME"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span>  <span class="attr">android:name</span>=<span class="string">"com.dieam.reactnativepushnotification.notification_channel_description"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:value</span>=<span class="string">"YOUR NOTIFICATION CHANNEL DESCRIPTION"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Change the resource name to your App's accent color - or any other color you want --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span>  <span class="attr">android:name</span>=<span class="string">"com.dieam.reactnativepushnotification.notification_color"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:resource</span>=<span class="string">"@android:color/white"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt; Only if you're using GCM or localNotificationSchedule() &gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"com.google.android.gms.gcm.GcmReceiver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:exported</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:permission</span>=<span class="string">"com.google.android.c2dm.permission.SEND"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.google.android.c2dm.intent.RECEIVE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"$&#123;applicationId&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt; Only if you're using GCM or localNotificationSchedule() &gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"com.dieam.reactnativepushnotification.modules.RNPushNotificationPublisher"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"com.dieam.reactnativepushnotification.modules.RNPushNotificationBootEventReceiver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BOOT_COMPLETED"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">"com.dieam.reactnativepushnotification.modules.RNPushNotificationRegistrationService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt; Only if you're using GCM or localNotificationSchedule() &gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerServiceGcm"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:exported</span>=<span class="string">"false"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.google.android.c2dm.intent.RECEIVE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;/ Only if you're using GCM or localNotificationSchedule() &gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt; Else &gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerService"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:exported</span>=<span class="string">"false"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.google.firebase.MESSAGING_EVENT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;/Else&gt; --&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>android/app/src/res/values/colors.xml</code>里面添加 <strong>很关键！</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white"</span>&gt;</span>#FFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>android/settings.gradle</code>中（运行react-native link时应该自动添加了）：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">':react-native-push-notification'</span></span><br><span class="line"><span class="keyword">project</span>(<span class="string">':react-native-push-notification'</span>).projectDir = <span class="keyword">file</span>(‘..<span class="regexp">/node_modules/</span>react-<span class="keyword">native</span>-<span class="keyword">push</span>-notification<span class="regexp">/android')</span></span><br></pre></td></tr></table></figure>


<p><code>MainApplication.java</code> 中（运行react-native link时应该自动添加了）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.dieam.reactnativepushnotification.ReactNativePushNotificationPackage;  <span class="comment">// &lt;--- Import Package</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">ReactApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ReactNativeHost mReactNativeHost = <span class="keyword">new</span> ReactNativeHost(<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">getUseDeveloperSupport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BuildConfig.DEBUG;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">          <span class="keyword">new</span> MainReactPackage(),</span><br><span class="line">          <span class="keyword">new</span> ReactNativePushNotificationPackage() <span class="comment">// &lt;---- Add the Package</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> PushNotification = <span class="built_in">require</span>(<span class="string">'react-native-push-notification'</span>);</span><br><span class="line"></span><br><span class="line">PushNotification.configure(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (optional) Called when Token is generated (iOS and Android)</span></span><br><span class="line">    onRegister: <span class="function"><span class="keyword">function</span>(<span class="params">token</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'TOKEN:'</span>, token );</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (required) Called when a remote or local notification is opened or received</span></span><br><span class="line">    onNotification: <span class="function"><span class="keyword">function</span>(<span class="params">notification</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'NOTIFICATION:'</span>, notification );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// process the notification</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// required on iOS only (see fetchCompletionHandler docs: https://facebook.github.io/react-native/docs/pushnotificationios.html)</span></span><br><span class="line">        notification.finish(PushNotificationIOS.FetchResult.NoData);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ANDROID ONLY: GCM or FCM Sender ID (product_number) (optional - not required for local notifications, but is need to receive remote push notifications)</span></span><br><span class="line">    senderID: <span class="string">"YOUR GCM (OR FCM) SENDER ID"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IOS ONLY (optional): default: all - Permissions to register.</span></span><br><span class="line">    permissions: &#123;</span><br><span class="line">        alert: <span class="literal">true</span>,</span><br><span class="line">        badge: <span class="literal">true</span>,</span><br><span class="line">        sound: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Should the initial notification be popped automatically</span></span><br><span class="line">    <span class="comment">// default: true</span></span><br><span class="line">    popInitialNotification: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * (optional) default: true</span></span><br><span class="line"><span class="comment">      * - Specified if permissions (ios) and token (android and ios) will requested or not,</span></span><br><span class="line"><span class="comment">      * - if not, you must call PushNotificationsHandler.requestPermissions() later</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    requestPermissions: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>其中：<br><code>onRegister()</code>获得的token为每个设备唯一的识别号，需要记录下来，推送会用到。</p>
<p><code>senderID</code>是谷歌firebase的推送id，如果不用谷歌的firebase可以不用管这里。</p>
<h3 id="注册Firebase"><a href="#注册Firebase" class="headerlink" title="注册Firebase"></a>注册Firebase</h3><p>我这里使用谷歌firebase，国内应该有别的推送服务比如极光推送，小米推送等等。</p>
<p>先到<a href="https://console.firebase.google.com/" target="_blank" rel="noopener">firebase</a>创建一个项目，名字随便取。</p>
<p><img src="../../../../image/3166d13a-8c0e-4b80-8dee-7f74b3978d97.png"></p>
<p>然后注册一个新的安卓应用，其中安卓软件包名就是<code>build.gradle</code> 文件中的 <code>applicationId</code></p>
<p><img src="../../../../image/547bd056-5d86-4451-9e96-3b1d310286f3.png"></p>
<p>点击下一步，根据提示下载<code>google-services.json</code><br>然后把“google-services.json”文件移至 Android 应用模块的根目录。</p>
<p><img src="../../../../image/8804917f-21ed-4f63-b036-1620757b1d2b.png"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>下载 <a href="https://github.com/onmyway133/PushNotifications" target="_blank" rel="noopener">Push Notification Tester</a>， 这是一个可以用来测试iOS消息推送的软件，软件界面如下。填入<code>Key ID</code>，<code>Team ID</code>，密钥，<code>bundle id</code>以及获取的设备码，点击send即可测试。</p>
<p><img src="../../../../image/210c34da-55a7-488c-98a3-929a868ab03f.png"></p>
<hr>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/zo0r/react-native-push-notification" target="_blank" rel="noopener">https://github.com/zo0r/react-native-push-notification</a></p>
<p><a href="https://facebook.github.io/react-native/docs/pushnotificationios.html#content" target="_blank" rel="noopener">https://facebook.github.io/react-native/docs/pushnotificationios.html#content</a></p>
<p><a href="https://www.raywenderlich.com/8164-push-notifications-tutorial-getting-started" target="_blank" rel="noopener">https://www.raywenderlich.com/8164-push-notifications-tutorial-getting-started</a></p>
]]></content>
      <tags>
        <tag>React-Native</tag>
      </tags>
  </entry>
  <entry>
    <title>Shadowsocks使用教程</title>
    <url>/2015/09/24/Shadowsocks%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>Shadowsocks（中文名称：影梭）是使用Python、C++、C#等语言开发的、基于Apache许可证的开放源代码软件，用于保护网络流量、加密数据传输。Shadowsocks使用Socks5代理方式。</p>
</blockquote>
<blockquote>
<p>Shadowsocks分为服务器端和客户端。在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。</p>
</blockquote>
<blockquote>
<p>在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。在2015年8月22日，Shadowsocks原作者Clowwindy称受到了中国政府的压力，宣布停止维护此项目并移除其用户页面所载的源代码。</p>
</blockquote>
<p><strong>但是如果人在国外，就可以反过来，通过国内的服务器去下载和访问一些“有版权问题”的资源。由于传输数据被加密过，外国政府一般不可能知道你下载或者访问了什么，只知道你链接了一个中国的服务器(当然，如果用了什么好莱坞电影里面那种黑科技查出来了我也没办法……）</strong></p>
<h2 id="Windows端"><a href="#Windows端" class="headerlink" title="Windows端"></a>Windows端</h2><p>先到这里下载windows客户端<a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>
<p><img src="http://i1.piimg.com/567571/3cebd7e6a08c6b16.png"></p>
<p>然后，解压，双击打开</p>
<p>填入地址密码端口号等信息，然后点击<code>确定</code></p>
<p><img src="http://i1.piimg.com/567571/be5646c90c5f1b35.png"></p>
<p>然后在通知栏找到小飞机标志，打开<code>全局模式</code>，打开代理就可以正常使用了（如图：</p>
<p><img src="http://p1.bqimg.com/567571/c25a92c442852751.png"></p>
<h2 id="Mac端"><a href="#Mac端" class="headerlink" title="Mac端"></a>Mac端</h2><ul>
<li>先从这里下载程序<a href="https://github.com/shadowsocks/shadowsocks-iOS/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-iOS/releases</a></li>
</ul>
<p><img src="http://i1.piimg.com/567571/b078ee3235b03e4a.png"></p>
<ul>
<li>然后双击下载文件，将程序拖入<code>Applications</code>中</li>
</ul>
<p><img src="http://i1.piimg.com/567571/03d584a3b478e03e.png"></p>
<p>之后在lunchpad中找到ShadowsocksX，点击运行，可以在电脑右上角看到这个标志</p>
<p><img src="http://i1.piimg.com/567571/126a757dee254e9b.png"></p>
<p>点击“Servers”-&gt; “Open Server Preferences”</p>
<p><img src="http://i1.piimg.com/567571/62cd073e960c7dc1.png"></p>
<p>点击“➕”号添加一个服务器</p>
<p><img src="http://i1.piimg.com/567571/dd9d627b7b57b853.png"></p>
<p>填入地址密码端口号等信息，然后点击<code>OK</code></p>
<p>然后选全局模式，打开Shadowsocks，就可以用了</p>
<p><img src="http://i1.piimg.com/567571/252aec0c8adeaac8.png"></p>
<h3 id="服务器是阿里云顶配，100M带宽，下东西嗖嗖嗖的"><a href="#服务器是阿里云顶配，100M带宽，下东西嗖嗖嗖的" class="headerlink" title="服务器是阿里云顶配，100M带宽，下东西嗖嗖嗖的"></a>服务器是阿里云顶配，100M带宽，下东西嗖嗖嗖的</h3><p><img src="http://i1.piimg.com/567571/5109201685d772a7.png"></p>
<h3 id="网易音乐等东西也可以正常用，跟国内一样"><a href="#网易音乐等东西也可以正常用，跟国内一样" class="headerlink" title="网易音乐等东西也可以正常用，跟国内一样"></a>网易音乐等东西也可以正常用，跟国内一样</h3><p><img src="http://i1.piimg.com/567571/ee3445ba962101a6.png"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>RTMP Ubuntu 18.04 配置</title>
    <url>/2018/12/02/RTMP-Ubuntu-18-04-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>Digital Ocean Ubuntu 18.04 x64</p>
</blockquote>
<a id="more"></a>

<h2 id="安装-Nginx-和-Nginx-RTMP"><a href="#安装-Nginx-和-Nginx-RTMP" class="headerlink" title="安装 Nginx 和 Nginx-RTMP"></a>安装 Nginx 和 Nginx-RTMP</h2><p>首先下载依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev</span><br></pre></td></tr></table></figure>

<p>创建一个工作目录（可以起别的名字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/working</span><br><span class="line"><span class="built_in">cd</span> ~/working</span><br></pre></td></tr></table></figure>

<p>下载<code>Nginx</code>和<code>Nginx-RTMP</code>源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget  http://nginx.org/download/nginx-1.15.7.tar.gz</span><br><span class="line">wget https://github.com/arut/nginx-rtmp-module/archive/master.zip</span><br></pre></td></tr></table></figure>

<p>安装一个解压工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install unzip</span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf  nginx-1.15.7</span><br><span class="line">unzip master.zip</span><br></pre></td></tr></table></figure>

<p>进入<code>nginx</code>目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  nginx-1.15.7</span><br></pre></td></tr></table></figure>

<p>添加编译的配置，把 <code>nginx-rtmp</code>模块加到里面（后面的<code>--without-http_gzip_module</code>应该可以不加，但是如果在<code>digital ocean</code>上不添加会报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --with-http_ssl_module --add-module=../nginx-rtmp-module-master --without-http_gzip_module</span><br></pre></td></tr></table></figure>

<p>编译<code>nginx</code>和<code>nginx-rtmp</code>模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>安装nginx初始化脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget https://raw.github.com/JasonGiedymin/nginx-init-ubuntu/master/nginx -O /etc/init.d/nginx</span><br><span class="line">sudo chmod +x /etc/init.d/nginx</span><br><span class="line">sudo update-rc.d nginx defaults</span><br></pre></td></tr></table></figure>

<p>测试nginx（运行了sudo service nginx start看能否访问那个服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service nginx start</span><br><span class="line">sudo service nginx stop</span><br></pre></td></tr></table></figure>

<h2 id="安装-FFmpeg"><a href="#安装-FFmpeg" class="headerlink" title="安装 FFmpeg"></a>安装 FFmpeg</h2><p>添加 FFmpeg PPA（Personal Package Archives）.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:kirillshkrogalev/ffmpeg-next</span><br><span class="line">Update the package lists.</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>安装 FFmpeg.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ffmpeg</span><br></pre></td></tr></table></figure>

<h2 id="修改-Nginx-RTMP-和-FFmpeg-配置文件"><a href="#修改-Nginx-RTMP-和-FFmpeg-配置文件" class="headerlink" title="修改 Nginx-RTMP 和 FFmpeg 配置文件"></a>修改 <code>Nginx-RTMP</code> 和 <code>FFmpeg</code> 配置文件</h2><p>打开<code>Nginx</code>配置文件（这里vi或者vim都可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>

<p>在末尾复制粘贴以下信息</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">rtmp &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">            listen 1935;</span><br><span class="line">            chunk_size 4096;</span><br><span class="line"></span><br><span class="line">            application live &#123;</span><br><span class="line">                    live on;</span><br><span class="line">                    record off;</span><br><span class="line">                    exec ffmpeg -i rtmp://localhost/live/$name -threads 1 -c:v libx264 -profile:v baseline -b:v 350K -s 640x360 -f flv -c:a aac -ac 1 -strict -2 -b:a 56k rtmp://localhost/live360p/$name;</span><br><span class="line">            &#125;</span><br><span class="line">            application live360p &#123;</span><br><span class="line">                    live on;</span><br><span class="line">                    record off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后    </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>

<p>这时候就配置好了。</p>
<p>iOS同学可以用 <a href="https://github.com/LaiFengiOS/LFLiveKit" target="_blank" rel="noopener">https://github.com/LaiFengiOS/LFLiveKit</a> 来测试，如果配置成功可直接连上。</p>
<blockquote>
<p>需要修改<code>LFLivePreview.m</code>的第364行：@”rtmp://&lt;服务器IP&gt;:1935/live/test”， test 那里可以随意取名字.      </p>
<p><code>rtmp://138.68.7.200:1935/live/test</code> 这是我自己配置的服务器，我已经确定可以使用了</p>
</blockquote>
<blockquote>
<p>参考自 <a href="https://www.vultr.com/docs/setup-nginx-rtmp-on-ubuntu-14-04" target="_blank" rel="noopener">https://www.vultr.com/docs/setup-nginx-rtmp-on-ubuntu-14-04</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftyJSON</title>
    <url>/2015/10/27/SwiftyJSON/</url>
    <content><![CDATA[<p><a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="noopener">SwiftyJSON</a>是用swift写的一款处理JSON数据的库。我个人觉得非常好用～</p>
<p>为什么好用呢？借用下作者的例子：以前，我们需要向下面这样处理JSON数据，来得到一个人的名字：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="type">JSONObject</span>: <span class="type">AnyObject?</span> = <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(data, options: <span class="literal">nil</span>, error: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> statusesArray = <span class="type">JSONObject</span> <span class="keyword">as</span>? [<span class="type">AnyObject</span>],</span><br><span class="line">   <span class="keyword">let</span> status = statusesArray[<span class="number">0</span>] <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">AnyObject</span>],</span><br><span class="line">   <span class="keyword">let</span> user = status[<span class="string">"user"</span>] <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">AnyObject</span>],</span><br><span class="line">   <span class="keyword">let</span> username = user[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span> &#123;</span><br><span class="line">    <span class="comment">// Finally we got the username</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很不优雅……</p>
<p>但是用了SwiftJSON之后这样就可以得到了</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = <span class="type">JSON</span>(data: dataFromNetworking)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> userName = json[<span class="number">0</span>][<span class="string">"user"</span>][<span class="string">"name"</span>].string&#123;</span><br><span class="line">  <span class="comment">//Now you got your value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而且随便玩，完全不用担心程序崩溃。如果数组访问越界或者数据不存在它自动返回<code>nil</code></p>
<a id="more"></a>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = <span class="type">JSON</span>(data: dataFromNetworking)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> userName = json[<span class="number">999999</span>][<span class="string">"wrong_key"</span>][<span class="string">"wrong_name"</span>].string&#123;</span><br><span class="line">    <span class="comment">//Calm down, take it easy, the ".string" property still produces the correct Optional String type with safety</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//Print the error</span></span><br><span class="line">    <span class="built_in">println</span>(json[<span class="number">999999</span>][<span class="string">"wrong_key"</span>][<span class="string">"wrong_name"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>CocoaPods</strong></p>
<p>将下面这个加到你的<code>Podfile</code>里面：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod <span class="string">"SwiftyJSON"</span>, <span class="string">"&gt;= 2.2"</span></span><br></pre></td></tr></table></figure>

<p><strong>Carthage</strong></p>
<p>将下面这个加到你的<code>Cartfile</code>里面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github &quot;SwiftyJSON&#x2F;SwiftyJSON&quot; &gt;&#x3D; 2.2</span><br></pre></td></tr></table></figure>

<p><strong>手动安装</strong></p>
<p>直接将<code>SwiftyJSON.swift</code>拖到工程文件里面</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>初始化</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> json = <span class="type">JSON</span>(data: dataFromNetworking)</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> json = <span class="type">JSON</span>(jsonObject)</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> dataFromString = jsonString.dataUsingEncoding(<span class="type">NSUTF8StringEncoding</span>, allowLossyConversion: <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> json = <span class="type">JSON</span>(data: dataFromString)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取各种数据</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//NSNumber</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> id = json[<span class="string">"user"</span>][<span class="string">"favourites_count"</span>].number &#123;</span><br><span class="line">   <span class="comment">//Do something you want</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//Print the error</span></span><br><span class="line">   <span class="built_in">println</span>(json[<span class="string">"user"</span>][<span class="string">"favourites_count"</span>].error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//String</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> id = json[<span class="string">"user"</span>][<span class="string">"name"</span>].string &#123;</span><br><span class="line">   <span class="comment">//Do something you want</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//Print the error</span></span><br><span class="line">   <span class="built_in">println</span>(json[<span class="string">"user"</span>][<span class="string">"name"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Bool</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> id = json[<span class="string">"user"</span>][<span class="string">"is_translator"</span>].bool &#123;</span><br><span class="line">   <span class="comment">//Do something you want</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//Print the error</span></span><br><span class="line">   <span class="built_in">println</span>(json[<span class="string">"user"</span>][<span class="string">"is_translator"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Int</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> id = json[<span class="string">"user"</span>][<span class="string">"id"</span>].int &#123;</span><br><span class="line">   <span class="comment">//Do something you want</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//Print the error</span></span><br><span class="line">   <span class="built_in">println</span>(json[<span class="string">"user"</span>][<span class="string">"id"</span>])</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>或者用<code>xxxValue</code>，如果不确定数据格式的话。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//If not a Number or nil, return 0</span></span><br><span class="line"><span class="keyword">let</span> id: <span class="type">Int</span> = json[<span class="string">"id"</span>].intValue</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//If not a String or nil, return ""</span></span><br><span class="line"><span class="keyword">let</span> name: <span class="type">String</span> = json[<span class="string">"name"</span>].stringValue</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//If not a Array or nil, return []</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="type">Array</span>&lt;<span class="type">JSON</span>&gt; = json[<span class="string">"list"</span>].arrayValue</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//If not a Dictionary or nil, return [:]</span></span><br><span class="line"><span class="keyword">let</span> user: <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">JSON</span>&gt; = json[<span class="string">"user"</span>].dictionaryValue</span><br></pre></td></tr></table></figure>



<p>循环访问数据</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//If json is .Dictionary</span></span><br><span class="line"><span class="keyword">for</span> (key: <span class="type">String</span>, subJson: <span class="type">JSON</span>) <span class="keyword">in</span> json &#123;</span><br><span class="line">   <span class="comment">//Do something you want</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>在<a href="http://caoyudong.com/2015/10/27/Alamofire/">Alamofire</a>里面使用SwiftyJSON</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">GET</span>, url, parameters: parameters)</span><br><span class="line">  .responseJSON &#123; (req, res, json, error) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span>(error != <span class="literal">nil</span>) &#123;</span><br><span class="line">      <span class="type">NSLog</span>(<span class="string">"Error: \(error)"</span>)</span><br><span class="line">      <span class="built_in">println</span>(req)</span><br><span class="line">      <span class="built_in">println</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="type">NSLog</span>(<span class="string">"Success: \(url)"</span>)</span><br><span class="line">      <span class="keyword">var</span> json = <span class="type">JSON</span>(json!)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>介于swift一直在升级，很多东西会经常变动。这篇文档也可能过一段时间就过时了，有问题可以到<a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="noopener">SwiftyJSON</a>里面提下issue，我也会经常来更新下博客的～</p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>UIAlertController</title>
    <url>/2015/08/10/UIAlertController/</url>
    <content><![CDATA[<p>ios8新推出了一个东西叫<code>UIAlertController</code>，用来代替以前的<code>UIAlertView</code>和<code>UIActionSheet</code>。 </p>
<p> 以前UIAlertView和UIActionSheet是<a href="http://caoyudong.com/2015/07/28/UIAlertView%E5%92%8CUIActionSheet/">这样用的</a></p>
<p>但是现在不管是UIAlertView还是UIActionSheet，都要通过UIAlertController来实现。<em>（当然以前的UIAlerView和UIActionSheet都还可以用，如果只需要支持IOS8以上点机型可以放心大胆的用UIAlertController。）</em></p>
<a id="more"></a>


<p>首先要声明一个<code>UIAlertController</code>：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="built_in">UIAlertController</span> *alertController = <span class="literal">nil</span>；</span><br></pre></td></tr></table></figure>

<p>然后初始化，如果需要<code>UIAlertView</code>的效果就初始化为：<code>UIAlertControllerStyleAlert</code>；如果需要<code>UIActionSheet</code>的效果就初始化为：<code>UIAlertControllerStyleActionSheet</code></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//UIAlertView效果初始化</span></span><br><span class="line">alertController = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"Title"</span> message:<span class="string">@"message"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//UIActionSheet效果初始化</span></span><br><span class="line">alertController = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"Title"</span> message:<span class="string">@"message"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleActionSheet</span>];</span><br></pre></td></tr></table></figure>

<p>然后以前添加button的各种函数全都没有了，改成了添加action，每一个action对应一个button。</p>
<p>每个UIAlertAction都带有一个handler，可以通过block处理点击事件。以前是用代理，现在不用了，感觉更科学了。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  UIAlertAction 表示一个按钮，同时，这个按钮带有处理事件的block</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">UIAlertAction</span> *action = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"取消"</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:^(<span class="built_in">UIAlertAction</span> *action) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"点击取消"</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">    [alertController addAction:action];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  添加需要谨慎操作的按钮，文字默认是红色的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    [alertController addAction:(&#123;</span><br><span class="line">        <span class="built_in">UIAlertAction</span> *action = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"谨慎操作的按钮"</span> style:<span class="built_in">UIAlertActionStyleDestructive</span> handler:^(<span class="built_in">UIAlertAction</span> *action) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"谨慎操作的按钮"</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        action;</span><br><span class="line">    &#125;)];</span><br></pre></td></tr></table></figure>

<p>如果要添加输入框要先做个判断，actionSheet是没有办法添加的，强行添加会崩溃</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  添加输入框到alertView中，注意，actionSheet是没有办法添加textField的，强行添加会Crash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (alertController.preferredStyle == <span class="built_in">UIAlertControllerStyleAlert</span>) &#123;</span><br><span class="line">        <span class="comment">// 添加用户名输入框</span></span><br><span class="line">        [alertController addTextFieldWithConfigurationHandler:^(<span class="built_in">UITextField</span> *textField) &#123;</span><br><span class="line">            <span class="comment">// 给输入框设置一些信息</span></span><br><span class="line">            textField.placeholder = <span class="string">@"请输入用户名"</span>;</span><br><span class="line">            textField.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="comment">// 添加密码输入框</span></span><br><span class="line">        [alertController addTextFieldWithConfigurationHandler:^(<span class="built_in">UITextField</span> *textField) &#123;</span><br><span class="line">            textField.placeholder = <span class="string">@"请输入密码"</span>;</span><br><span class="line">            textField.secureTextEntry = <span class="literal">YES</span>;</span><br><span class="line">            textField.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最后显示</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">[<span class="keyword">self</span> presentViewController:alertController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>


<h2 id="actionSheet在iPad上崩溃问题"><a href="#actionSheet在iPad上崩溃问题" class="headerlink" title="actionSheet在iPad上崩溃问题"></a>actionSheet在iPad上崩溃问题</h2><p>昨天试了下，在iPhone上actionSheet可以很流畅的运行，但是在iPad上运行就会崩溃，报这个错误：</p>
<ul>
<li>Terminating app due to uncaught exception ‘NSGenericException’, reason: ‘Your application has presented a UIAlertController (&lt;UIAlertController: 0x7f9831f2a690&gt;) of style UIAlertControllerStyleActionSheet. The modalPresentationStyle of a UIAlertController with this style is UIModalPresentationPopover. You must provide location information for this popover through the alert controller’s popoverPresentationController. You must provide either a sourceView and sourceRect or a barButtonItem.  If this information is not known when you present the alert controller, you may provide it in the UIPopoverPresentationControllerDelegate method -prepareForPopoverPresentation.’</li>
</ul>
<p>看得我云里雾里，里面这些controller好像闻所未闻……后来在stackoverflow上找到了解决方案，只需要加一段代码，申明一个<code>UIPopoverPresentationController</code>就可以了：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"> 	<span class="built_in">UIAlertController</span> *alertController = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"Title"</span> message:<span class="string">@"message"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleActionSheet</span>];</span><br><span class="line">    <span class="built_in">UIPopoverPresentationController</span> *popoverController = alertController.popoverPresentationController;</span><br><span class="line">    popoverController.sourceView = sender;</span><br><span class="line">    popoverController.sourceRect = [sender bounds];</span><br><span class="line">    [<span class="keyword">self</span> presentViewController:alertController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>

<p>如果你的按钮是个barButton要用下面这段代码👇</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="built_in">UIAlertController</span> *alertController = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"Title"</span> message:<span class="string">@"message"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleActionSheet</span>];</span><br><span class="line"><span class="built_in">UIPopoverPresentationController</span> *popoverController = alertController.popoverPresentationController;</span><br><span class="line">popoverController.barButtonItem = sender</span><br><span class="line">[<span class="keyword">self</span> presentViewController:alertController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-10/47061500.jpg" alt="actionSheet on iPad"></p>
<h2 id="如何在actionSheet上加一个UIPickerView"><a href="#如何在actionSheet上加一个UIPickerView" class="headerlink" title="如何在actionSheet上加一个UIPickerView"></a>如何在actionSheet上加一个UIPickerView</h2><p>我在某论坛看到过苹果似乎不建议这么做，但是我还是本着<em>生命在于折腾</em>人生信条折腾了一个：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">	<span class="built_in">UIAlertController</span> *alertController = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"\n\n\n\n\n\n\n\n\n\n\n"</span> message:<span class="literal">nil</span> preferredStyle:<span class="built_in">UIAlertControllerStyleActionSheet</span>];</span><br><span class="line">    <span class="built_in">UIDatePicker</span> *picker = [[<span class="built_in">UIDatePicker</span> alloc] init];</span><br><span class="line">    [picker setDatePickerMode:<span class="built_in">UIDatePickerModeDate</span>];</span><br><span class="line">    [alertController.view addSubview:picker];</span><br><span class="line">    [alertController addAction:(&#123;</span><br><span class="line">        <span class="built_in">UIAlertAction</span> *action = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"OK"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> *action) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"OK"</span>);</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,picker.date);</span><br><span class="line">        &#125;];</span><br><span class="line">        action;</span><br><span class="line">    &#125;)];</span><br><span class="line">    <span class="built_in">UIPopoverPresentationController</span> *popoverController = alertController.popoverPresentationController;</span><br><span class="line">    popoverController.sourceView = sender;</span><br><span class="line">    popoverController.sourceRect = [sender bounds];</span><br><span class="line">    [<span class="keyword">self</span> presentViewController:alertController  animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>

<p>苹果并不建议在ActionSheet里面添加UIPickerView，所以才会写出如此诡异的代码……这么写是为了流出足够的面积来放pickerView。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="built_in">UIAlertController</span> *alertController = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"\n\n\n\n\n\n\n\n\n\n\n"</span> </span><br><span class="line">message:<span class="literal">nil</span> preferredStyle:<span class="built_in">UIAlertControllerStyleActionSheet</span>];</span><br></pre></td></tr></table></figure>


<p>效果图：<br><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-10/57494645.jpg"></p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>UIAlertView和UIActionSheet</title>
    <url>/2015/07/28/UIAlertView%E5%92%8CUIActionSheet/</url>
    <content><![CDATA[<p>IOS提示框大概有两种方法，一个是UIAlertView另一个是UIActionsheet。</p>
<a id="more"></a>

<h2 id="UIAlertView"><a href="#UIAlertView" class="headerlink" title="UIAlertView:"></a>UIAlertView:</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showAlertView</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> alert = <span class="type">UIAlertView</span>()</span><br><span class="line">        alert.title = <span class="string">"Title"</span></span><br><span class="line">        alert.message = <span class="string">"message"</span></span><br><span class="line">        <span class="comment">//设置代理</span></span><br><span class="line">        alert.delegate = <span class="keyword">self</span></span><br><span class="line">        alert.addButtonWithTitle(<span class="string">"canel"</span>)</span><br><span class="line">        alert.addButtonWithTitle(<span class="string">"OK"</span>)</span><br><span class="line">        alert.cancelButtonIndex = <span class="number">0</span></span><br><span class="line">        alert.show()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">- (<span class="keyword">void</span>)showAlerView&#123;</span><br><span class="line">    <span class="built_in">UIAlertView</span> *alert = [[<span class="built_in">UIAlertView</span> alloc] init];</span><br><span class="line">    alert.title = <span class="string">@"Title"</span>;</span><br><span class="line">    alert.message = <span class="string">@"message"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">///设置代理</span></span><br><span class="line">    alert.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [alert addButtonWithTitle:<span class="string">@"cancel"</span>];</span><br><span class="line">    [alert addButtonWithTitle:<span class="string">@"OK"</span>];</span><br><span class="line">    alert.cancelButtonIndex = <span class="number">0</span>;</span><br><span class="line">    [alert show];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-7-28/81705118.jpg" alt="UIAlertView"></p>
<p>设置delegate需要在class后面加UIActionSheetDelegate</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> ,<span class="title">UIAlertViewDelegate</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> : <span class="title">UIViewController</span>&lt;<span class="title">UIAlertViewDelegate</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后通过这个函数检测用户点击了哪个button</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    UIAlerViewDelegate</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    :param: alertView   包含所点击按钮的alert view.</span></span><br><span class="line"><span class="comment">    :param: buttonIndex 所点击的按钮在该alert view中的索引号（index），索引号从0开始</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">alertView</span><span class="params">(alertView: UIAlertView, clickedButtonAtIndex buttonIndex: Int)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param alertView   包含所点击按钮的alert view.</span></span><br><span class="line"><span class="comment"> *  @param buttonIndex 所点击的按钮在该alert view中的索引号（index），索引号从0开始</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) alertView:(<span class="built_in">UIAlertView</span> *)alertView clickedButtonAtIndex:(<span class="built_in">NSInteger</span>)buttonIndex&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,(<span class="keyword">long</span>)buttonIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="UIActionSheet"><a href="#UIActionSheet" class="headerlink" title="UIActionSheet:"></a>UIActionSheet:</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showActionSheet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> actionSheet = <span class="type">UIActionSheet</span>()</span><br><span class="line">        <span class="comment">//设置代理</span></span><br><span class="line">        actionSheet.delegate = <span class="keyword">self</span></span><br><span class="line">        actionSheet.title = <span class="string">"Title"</span></span><br><span class="line">        actionSheet.addButtonWithTitle(<span class="string">"cancel"</span>)</span><br><span class="line">        actionSheet.addButtonWithTitle(<span class="string">"Action1"</span>)</span><br><span class="line">        actionSheet.addButtonWithTitle(<span class="string">"destructiveButton"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">///让destructiveButton变为红色,"destructiveButtonIndex"</span></span><br><span class="line">        actionSheet.destructiveButtonIndex = <span class="number">2</span></span><br><span class="line">        actionSheet.cancelButtonIndex = <span class="number">0</span></span><br><span class="line">        actionSheet.showInView(barButton, animated: <span class="literal">true</span>)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">- (<span class="keyword">void</span>)showActionSheet&#123;</span><br><span class="line">    <span class="built_in">UIActionSheet</span> *actionSheet = [[<span class="built_in">UIActionSheet</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">///设置代理</span></span><br><span class="line">    actionSheet.delegate = <span class="keyword">self</span>;</span><br><span class="line">    actionSheet.title = <span class="string">@"Title"</span>;</span><br><span class="line">    [actionSheet addButtonWithTitle:<span class="string">@"cancel"</span>];</span><br><span class="line">    [actionSheet addButtonWithTitle:<span class="string">@"Action1"</span>];</span><br><span class="line">    [actionSheet addButtonWithTitle:<span class="string">@"destructiveButton"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">///让destructiveButton变为红色,"destructiveButtonIndex"</span></span><br><span class="line">    actionSheet.destructiveButtonIndex = <span class="number">2</span>;</span><br><span class="line">    actionSheet.cancelButtonIndex = <span class="number">0</span>;</span><br><span class="line">    [actionSheet showInView:<span class="keyword">self</span>.view];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-7-28/93972059.jpg"><br>上面那个<code>Title</code>是通过这行代码加上去的，实在恶心……</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line">actionSheet.title = <span class="string">"Title"</span></span><br></pre></td></tr></table></figure>
<p>一般我不用……仔细一想我好像从来没用过～</p>
<p>设置delegate需要在class后面加UIActionSheetDelegate</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> ,<span class="title">UIActionSheetDelegate</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> : <span class="title">UIViewController</span>&lt;<span class="title">UIActionSheetDelegate</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后通过这个函数检测用户点击了哪个button</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    :param: actionSheet 包含所点击按钮的action sheet.</span></span><br><span class="line"><span class="comment">    :param: buttonIndex 所点击的按钮在该action sheet中的索引号（index），索引号从0开始</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">actionSheet</span><span class="params">(actionSheet: UIActionSheet, clickedButtonAtIndex buttonIndex: Int)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param actionSheet 包含所点击按钮的action sheet.</span></span><br><span class="line"><span class="comment"> *  @param buttonIndex 所点击的按钮在该action sheet中的索引号（index），索引号从0开始</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-(<span class="keyword">void</span>)actionSheet:(<span class="built_in">UIActionSheet</span> *)actionSheet clickedButtonAtIndex:(<span class="built_in">NSInteger</span>)buttonIndex&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过IOS8之后苹果又新出了个叫做<a href="">UIAlertController</a>的东西统一了UIAlertView和UIActionSheet。</p>
<blockquote>
<p>写到现在终于写了一篇我自己稍微知道点的东西了😂，想写点东西怎么就那么难……</p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>UIColor的使用</title>
    <url>/2015/08/01/UIColor%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>一般定义一个控件或者一个view的颜色可以这样：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="keyword">self</span>.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br></pre></td></tr></table></figure>
<p>或者这样：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">[view setBackgroundColor:[<span class="built_in">UIColor</span> redColor]];</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>其中redColor是UIColor定义好的，直接用就好了。<br>另外UIColor定义过的还有这些：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIColor</span> blackColor</span><br><span class="line"><span class="built_in">UIColor</span> darkGrayColor</span><br><span class="line"><span class="built_in">UIColor</span> lightGrayColor</span><br><span class="line"><span class="built_in">UIColor</span> whiteColor</span><br><span class="line"><span class="built_in">UIColor</span> grayColor</span><br><span class="line"><span class="built_in">UIColor</span> redColor</span><br><span class="line"><span class="built_in">UIColor</span> greenColor</span><br><span class="line"><span class="built_in">UIColor</span> blueColor</span><br><span class="line"><span class="built_in">UIColor</span> cyanColor</span><br><span class="line"><span class="built_in">UIColor</span> yellowColor</span><br><span class="line"><span class="built_in">UIColor</span> magentaColor</span><br><span class="line"><span class="built_in">UIColor</span> orangeColor</span><br><span class="line"><span class="built_in">UIColor</span> purpleColor</span><br><span class="line"><span class="built_in">UIColor</span> brownColor</span><br><span class="line"><span class="built_in">UIColor</span> clearColor</span><br><span class="line"><span class="built_in">UIColor</span> lightTextColor</span><br><span class="line"><span class="built_in">UIColor</span> darkTextColor</span><br><span class="line"><span class="built_in">UIColor</span> groupTableViewBackgroundColor</span><br><span class="line"><span class="built_in">UIColor</span> viewFlipsideBackgroundColor</span><br><span class="line"><span class="built_in">UIColor</span> scrollViewTexturedBackgroundColor</span><br><span class="line"><span class="built_in">UIColor</span> underPageBackgroundColor</span><br></pre></td></tr></table></figure>

<p>如果要自己定义RGB就需要用到下面的方法：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="keyword">self</span>.backgroundColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">226.0</span>/<span class="number">255.0</span> green:<span class="number">231.0</span>/<span class="number">255.0</span> blue:<span class="number">237.0</span>/<span class="number">255.0</span> alpha:<span class="number">1.0</span>];</span><br></pre></td></tr></table></figure>
<p>其中alpha为透明度。。。</p>
<p>另外如果你发现设置了自定义的RGB控件颜色并没有变，一直都是白色，你可能犯了这个错（忘记除以255……）</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="keyword">self</span>.backgroundColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">226</span> green:<span class="number">231</span> blue:<span class="number">237</span> alpha:<span class="number">1.0</span>];</span><br></pre></td></tr></table></figure>

<p>虽然错误很低级，但是我还是被它折腾了一下午<img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-7-16/47607869.jpg"></p>
<p>然后顺便再说一个，如果你发现控件颜色一直是黑色，可能犯了这个错：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="keyword">self</span>.backgroundColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">226</span>/<span class="number">255</span> green:<span class="number">231</span>/<span class="number">255</span> blue:<span class="number">237</span>/<span class="number">255</span> alpha:<span class="number">1.0</span>];</span><br></pre></td></tr></table></figure>
<p>注意要除以 255.0 而不是255。因为int/int结果还是int，而它需要一个float值～</p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>UINavigationController背景图片在iPad或者iPhone6＋上位置不正确</title>
    <url>/2016/03/09/UINavigationController%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E5%9C%A8iPad%E6%88%96%E8%80%85iPhone6%EF%BC%8B%E4%B8%8A%E4%BD%8D%E7%BD%AE%E4%B8%8D%E6%AD%A3%E7%A1%AE/</url>
    <content><![CDATA[<p>之前调用了方法：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.navigationController.navigationBar setBackgroundImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"image_nav_bar"</span>]  forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br></pre></td></tr></table></figure>
<p> 后布局在iPhone 6 plus上看会变成这样<br><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-3-9/38501689.jpg"> </p>
<a id="more"></a>

<p>为了防止这种情况出现应该讲图片做一个拉伸，所以这个方法应该写错这样：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.navigationController.navigationBar setBackgroundImage:[[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"image_nav_bar"</span>] resizableImageWithCapInsets:<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) resizingMode:<span class="built_in">UIImageResizingModeStretch</span>] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br></pre></td></tr></table></figure>

<p>现在背景图片就可以正常显示了～</p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeError:undefined is not an object (evaluating context._currentValue = currentValue)</title>
    <url>/2018/09/21/TypeError-undefined-is-not-an-object-evaluating-context-currentValue-currentValue/</url>
    <content><![CDATA[<h2 id="修复-TypeError-undefined-is-not-an-object-evaluating-39-context-currentValue-currentValue-39-的报错"><a href="#修复-TypeError-undefined-is-not-an-object-evaluating-39-context-currentValue-currentValue-39-的报错" class="headerlink" title="修复 TypeError: undefined is not an object (evaluating &#39;context._currentValue = currentValue&#39;)的报错"></a>修复 <code>TypeError: undefined is not an object (evaluating &#39;context._currentValue = currentValue&#39;)</code>的报错</h2><p>把<code>package.js</code>里面<code>react</code> 和 <code>react-native</code> 改成以下版本：</p>
<blockquote>
<p>“react”: “16.3.1”<br>“react-native”: “^0.57.0”</p>
</blockquote>
<p><strong>之前是：”react”: “16.3.0-rc.0”</strong></p>
]]></content>
      <tags>
        <tag>React-Native</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode常用插件</title>
    <url>/2015/12/09/Xcode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="Alcatraz"><a href="#Alcatraz" class="headerlink" title="Alcatraz"></a>Alcatraz</h2><p><a href="https://github.com/alcatraz/Alcatraz" target="_blank" rel="noopener">https://github.com/alcatraz/Alcatraz</a></p>
<p>Alcatraz是Xcode下的一个包管理插件，其实就是一个“管理插件的插件”。</p>
<p>安装方法是在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://raw.github.com/alcatraz/Alcatraz/master/Scripts/install.sh | sh</span><br></pre></td></tr></table></figure>

<p>然后重启Xcode，选<code>Load Bundle</code>。**<em>重启最好点击<code>Xcode</code>-&gt;<code>Quit Xcode</code>，不然可能会没用**</em></p>
<p>就可以在<code>window</code>-&gt;<code>Package Manager</code>打开<code>Alcatraz</code>。图形化界面，傻瓜式操作。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-8/45987117.jpg"></p>
<p>安装好<code>Alcatraz</code>之后，就可以方便的安装其他插件了。</p>
<a id="more"></a>

<h2 id="Amoyly"><a href="#Amoyly" class="headerlink" title="Amoyly"></a>Amoyly</h2><p>颜色主题，我比较喜欢这个。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-9/89521912.jpg"></p>
<h2 id="VVDocumenter"><a href="#VVDocumenter" class="headerlink" title="VVDocumenter"></a>VVDocumenter</h2><p><a href="https://github.com/onevcat/VVDocumenter-Xcode" target="_blank" rel="noopener">https://github.com/onevcat/VVDocumenter-Xcode</a></p>
<p>文档规范注释工具。以前我从来不写注释，但是，自从用了VVDocumenter，我爱上了写注释。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-9/61665375.jpg"></p>
<h2 id="KSImageNamed-Xcode"><a href="#KSImageNamed-Xcode" class="headerlink" title="KSImageNamed-Xcode"></a>KSImageNamed-Xcode</h2><p><a href="https://github.com/ksuther/KSImageNamed-Xcode" target="_blank" rel="noopener">https://github.com/ksuther/KSImageNamed-Xcode</a></p>
<p>同时支持 Objective-C 和 Swift。再也不用担心图片名字写错了。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-9/29383573.jpg"></p>
<h2 id="SCXcodeMiniMap"><a href="#SCXcodeMiniMap" class="headerlink" title="SCXcodeMiniMap"></a>SCXcodeMiniMap</h2><p><a href="https://github.com/stefanceriu/SCXcodeMiniMap" target="_blank" rel="noopener">https://github.com/stefanceriu/SCXcodeMiniMap</a></p>
<p>可以在代码窗口左边产生一个小的代码预览窗口，就像sublime text那样。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-9/81320859.jpg"></p>
<h2 id="XAlign"><a href="#XAlign" class="headerlink" title="XAlign"></a>XAlign</h2><p><a href="https://github.com/qfish/XAlign" target="_blank" rel="noopener">https://github.com/qfish/XAlign</a></p>
<p>代码对齐工具，强迫症专用！！！</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-9/53783325.jpg"></p>
<h2 id="ColorSense-for-Xcode"><a href="#ColorSense-for-Xcode" class="headerlink" title="ColorSense-for-Xcode"></a>ColorSense-for-Xcode</h2><p><a href="https://github.com/omz/ColorSense-for-Xcode" target="_blank" rel="noopener">https://github.com/omz/ColorSense-for-Xcode</a></p>
<p>自动显示颜色（好像对我来说没什么用）</p>
<p>安装不能通过Alcatraz，需要下载之后在Xcode上运行，官网上有写</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-9/30754725.jpg"></p>
<h2 id="XActivatePowerMode"><a href="#XActivatePowerMode" class="headerlink" title="XActivatePowerMode"></a>XActivatePowerMode</h2><p><a href="https://github.com/qfish/XActivatePowerMode" target="_blank" rel="noopener">https://github.com/qfish/XActivatePowerMode</a></p>
<p>装逼神器，妹子在旁边的时候可以打开玩玩，但是用的时候会一卡一卡的……</p>
<p><img src="https://camo.githubusercontent.com/a25916ccc96abf4f949ae55a3fc8b0108ac578a8/687474703a2f2f3764396f30782e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f584163746976617465506f7765724d6f6465707265766965772e676966"></p>
]]></content>
      <tags>
        <tag>Mac</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo同时部署到Gitcafe和Github上</title>
    <url>/2015/11/02/hexo%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%88%B0Gitcafe%E5%92%8CGithub%E4%B8%8A/</url>
    <content><![CDATA[<p>推荐一个可以同时部署到Gitcafe和Github上的hexo插件——<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></p>
<a id="more"></a>

<h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><p>在hexo的目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><strong>之前需要配置好Github和Gitcafe!!</strong></p>
<p>在<code>_config.yml</code>中，deploy部分改为</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">Site</span> <span class="string">updated</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:cydjohn/cydjohn.github.io.git,master</span></span><br><span class="line">    <span class="attr">gitcafe:</span> <span class="string">git@gitcafe.com:caoyudong/caoyudong.git,gitcafe-pages</span></span><br></pre></td></tr></table></figure>

<p>然后就可以同时部署到两个地方了。</p>
<hr>
<blockquote>
<p>dns可以修改一下，国外的指向Github，国内的Gitcafe，这样速度会很快</p>
</blockquote>
<blockquote>
<p>虽然并没有什么人看我博客……</p>
</blockquote>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>dataGridView导出excel</title>
    <url>/2015/09/29/dataGridView%E5%AF%BC%E5%87%BAexcel/</url>
    <content><![CDATA[<h2 id="非正常方法，简单暴力"><a href="#非正常方法，简单暴力" class="headerlink" title="非正常方法，简单暴力"></a>非正常方法，简单暴力</h2><p>使用这个函数即可（当然严格意义上来说导出的根本不是excel，只是用excel打开没问题……）</p>
<a id="more"></a>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line">   		 <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 导出excel</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="dGV"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="filename"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ToCsV</span>(<span class="params">DataGridView dGV, <span class="keyword">string</span> filename</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">string</span> stOutput = <span class="string">""</span>;</span><br><span class="line">            <span class="comment">// Export titles:</span></span><br><span class="line">            <span class="keyword">string</span> sHeaders = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dGV.Columns.Count; j++)</span><br><span class="line">                sHeaders = sHeaders.ToString() + Convert.ToString(dGV.Columns[j].HeaderText) + <span class="string">"\t"</span>;</span><br><span class="line">            stOutput += sHeaders + <span class="string">"\r\n"</span>;</span><br><span class="line">            <span class="comment">// Export data.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dGV.RowCount - <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">string</span> stLine = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dGV.Rows[i].Cells.Count; j++)</span><br><span class="line">                    stLine = stLine.ToString() + Convert.ToString(dGV.Rows[i].Cells[j].Value) + <span class="string">"\t"</span>;</span><br><span class="line">                stOutput += stLine + <span class="string">"\r\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Encoding utf16 = Encoding.GetEncoding(<span class="string">"gb2312"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] output = utf16.GetBytes(stOutput);</span><br><span class="line">            FileStream fs = <span class="keyword">new</span> FileStream(filename, FileMode.Create);</span><br><span class="line">            BinaryWriter bw = <span class="keyword">new</span> BinaryWriter(fs);</span><br><span class="line">            bw.Write(output, <span class="number">0</span>, output.Length); <span class="comment">//write the encoded file</span></span><br><span class="line">            bw.Flush();</span><br><span class="line">            bw.Close();</span><br><span class="line">            fs.Close();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>然后在要保存的地方调用下面这堆东西就可以了</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line"> <span class="comment">//导出excel</span></span><br><span class="line">SaveFileDialog sfd = <span class="keyword">new</span> SaveFileDialog();</span><br><span class="line">sfd.Filter = <span class="string">"Excel Documents (*.xls)|*.xls"</span>;</span><br><span class="line">sfd.FileName = <span class="string">"export.xls"</span>;</span><br><span class="line"><span class="keyword">if</span> (sfd.ShowDialog() == DialogResult.OK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//ToCsV(dataGridView1, @"c:\export.xls");</span></span><br><span class="line">ToCsV(<span class="keyword">this</span>.parameter_grid, sfd.FileName); <span class="comment">// Here dataGridview1 is your grid view name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="正常方法"><a href="#正常方法" class="headerlink" title="正常方法"></a>正常方法</h2><h3 id="微软原生Excel库"><a href="#微软原生Excel库" class="headerlink" title="微软原生Excel库"></a>微软原生Excel库</h3><p><em>一个是使用office原生接口，但是这种方法要求太高。如果用户的电脑上没有安装对于版本的office Excel或者用户装了盗版的office都不能使用。。所以这种方法并没有什么卵用。。。</em></p>
<p><strong>但是！！</strong>现在有了一种新的方法，不管用户的电脑上有没有装excel，装了哪个版本的excel，都可以完美的导出excel表格，这个方法就是使用一款神奇的第三方库—<strong><em>NPOI</em></strong></p>
<h3 id="NPOI"><a href="#NPOI" class="headerlink" title="NPOI"></a>NPOI</h3><p><a href="">NPOI具体使用方法点这里</a>这里就不详细说了，简单说下怎么用。</p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>首先到<a href="http://npoi.codeplex.com/" target="_blank" rel="noopener">http://npoi.codeplex.com/</a>官网上下载NPOI的<code>dll</code>，有<code>2</code>和<code>4</code>两个不同版本的<code>dll</code>，分别对应不同的.NET版本，我在自己的项目中使用了<code>4</code>版本的.NET。</p>
<h4 id="添加引用"><a href="#添加引用" class="headerlink" title="添加引用"></a>添加引用</h4><p>右键项目 -&gt;<code>添加</code>-&gt;<code>引用</code>,如图</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-4-10/70924586.jpg"></p>
<p>然后点击<code>浏览</code>，把刚才下载好的<code>dll</code>选中添加到项目中**<em>（建议把<code>dll</code>文件夹直接放倒项目根目录下）**</em></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-4-10/28167142.jpg"></p>
<h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 导出excel</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="dt"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="filePath"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteExcel</span>(<span class="params">DataGridView dt, <span class="keyword">string</span> filePath</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(filePath) &amp;&amp; <span class="literal">null</span> != dt &amp;&amp; dt.Rows.Count &gt; <span class="number">0</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               NPOI.HSSF.UserModel.HSSFWorkbook book = <span class="keyword">new</span> NPOI.HSSF.UserModel.HSSFWorkbook();</span><br><span class="line">               NPOI.SS.UserModel.ISheet sheet = book.CreateSheet(<span class="string">"export"</span>);</span><br><span class="line"></span><br><span class="line">               NPOI.SS.UserModel.IRow row = sheet.CreateRow(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dt.Columns.Count; i++)</span><br><span class="line">               &#123;</span><br><span class="line">                   row.CreateCell(i).SetCellValue(dt.Columns[i].HeaderText);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dt.Rows.Count; i++)</span><br><span class="line">               &#123;</span><br><span class="line">                   NPOI.SS.UserModel.IRow row2 = sheet.CreateRow(i + <span class="number">1</span>);</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dt.Columns.Count; j++)</span><br><span class="line">                   &#123;</span><br><span class="line">                       row2.CreateCell(j).SetCellValue(Convert.ToString(dt.Rows[i].Cells[j].Value));</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 写入到客户端  </span></span><br><span class="line">               <span class="keyword">using</span> (System.IO.MemoryStream ms = <span class="keyword">new</span> System.IO.MemoryStream())</span><br><span class="line">               &#123;</span><br><span class="line">                   book.Write(ms);</span><br><span class="line">                   <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(filePath, FileMode.Create, FileAccess.Write))</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="keyword">byte</span>[] data = ms.ToArray();</span><br><span class="line">                       fs.Write(data, <span class="number">0</span>, data.Length);</span><br><span class="line">                       fs.Flush();</span><br><span class="line">                   &#125;</span><br><span class="line">                   book = <span class="literal">null</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>通过调用<code>saveFileDialog</code>就可以导出excel了，完美解决～</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导出excel</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button_excel_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            SaveFileDialog sfd = <span class="keyword">new</span> SaveFileDialog();</span><br><span class="line">            sfd.Filter = <span class="string">"Excel Documents (*.xls)|*.xls"</span>;</span><br><span class="line">            sfd.FileName = <span class="string">"export.xls"</span>;</span><br><span class="line">            <span class="keyword">if</span> (sfd.ShowDialog() == DialogResult.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.WriteExcel(<span class="keyword">this</span>.site_grid, sfd.FileName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>








]]></content>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加百度统计</title>
    <url>/2015/09/16/hexo%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="litten的主题yilia"><a href="#litten的主题yilia" class="headerlink" title="litten的主题yilia"></a>litten的主题yilia</h2><ul>
<li>编辑文件 <code>themes/yilia/_config.yml</code> ,添加一行配置，可以删除原来的google analytics</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">baidu_tongji: true</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ul>
<li>新建 <code>themes/yilia/layout/_partial/baidu_tongji.ejs</code> 内容如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.baidu_tongji) &#123; %&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">#申请的百度统计代码</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编辑<code>themes/yilia/layout/_partial/head.ejs</code> 在 <code>&lt;/head&gt;</code> 前添加</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;%- partial(<span class="string">"baidu_tongji"</span>) %&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>重新生产部署站点即可。</li>
</ul>
<h2 id="Light主题"><a href="#Light主题" class="headerlink" title="Light主题"></a>Light主题</h2><ul>
<li>编辑文件 <code>themes/light/_config.yml</code> ,添加一行配置，可以删除原来的google analytics</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">baidu_tongji: true</span><br></pre></td></tr></table></figure>

<ul>
<li>新建 <code>themes/light/layout/_partial/baidu_analytics.ejs</code> 内容如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.baidu_tongji) &#123; %&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">#申请的百度统计代码</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编辑<code>themes/light/layout/_partial/head.ejs</code> 在 <code>&lt;/head&gt;</code> 前添加</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;%- partial(<span class="string">"baidu_tongji"</span>) %&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>重新生产部署站点即可。</li>
</ul>
<blockquote>
<p>其他主题应该都一样吧～我猜的因为我也没试过……<br>不过前段时间出了那件事……Github不能访问……貌似跟这段js有点关系。具体我也不知道，反正我现在开始用腾讯统计了。</p>
</blockquote>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04上使用Nginx部署Laravel应用程序</title>
    <url>/2019/05/21/Ubuntu16-04%E4%B8%8A%E4%BD%BF%E7%94%A8Nginx%E9%83%A8%E7%BD%B2Laravel%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>Laravel 是一个非常流行的PHP框架，以编码风格优雅著称，每行代码都非常简洁，富有表达力，并且拥有强大的组件开发生态，号称为web艺术家创造的PHP框架。我最近的个人项目尝试了下Laravel框架，部署的的时候遇到了一些坑，这里记录下。</p>
<p>我用的服务器是DigitalOcean的Ubuntu 16.04 LTS，其他公司的服务器应该也大同小异，有一些公司甚至简化了安装流程，几乎不用改动配置文件就可以让自己的程序跑起来（比如阿里云</p>
<a id="more"></a>

<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><h3 id="更新apt-get"><a href="#更新apt-get" class="headerlink" title="更新apt-get"></a>更新apt-get</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h3 id="安装-php7-0"><a href="#安装-php7-0" class="headerlink" title="安装 php7.0"></a>安装 php7.0</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install php7.0-mbstring php7.0-fpm php7.0-xml composer unzip</span><br></pre></td></tr></table></figure>

<h2 id="配置MySql"><a href="#配置MySql" class="headerlink" title="配置MySql"></a>配置MySql</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure>


<p>安装期间会提示你设置新的密码，一定要记住了。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>登录MySQL root 账号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>然后创建一个名为 laravel 的数据库，数据库可以是别的名字：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> laravel <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_unicode_ci;</span><br></pre></td></tr></table></figure>

<p>然后再创建一个允许访问这个数据库的用户，这里使用 laraveluser 作为用户名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> laravel.* <span class="keyword">TO</span> <span class="string">'laraveluser'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure>

<p>刷新权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure>

<p>退出</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXIT;</span><br></pre></td></tr></table></figure>

<h3 id="安装-pdo-mysql"><a href="#安装-pdo-mysql" class="headerlink" title="安装 pdo_mysql"></a>安装 pdo_mysql</h3><p>pdo_mysql 是php需要用到的mysql的驱动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install php7.0-mysql</span><br></pre></td></tr></table></figure>


<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure>

<h2 id="安装-laravel"><a href="#安装-laravel" class="headerlink" title="安装 laravel"></a>安装 laravel</h2><p>这里使用laravel 发布在GitHub 上的演示程序 QuickStart 来作为例子。</p>
<p>先在nginx目录下创建一个叫quickstart的文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /var/www/html/quickstart</span><br></pre></td></tr></table></figure>

<p>然后到新目录将项目git clone 下来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html/quickstart</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/laravel/quickstart-basic .</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意 git clone 最后有个点</p>
</blockquote>
<p>然后安装laravel的依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer install</span><br></pre></td></tr></table></figure>

<h2 id="配置-env"><a href="#配置-env" class="headerlink" title="配置 .env"></a>配置 .env</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .env</span><br></pre></td></tr></table></figure>

<p>修改数据库字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">APP_ENV&#x3D;local</span><br><span class="line">APP_DEBUG&#x3D;true</span><br><span class="line">APP_KEY&#x3D;b809vCwvtawRbsG0BmP1tWgnlXQfdsaw</span><br><span class="line">APP_URL&#x3D;http:&#x2F;&#x2F;localhost</span><br><span class="line"></span><br><span class="line">DB_HOST&#x3D;127.0.0.1</span><br><span class="line">DB_DATABASE&#x3D;laravel</span><br><span class="line">DB_USERNAME&#x3D;laraveluser</span><br><span class="line">DB_PASSWORD&#x3D;password</span><br></pre></td></tr></table></figure>

<p>保存，退出</p>
<p>迁移数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan migrate</span><br></pre></td></tr></table></figure>

<h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><p>将storage和bootstrap/cache目录的组所有权更改为www-data， 因为服务器需要向这两个文件夹里面写东西</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chgrp -R www-data storage bootstrap/cache</span><br><span class="line">sudo chmod -R ug+rwx storage bootstrap/cache</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        listen [::]:80;</span><br><span class="line">        root /var/www/html/quickstart/public;</span><br><span class="line"></span><br><span class="line">        # Add index.php to the list if you are using PHP</span><br><span class="line">        index index.php index.html index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        server_name _;</span><br><span class="line">                location / &#123;</span><br><span class="line">                </span><br><span class="line">                try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">        &#125;</span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">                include snippets/fastcgi-php.conf;</span><br><span class="line">        #</span><br><span class="line">        #       # With php7.0-cgi alone:</span><br><span class="line">        #       fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        #       # With php7.0-fpm:</span><br><span class="line">                fastcgi_pass unix:/run/php/php7.0-fpm.sock;</span><br><span class="line">        &#125;</span><br><span class="line">        # deny access to .htaccess files, if Apache's document root</span><br><span class="line">        # concurs with nginx's one</span><br><span class="line">        #</span><br><span class="line">        location ~ /\.ht &#123;</span><br><span class="line">                deny all;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure>

<p>现在访问服务器IP地址就可以浏览网页了。</p>
<hr>
<h2 id="我遇到过的报错"><a href="#我遇到过的报错" class="headerlink" title="我遇到过的报错"></a>我遇到过的报错</h2><h3 id="Operation-timed-out-IPv6-issues"><a href="#Operation-timed-out-IPv6-issues" class="headerlink" title="Operation timed out (IPv6 issues)"></a>Operation timed out (IPv6 issues)</h3><p><em>You may run into errors if IPv6 is not configured correctly. A common error is:<br>The “<a href="https://getcomposer.org/version&quot;" target="_blank" rel="noopener">https://getcomposer.org/version&quot;</a> file could not be downloaded: failed to<br>open stream: Operation timed out</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">"echo 'precedence ::ffff:0:0/96 100' &gt;&gt; /etc/gai.conf"</span></span><br></pre></td></tr></table></figure>

<h3 id="No-application-encryption-key-has-been-specified"><a href="#No-application-encryption-key-has-been-specified" class="headerlink" title="No application encryption key has been specified."></a>No application encryption key has been specified.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan key:generate</span><br></pre></td></tr></table></figure>

<h3 id="Laravel-5-4-Specified-key-was-too-long-error"><a href="#Laravel-5-4-Specified-key-was-too-long-error" class="headerlink" title="Laravel 5.4: Specified key was too long error"></a>Laravel 5.4: Specified key was too long error</h3><p>  <em>1   PDOException::(“SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes”)<br>      /home/pi/Desktop/kxcrmserver/vendor/laravel/framework/src/Illuminate/Database/Connection.php:458<br>  2   PDOStatement::execute()<br>      /home/pi/Desktop/kxcrmserver/vendor/laravel/framework/src/Illuminate/Database/Connection.php:458</em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span> </span>&#123; </span><br><span class="line">	Schema::defaultStringLength(<span class="number">191</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>nginx 的错误日志在这个位置：<code>/var/log/nginx/error.log</code>，大部分问题都需要查看日志然后单独解决。</p>
</blockquote>
]]></content>
      <tags>
        <tag>laravel</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 强制使用http</title>
    <url>/2015/12/21/iOS%E5%BC%BA%E5%88%B6%E4%BD%BF%E7%94%A8http/</url>
    <content><![CDATA[<p>iOS 9要求App内访问的网络必须使用HTTPS协议，这样就会导致所有的http请求全部失效了。为了让程序正常运行，可以强制程序使用http协议。</p>
<p>方法是 通过修改 <code>info.plist</code>，添加<code>NSAppTransportSecurity</code>-&gt;<code>NSAllowsArbitraryLoads</code>即可。</p>
<a id="more"></a>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>点击<code>项目</code>-&gt;<code>info</code>；</p>
</li>
<li><p>任意一栏点<code>＋</code>号添加<code>NSAppTransportSecurity</code>（类型为<code>Dictionary</code>）</p>
</li>
<li><p><code>NSAppTransportSecurity</code>下面添加<code>NSAllowsArbitraryLoads</code>(类型为<code>Boolen</code>,值为<code>YES</code>)</p>
</li>
<li><p>注意所有字段不要多了空格，然后就可以了。</p>
</li>
</ol>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-21/56147039.jpg"></p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS测试网络是否连接</title>
    <url>/2015/07/29/iOS%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E6%98%AF%E5%90%A6%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>先导入一个头文件</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;SystemConfiguration/SystemConfiguration.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>然后通过调用这个函数</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  检测是否能上网</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @return YES说明网络已经连接；NO说明没有网络连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>) isConnectionAvailable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">SCNetworkReachabilityFlags</span> flags;</span><br><span class="line">    <span class="built_in">BOOL</span> receivedFlags;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">SCNetworkReachabilityRef</span> reachability = <span class="built_in">SCNetworkReachabilityCreateWithName</span>(<span class="built_in">CFAllocatorGetDefault</span>(), [<span class="string">@"www.baidu.com"</span> UTF8String]);</span><br><span class="line">    receivedFlags = <span class="built_in">SCNetworkReachabilityGetFlags</span>(reachability, &amp;flags);</span><br><span class="line">    <span class="built_in">CFRelease</span>(reachability);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!receivedFlags || (flags == <span class="number">0</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">FALSE</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">TRUE</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检测函数返回值就知道了。返回true说明有网络连接，返回false说明没有网络连接。</p>
<blockquote>
<p>网上找的方法，感觉就是试着访问下百度，连得上就说明网络是可以用的，连不上说明不可以………………仔细想想这个方法好像我很小的时候就会了：打开浏览器，输入百度网址，看得到就说明可以上网，然后关掉<em>百度</em>打开<em>谷歌</em>，嚯嚯嚯我那个时候真是个天才～～</p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>openssl加密解密</title>
    <url>/2015/11/01/openssl%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<h2 id="首先生成公钥私钥"><a href="#首先生成公钥私钥" class="headerlink" title="首先生成公钥私钥"></a>首先生成公钥私钥</h2><blockquote>
<p>我的电脑是Mac所以自带了openssl，从终端里面可以直接生成</p>
</blockquote>
<p>首先生成一个私钥放在私钥文件<code>rsa_private_key.pem</code>中</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out rsa_private_key.pem <span class="number">1024</span></span><br></pre></td></tr></table></figure>

<p>把RSA私钥转换成PKCS8格式，密码为空就行</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pkcs8 -topk8 -inform PEM -<span class="keyword">in</span> rsa_private_key.pem -outform PEM –nocrypt</span><br></pre></td></tr></table></figure>

<p>生成公钥</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rsa -<span class="keyword">in</span> rsa_private_key.pem -pubout -out rsa_public_key.pem</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="C测试代码"><a href="#C测试代码" class="headerlink" title="C测试代码"></a>C测试代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/pem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/rsa.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 原始明文</span></span><br><span class="line">    <span class="keyword">char</span> plain[<span class="number">256</span>]=<span class="string">"0123456789"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来存放密文</span></span><br><span class="line">    <span class="keyword">char</span> encrypted[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来存放解密后的明文</span></span><br><span class="line">    <span class="keyword">char</span> decrypted[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公钥和私钥文件</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* pub_key=<span class="string">"public.pem"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* priv_key=<span class="string">"private.pem"</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 利用公钥加密明文的过程</span></span><br><span class="line">    <span class="comment">// -------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开公钥文件</span></span><br><span class="line">    FILE* pub_fp=fopen(pub_key,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(pub_fp==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to open pub_key file %s!\n"</span>, pub_key);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从文件中读取公钥</span></span><br><span class="line">    RSA* rsa1=PEM_read_RSA_PUBKEY(pub_fp, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(rsa1==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"unable to read public key!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(plain)&gt;=RSA_size(rsa1)<span class="number">-41</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to encrypt\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(pub_fp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用公钥加密</span></span><br><span class="line">    <span class="keyword">int</span> len=RSA_public_encrypt(<span class="built_in">strlen</span>(plain), plain, encrypted, rsa1, RSA_PKCS1_PADDING);</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">-1</span> )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to encrypt\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出加密后的密文</span></span><br><span class="line">    FILE* fp=fopen(<span class="string">"out.txt"</span>,<span class="string">"w"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp)&#123;</span><br><span class="line">        fwrite(encrypted,len,<span class="number">1</span>,fp);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 利用私钥解密密文的过程</span></span><br><span class="line">    <span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 打开私钥文件</span></span><br><span class="line">    FILE* priv_fp=fopen(priv_key,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(priv_fp==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to open priv_key file %s!\n"</span>, priv_key);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从文件中读取私钥</span></span><br><span class="line">    RSA *rsa2 = PEM_read_RSAPrivateKey(priv_fp, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(rsa2==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"unable to read private key!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用私钥解密</span></span><br><span class="line">    len=RSA_private_decrypt(len, encrypted, decrypted, rsa2, RSA_PKCS1_PADDING);</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to decrypt!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(priv_fp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出解密后的明文</span></span><br><span class="line">    decrypted[len]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,decrypted);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS接入微信支付</title>
    <url>/2016/03/20/iOS%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<h1 id="iOS接入微信支付"><a href="#iOS接入微信支付" class="headerlink" title="iOS接入微信支付"></a>iOS接入微信支付</h1><p>微信支付SDK比支付宝的SDK好了不知道多少倍，坑也少了好多，简直是支付类SDK中的良心之作！！</p>
<p><a href="http://caoyudong.com/2016/01/03/iOS%E6%8E%A5%E5%85%A5%E6%94%AF%E4%BB%98%E5%AE%9D/">iOS接入支付宝SDK传送门</a></p>
<a id="more"></a>

<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先要去微信申请一个账号，分别有<code>商户API密钥</code>和<code>商户号</code> <a href="https://open.weixin.qq.com/" target="_blank" rel="noopener">https://open.weixin.qq.com/</a></p>
<h2 id="下载SDK"><a href="#下载SDK" class="headerlink" title="下载SDK"></a>下载SDK</h2><p>目前微信SDK已经升级到了（1.6.2）。但是我现在用的是上一个版本SDK，<a href="http://7xkfbb.com1.z0.glb.clouddn.com/wechat_sdk_sample_ios_v3_pay.zip" target="_blank" rel="noopener">这里有下载</a></p>
<p>为什么不用最新的呢？因为最新的SDK里面要求签名加密等操作在服务器上完成然后返回给手机端，然而……额，我这个项目的后台比较菜，不知道签名是怎么回事。而我比他更菜，我懒得自己写md5加密，所以就用了老版本的SDK。老版本SDK自带了各种各样加密方法，网上教程也比较多，所以很容易集成。</p>
<blockquote>
<p>当然，微信这么做也是有原因的，你把私钥放到了每一台手机上用来做签名……这样跟泄露了私钥有什么区别～</p>
</blockquote>
<h2 id="运行DEMO"><a href="#运行DEMO" class="headerlink" title="运行DEMO"></a>运行DEMO</h2><p><code>SDKSample</code>下的demo跑一遍，没有什么问题，没有支付宝那么坑～～</p>
<p><strong>lib</strong>文件夹下<code>payRequsestHandler.h</code>文件中填上<code>APP_ID</code>、<code>APP_SECRET</code>、<code>MCH_ID</code>、<code>PARTNER_ID</code>的值，然后运行demo，试一下能否完成支付，如果可以就可以进行下一步接入工作了。</p>
<h2 id="接入"><a href="#接入" class="headerlink" title="接入"></a>接入</h2><p>将<strong>SDKExport</strong>下的<code>libWeChatSDK.a</code>、<code>WXApi.h</code>、<code>WXApiObject.h</code>三个文件拖入工程中，再把<strong>lib</strong>文件夹拖入工程中。。<em>可能会有报错，ApiXml.m中报错那两行注释掉就好</em></p>
<p>支付代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  WechatPayManager.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"WXApiObject.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"WXApi.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 账号帐户资料</span></span><br><span class="line"><span class="comment">// 更改商户把相关参数后可测试</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> APP_ID          @<span class="meta-string">"XXX"</span>        <span class="comment">//APPID</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> APP_SECRET      @<span class="meta-string">"XXX"</span>                          <span class="comment">//appsecret,看起来好像没用</span></span></span><br><span class="line"><span class="comment">//商户号，填写商户对应参数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCH_ID          @<span class="meta-string">"XXX"</span></span></span><br><span class="line"><span class="comment">//商户API密钥，填写相应参数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARTNER_ID      @<span class="meta-string">"XXX"</span></span></span><br><span class="line"><span class="comment">//支付结果回调页面</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTIFY_URL      @<span class="meta-string">"http://wxpay.weixin.qq.com/pub_v2/pay/notify.v2.php"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SP_URL          @<span class="meta-string">"http://wxpay.weixin.qq.com/pub_v2/app/app_pay.php"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WechatPayManager</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//预支付网关url地址</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">NSString</span>* payUrl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//debug信息</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">NSMutableString</span> *debugInfo;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) <span class="built_in">NSInteger</span> lastErrCode;<span class="comment">//返回的错误码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//商户关键信息</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">NSString</span> *appId,*mchId,*spKey;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line">-(<span class="keyword">id</span>)initWithAppID:(<span class="built_in">NSString</span>*)appID</span><br><span class="line">             mchID:(<span class="built_in">NSString</span>*)mchID</span><br><span class="line">             spKey:(<span class="built_in">NSString</span>*)key;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前的debug信息</span></span><br><span class="line">-(<span class="built_in">NSString</span> *) getDebugInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取预支付订单信息（核心是一个prepayID）</span></span><br><span class="line">- (<span class="built_in">NSMutableDictionary</span>*)getPrepayWithOrderName:(<span class="built_in">NSString</span>*)name</span><br><span class="line">                                         price:(<span class="built_in">NSString</span>*)price</span><br><span class="line">                                        device:(<span class="built_in">NSString</span>*)device;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  WechatPayManager.m</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"WechatPayManager.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"WXUtil.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ApiXml.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">WechatPayManager</span></span></span><br><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line">-(<span class="keyword">id</span>)initWithAppID:(<span class="built_in">NSString</span>*)appID mchID:(<span class="built_in">NSString</span>*)mchID spKey:(<span class="built_in">NSString</span>*)key</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">self</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化私有参数，主要是一些和商户有关的参数</span></span><br><span class="line">        <span class="keyword">self</span>.payUrl    = <span class="string">@"https://api.mch.weixin.qq.com/pay/unifiedorder"</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.debugInfo == <span class="literal">nil</span>)&#123;</span><br><span class="line">            <span class="keyword">self</span>.debugInfo  = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="keyword">self</span>.debugInfo setString:<span class="string">@""</span>];</span><br><span class="line">        <span class="keyword">self</span>.appId = appID;<span class="comment">//微信分配给商户的appID</span></span><br><span class="line">        <span class="keyword">self</span>.mchId = mchID;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">self</span>.spKey = key;<span class="comment">//商户的密钥</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取debug信息</span></span><br><span class="line">-(<span class="built_in">NSString</span>*) getDebugInfo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *res = [<span class="built_in">NSString</span> stringWithString:<span class="keyword">self</span>.debugInfo];</span><br><span class="line">    [<span class="keyword">self</span>.debugInfo setString:<span class="string">@""</span>];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建package签名</span></span><br><span class="line">-(<span class="built_in">NSString</span>*) createMd5Sign:(<span class="built_in">NSMutableDictionary</span>*)dict</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *contentString  =[<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    <span class="built_in">NSArray</span> *keys = [dict allKeys];</span><br><span class="line">    <span class="comment">//按字母顺序排序</span></span><br><span class="line">    <span class="built_in">NSArray</span> *sortedArray = [keys sortedArrayUsingComparator:^<span class="built_in">NSComparisonResult</span>(<span class="keyword">id</span> obj1, <span class="keyword">id</span> obj2) &#123;</span><br><span class="line">        <span class="keyword">return</span> [obj1 compare:obj2 options:<span class="built_in">NSNumericSearch</span>];</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="comment">//拼接字符串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *categoryId <span class="keyword">in</span> sortedArray) &#123;</span><br><span class="line">        <span class="keyword">if</span> (   ![[dict objectForKey:categoryId] isEqualToString:<span class="string">@""</span>]</span><br><span class="line">            &amp;&amp; ![categoryId isEqualToString:<span class="string">@"sign"</span>]</span><br><span class="line">            &amp;&amp; ![categoryId isEqualToString:<span class="string">@"key"</span>]</span><br><span class="line">            )</span><br><span class="line">        &#123;</span><br><span class="line">            [contentString appendFormat:<span class="string">@"%@=%@&amp;"</span>, categoryId, [dict objectForKey:categoryId]];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加key字段</span></span><br><span class="line">    [contentString appendFormat:<span class="string">@"key=%@"</span>, <span class="keyword">self</span>.spKey];</span><br><span class="line">    <span class="comment">//得到MD5 sign签名</span></span><br><span class="line">    <span class="built_in">NSString</span> *md5Sign =[WXUtil md5:contentString];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出Debug Info</span></span><br><span class="line">    [<span class="keyword">self</span>.debugInfo appendFormat:<span class="string">@"MD5签名字符串：\n%@\n\n"</span>,contentString];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> md5Sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取package带参数的签名包</span></span><br><span class="line">-(<span class="built_in">NSString</span> *)genPackage:(<span class="built_in">NSMutableDictionary</span>*)packageParams</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *sign;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *reqPars=[<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    <span class="comment">//生成签名</span></span><br><span class="line">    sign        = [<span class="keyword">self</span> createMd5Sign:packageParams];</span><br><span class="line">    <span class="comment">//生成xml的package</span></span><br><span class="line">    <span class="built_in">NSArray</span> *keys = [packageParams allKeys];</span><br><span class="line">    [reqPars appendString:<span class="string">@"&lt;xml&gt;\n"</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *categoryId <span class="keyword">in</span> keys) &#123;</span><br><span class="line">        [reqPars appendFormat:<span class="string">@"&lt;%@&gt;%@&lt;/%@&gt;\n"</span>, categoryId, [packageParams objectForKey:categoryId],categoryId];</span><br><span class="line">    &#125;</span><br><span class="line">    [reqPars appendFormat:<span class="string">@"&lt;sign&gt;%@&lt;/sign&gt;\n&lt;/xml&gt;"</span>, sign];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithString:reqPars];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交预支付</span></span><br><span class="line">-(<span class="built_in">NSString</span> *)sendPrepay:(<span class="built_in">NSMutableDictionary</span> *)prePayParams</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *prepayid = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取提交支付</span></span><br><span class="line">    <span class="built_in">NSString</span> *send      = [<span class="keyword">self</span> genPackage:prePayParams];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出Debug Info</span></span><br><span class="line">    [<span class="keyword">self</span>.debugInfo appendFormat:<span class="string">@"API链接:%@\n"</span>, <span class="keyword">self</span>.payUrl];</span><br><span class="line">    [<span class="keyword">self</span>.debugInfo appendFormat:<span class="string">@"发送的xml:%@\n"</span>, send];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发送请求post xml数据</span></span><br><span class="line">    <span class="built_in">NSData</span> *res = [WXUtil httpSend:<span class="keyword">self</span>.payUrl method:<span class="string">@"POST"</span> data:send];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出Debug Info</span></span><br><span class="line">    [<span class="keyword">self</span>.debugInfo appendFormat:<span class="string">@"服务器返回：\n%@\n\n"</span>,[[<span class="built_in">NSString</span> alloc] initWithData:res encoding:<span class="built_in">NSUTF8StringEncoding</span>]];</span><br><span class="line">    </span><br><span class="line">    XMLHelper *xml  = [[XMLHelper alloc] init];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//开始解析</span></span><br><span class="line">    [xml startParse:res];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *resParams = [xml getDict];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断返回</span></span><br><span class="line">    <span class="built_in">NSString</span> *return_code   = [resParams objectForKey:<span class="string">@"return_code"</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *result_code   = [resParams objectForKey:<span class="string">@"result_code"</span>];</span><br><span class="line">    <span class="keyword">if</span> ( [return_code isEqualToString:<span class="string">@"SUCCESS"</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//生成返回数据的签名</span></span><br><span class="line">        <span class="built_in">NSString</span> *sign      = [<span class="keyword">self</span> createMd5Sign:resParams ];</span><br><span class="line">        <span class="built_in">NSString</span> *send_sign =[resParams objectForKey:<span class="string">@"sign"</span>] ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//验证签名正确性</span></span><br><span class="line">        <span class="keyword">if</span>( [sign isEqualToString:send_sign])&#123;</span><br><span class="line">            <span class="keyword">if</span>( [result_code isEqualToString:<span class="string">@"SUCCESS"</span>]) &#123;</span><br><span class="line">                <span class="comment">//验证业务处理状态</span></span><br><span class="line">                prepayid    = [resParams objectForKey:<span class="string">@"prepay_id"</span>];</span><br><span class="line">                return_code = <span class="number">0</span>;</span><br><span class="line">                </span><br><span class="line">                [<span class="keyword">self</span>.debugInfo appendFormat:<span class="string">@"获取预支付交易标示成功！\n"</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">self</span>.lastErrCode = <span class="number">1</span>;</span><br><span class="line">            [<span class="keyword">self</span>.debugInfo appendFormat:<span class="string">@"gen_sign=%@\n   _sign=%@\n"</span>,sign,send_sign];</span><br><span class="line">            [<span class="keyword">self</span>.debugInfo appendFormat:<span class="string">@"服务器返回签名验证错误！！！\n"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.lastErrCode = <span class="number">2</span>;</span><br><span class="line">        [<span class="keyword">self</span>.debugInfo appendFormat:<span class="string">@"接口返回错误！！！\n"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> prepayid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMutableDictionary</span>*)getPrepayWithOrderName:(<span class="built_in">NSString</span>*)name</span><br><span class="line">                                         price:(<span class="built_in">NSString</span>*)price</span><br><span class="line">                                        device:(<span class="built_in">NSString</span>*)device</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//订单标题，展示给用户</span></span><br><span class="line">    <span class="built_in">NSString</span>* orderName = name;</span><br><span class="line">    <span class="comment">//订单金额,单位（分）</span></span><br><span class="line">    <span class="built_in">NSString</span>* orderPrice = price;<span class="comment">//以分为单位的整数</span></span><br><span class="line">    <span class="comment">//支付设备号或门店号</span></span><br><span class="line">    <span class="built_in">NSString</span>* orderDevice = device;</span><br><span class="line">    <span class="comment">//支付类型，固定为APP</span></span><br><span class="line">    <span class="built_in">NSString</span>* orderType = <span class="string">@"APP"</span>;</span><br><span class="line">    <span class="comment">//发器支付的机器ip,暂时没有发现其作用</span></span><br><span class="line">    <span class="built_in">NSString</span>* orderIP = <span class="string">@"196.168.1.1"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//随机数串</span></span><br><span class="line">    srand( (<span class="keyword">unsigned</span>)time(<span class="number">0</span>) );</span><br><span class="line">    <span class="built_in">NSString</span> *noncestr  = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%d"</span>, rand()];</span><br><span class="line">    <span class="built_in">NSString</span> *orderNO   = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%ld"</span>,time(<span class="number">0</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//================================</span></span><br><span class="line">    <span class="comment">//预付单参数订单设置</span></span><br><span class="line">    <span class="comment">//================================</span></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *packageParams = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    </span><br><span class="line">    [packageParams setObject: <span class="keyword">self</span>.appId  forKey:<span class="string">@"appid"</span>];       <span class="comment">//开放平台appid</span></span><br><span class="line">    [packageParams setObject: <span class="keyword">self</span>.mchId  forKey:<span class="string">@"mch_id"</span>];      <span class="comment">//商户号</span></span><br><span class="line">    [packageParams setObject: orderDevice  forKey:<span class="string">@"device_info"</span>]; <span class="comment">//支付设备号或门店号</span></span><br><span class="line">    [packageParams setObject: noncestr     forKey:<span class="string">@"nonce_str"</span>];   <span class="comment">//随机串</span></span><br><span class="line">    [packageParams setObject: orderType    forKey:<span class="string">@"trade_type"</span>];  <span class="comment">//支付类型，固定为APP</span></span><br><span class="line">    [packageParams setObject: orderName    forKey:<span class="string">@"body"</span>];        <span class="comment">//订单描述，展示给用户</span></span><br><span class="line">    [packageParams setObject: NOTIFY_URL  forKey:<span class="string">@"notify_url"</span>];  <span class="comment">//支付结果异步通知</span></span><br><span class="line">    [packageParams setObject: orderNO      forKey:<span class="string">@"out_trade_no"</span>];<span class="comment">//商户订单号</span></span><br><span class="line">    [packageParams setObject: orderIP      forKey:<span class="string">@"spbill_create_ip"</span>];<span class="comment">//发器支付的机器ip</span></span><br><span class="line">    [packageParams setObject: orderPrice   forKey:<span class="string">@"total_fee"</span>];       <span class="comment">//订单金额，单位为分</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取prepayId（预支付交易会话标识）</span></span><br><span class="line">    <span class="built_in">NSString</span> *prePayid;</span><br><span class="line">    prePayid = [<span class="keyword">self</span> sendPrepay:packageParams];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(prePayid == <span class="literal">nil</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span>.debugInfo appendFormat:<span class="string">@"获取prepayid失败！\n"</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取到prepayid后进行第二次签名</span></span><br><span class="line">    <span class="built_in">NSString</span>    *package, *time_stamp, *nonce_str;</span><br><span class="line">    <span class="comment">//设置支付参数</span></span><br><span class="line">    time_t now;</span><br><span class="line">    time(&amp;now);</span><br><span class="line">    time_stamp  = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%ld"</span>, now];</span><br><span class="line">    nonce_str = [WXUtil md5:time_stamp];</span><br><span class="line">    <span class="comment">//重新按提交格式组包，微信客户端暂只支持package=Sign=WXPay格式，须考虑升级后支持携带package具体参数的情况</span></span><br><span class="line">    <span class="comment">//package       = [NSString stringWithFormat:@"Sign=%@",package];</span></span><br><span class="line">    package         = <span class="string">@"Sign=WXPay"</span>;</span><br><span class="line">    <span class="comment">//第二次签名参数列表</span></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *signParams = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    [signParams setObject: <span class="keyword">self</span>.appId  forKey:<span class="string">@"appid"</span>];</span><br><span class="line">    [signParams setObject: <span class="keyword">self</span>.mchId  forKey:<span class="string">@"partnerid"</span>];</span><br><span class="line">    [signParams setObject: nonce_str    forKey:<span class="string">@"noncestr"</span>];</span><br><span class="line">    [signParams setObject: package      forKey:<span class="string">@"package"</span>];</span><br><span class="line">    [signParams setObject: time_stamp   forKey:<span class="string">@"timestamp"</span>];</span><br><span class="line">    [signParams setObject: prePayid     forKey:<span class="string">@"prepayid"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//生成签名</span></span><br><span class="line">    <span class="built_in">NSString</span> *sign  = [<span class="keyword">self</span> createMd5Sign:signParams];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加签名</span></span><br><span class="line">    [signParams setObject: sign         forKey:<span class="string">@"sign"</span>];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.debugInfo appendFormat:<span class="string">@"第二步签名成功，sign＝%@\n"</span>,sign];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回参数列表</span></span><br><span class="line">    <span class="keyword">return</span> signParams;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p><strong>支付函数</strong><br>调用这个函数即可完成支付～</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)wxPayWithOrderName:(<span class="built_in">NSString</span>*)name price:(<span class="built_in">NSString</span>*)price</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建支付签名对象 &amp;&amp; 初始化支付签名对象</span></span><br><span class="line">    WechatPayManager* wxpayManager = [[WechatPayManager alloc]initWithAppID:APP_ID mchID:MCH_ID spKey:PARTNER_ID];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取到实际调起微信支付的参数后，在app端调起支付</span></span><br><span class="line">    <span class="comment">//生成预支付订单，实际上就是把关键参数进行第一次加密。</span></span><br><span class="line">    <span class="built_in">NSString</span>* device = <span class="string">@"aaaaaa"</span>;<span class="comment">//[[ defaultManager]userId];</span></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *dict = [wxpayManager getPrepayWithOrderName:name</span><br><span class="line">                                                               price:price</span><br><span class="line">                                                              device:device];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(dict == <span class="literal">nil</span>)&#123;</span><br><span class="line">        <span class="comment">//错误提示</span></span><br><span class="line">        <span class="built_in">NSString</span> *debug = [wxpayManager getDebugInfo];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,debug);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableString</span> *stamp  = [dict objectForKey:<span class="string">@"timestamp"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调起微信支付</span></span><br><span class="line">    PayReq* req             = [[PayReq alloc] init];</span><br><span class="line">    req.openID              = [dict objectForKey:<span class="string">@"appid"</span>];</span><br><span class="line">    req.partnerId          = [dict objectForKey:<span class="string">@"partnerid"</span>];</span><br><span class="line">    req.prepayId            = [dict objectForKey:<span class="string">@"prepayid"</span>];</span><br><span class="line">    req.nonceStr            = [dict objectForKey:<span class="string">@"noncestr"</span>];</span><br><span class="line">    req.timeStamp          = stamp.intValue;</span><br><span class="line">    req.package            = [dict objectForKey:<span class="string">@"package"</span>];</span><br><span class="line">    req.sign                = [dict objectForKey:<span class="string">@"sign"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">BOOL</span> flag = [WXApi sendReq:req];</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"ERROR!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><p><strong>“OBJC_CLASS$_CTTelephonyNetworkInfo” 报错</strong></p>
<p><strong>“Undefined symbols for architecture armv7:”报错</strong></p>
<p>在<code>General</code>-&gt;<code>Linked Frameworks and Libraries</code>中加入以下Libraries:</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-3-20/48722356.jpg"></p>
<blockquote>
<p>写的比较仓促，如果发现什么问题请留言，我一定会回复的～</p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS接入XMPPFrameWork</title>
    <url>/2016/04/15/iOS%E6%8E%A5%E5%85%A5XMPPFrameWork/</url>
    <content><![CDATA[<p><strong>XMPP</strong>(Extensible Messaging and Presence Protocol 可扩展通讯和表示协议)，是一种基于标记语言的子集XML的协议，以Jabber协议为基础，而Jabber是即时通讯中常用的开放式协议。</p>
<p>简单来说，用这个东西可以实现APP间的聊天功能。</p>
<p>当然，我们不用自己实现一个XMPP，已经有人写好了<a href="https://github.com/robbiehanson/XMPPFramework" target="_blank" rel="noopener">XMPP Framework</a></p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="官方方法"><a href="#官方方法" class="headerlink" title="官方方法"></a>官方方法</h3><p>按照官网的安装步骤：</p>
<ol>
<li>先把最新的XMPPFramework的项目添加到自己的项目中。</li>
<li>添加 CocoaLumberjack 依赖</li>
<li>添加 CocoaAsyncSocket 依赖</li>
<li>添加 KissXML 依赖</li>
<li>添加 libidn 依赖</li>
<li>将以下文件夹添加到项目中<ul>
<li>Authentication</li>
<li>Categories</li>
<li>Core</li>
<li>Utilities</li>
</ul>
</li>
</ol>
<p><strong>…………………………</strong></p>
<p><strong>看到这里各位的心情应该跟我当时是一样的：什么鬼！！！为什么要加那么多东西！！！为什么不能直接支持CocoaPods？？？</strong></p>
<p>然后，我怀着崩溃的心情，试了下</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod search XMPPFrameWork</span><br></pre></td></tr></table></figure>

<p>结果</p>
<p>!!!!!!</p>
<p><img src="../../../../image/d1d80415-91ef-4086-ba9c-570fe3badf70.png"></p>
<p>居然是有的！！！</p>
<p>啊，你说这作者，明明支持CocoaPods，干嘛不在Readme里面顺便说一声呢？</p>
<h3 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><p>直接在Podfile里面添加</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod <span class="string">'XMPPFramework'</span>, <span class="string">'~&gt; 3.6.6'</span></span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure>

<p>就可以愉快的使用了</p>
<hr>
<h3 id="如果项目原来有CocoaLumberjack"><a href="#如果项目原来有CocoaLumberjack" class="headerlink" title="如果项目原来有CocoaLumberjack"></a>如果项目原来有CocoaLumberjack</h3><p>如果你跟我一样原来的项目里面有<code>CocoaLumberjack</code>，那么会踩到一个坑：</p>
<p>XMPPFrameWork 需要的的 CocoaLumberjack 版本为 1.9。。。。</p>
<p>然后降了版本安装好之后，你会惊奇的发现：</p>
<p><strong>CocoaLumberjack用不了了！！！它的头文件&lt;CocoaLumberjack/CocoaLumberjack.h&gt;莫名其妙的失踪了！！！</strong></p>
<p>目前我也不知道这种情况要怎么办……</p>
<p>代替方案是这样的：</p>
<p>去掉&lt;CocoaLumberjack/CocoaLumberjack.h&gt;引入<code>DDLog.h</code>可以勉强用用～</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"DDLog.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> ddLogLevel = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>


<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li><p>首先需要通过调用，下面的东西链接服务器：<br> 其中，<code>JID</code>是一个需要自己构造的对象，这个东西将作为你的唯一ID，一般情况下是这种样子：<strong>用户名@服务域名</strong>。resource是你发出去的信息的终端的标记可以不填。填了只是便于在数据库搜索用。官方解释:  <em>As a fixed length character field, a resource identifier is more easily stored in, searched on, and retrieved from a database.</em></p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">XMPPJID *jid = [XMPPJID jidWithUser:<span class="string">@"username"</span> domain:<span class="string">@"domain"</span> resource:<span class="string">@"resource"</span>];</span><br><span class="line">[<span class="keyword">self</span>.xmppStream connectWithTimeout:XMPPStreamTimeoutNone error:&amp;error]</span><br></pre></td></tr></table></figure>
<p>上面构造的JID就是： <strong>username@domain</strong>   </p>
</li>
<li><p>如果成功链接会调用代理方法</p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)xmppStreamDidConnect:(XMPPStream *)sender&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>然后通过方法提供密码登录</p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[[<span class="keyword">self</span> xmppStream] authenticateWithPassword:<span class="keyword">self</span>.password error:&amp;error]</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果成功登录会调用下面这个代理方法</p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)xmppStreamDidAuthenticate:(XMPPStream *)sender&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>这时就可以开始正常聊天了～</p>
</li>
<li><p>发送消息</p>
<p> 由于XMPP协议是基于XML的，所以所有发出的消息和接收的消息都是XML格式的</p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSXMLElement</span> *body = [<span class="built_in">NSXMLElement</span> elementWithName:<span class="string">@"body"</span>];</span><br><span class="line">   [body setStringValue:message];</span><br><span class="line">   <span class="built_in">NSXMLElement</span> *XMLmessage = [<span class="built_in">NSXMLElement</span> elementWithName:<span class="string">@"message"</span>];</span><br><span class="line">   [XMLmessage addAttributeWithName:<span class="string">@"type"</span> stringValue:<span class="string">@"chat"</span>];</span><br><span class="line">   <span class="comment">//toUser是接收人的用户名</span></span><br><span class="line">   <span class="built_in">NSString</span> *to = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@@domain"</span>, toUser];</span><br><span class="line">   [XMLmessage addAttributeWithName:<span class="string">@"to"</span> stringValue:to];</span><br><span class="line">   [XMLmessage addChild:body];</span><br><span class="line">   [<span class="keyword">self</span>.xmppStream sendElement:XMLmessage];</span><br></pre></td></tr></table></figure></li>
<li><p>接收消息</p>
<p> 收到消息后会调用下面这个代理，可以在里面处理收到的消息。</p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)xmppStream:(XMPPStream *)sender didReceiveMessage:(XMPPMessage *)message &#123;</span><br><span class="line">   <span class="built_in">NSString</span> *txt = [[message elementForName:<span class="string">@"body"</span>] stringValue];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><blockquote>
<p>首先我在我电脑上建了一个open fire客户端。open fire是一个开源的支持XMPP的服务器，安装很简单，基本上是一路next，然后运行的时候链接下自己的手机壳就可以用了，网上很多例子，这里就不说了。<br>其次聊天界面我使用了一个别人写好的（因为自己写的太TM丑了），叫做<code>JSQMessagesViewController</code>，可以直接用CocoaPods安装，很好用。</p>
<p>我究竟是有多懒……</p>
</blockquote>
<h3 id="聊天界面引入"><a href="#聊天界面引入" class="headerlink" title="聊天界面引入"></a>聊天界面引入</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"xmpp.h"</span></span></span><br></pre></td></tr></table></figure>

<p>然后声明几个属性，其中xmppStream用来储存链接信息，account,password用来储存自己的账户密码，toUser用来存放对方账户的账号。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) XMPPStream *xmppStream;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *account,*password,*toUser;</span><br></pre></td></tr></table></figure>

<h3 id="链接服务器："><a href="#链接服务器：" class="headerlink" title="链接服务器："></a>链接服务器：</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)connect &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.xmppStream == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.xmppStream = [[XMPPStream alloc] init];</span><br><span class="line">        [<span class="keyword">self</span>.xmppStream addDelegate:<span class="keyword">self</span> delegateQueue:dispatch_get_main_queue()];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.xmppStream isConnected]) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *username = <span class="keyword">self</span>.account;</span><br><span class="line">        XMPPJID *jid = [XMPPJID jidWithUser:username domain:<span class="string">@"localhost"</span> resource:<span class="string">@"iOS"</span>];</span><br><span class="line">        [<span class="keyword">self</span>.xmppStream setMyJID:jid];</span><br><span class="line">        [<span class="keyword">self</span>.xmppStream setHostName:<span class="string">@"localhost"</span>];</span><br><span class="line">        <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">if</span> (![<span class="keyword">self</span>.xmppStream connectWithTimeout:XMPPStreamTimeoutNone error:&amp;error]) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Connect Error: %@"</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>因为要连接上才可以注册所以需要调用<code>- (void)xmppStreamDidConnect:(XMPPStream *)sende</code>函数</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)xmppStreamDidConnect:(XMPPStream *)sender &#123;</span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.xmppStream registerWithPassword:<span class="string">@"123456"</span> error:&amp;error]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Register Error: %@"</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)xmppStreamDidConnect:(XMPPStream *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (![[<span class="keyword">self</span> xmppStream] authenticateWithPassword:<span class="string">@"123456"</span> error:&amp;error])</span><br><span class="line">    &#123;</span><br><span class="line">        DDLogError(<span class="string">@"Error authenticating: %@"</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置自己在线"><a href="#设置自己在线" class="headerlink" title="设置自己在线"></a>设置自己在线</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)xmppStreamDidAuthenticate:(XMPPStream *)sender</span><br><span class="line">&#123;</span><br><span class="line">    XMPPPresence *presence = [XMPPPresence presence]; <span class="comment">// type="available" is implicit</span></span><br><span class="line">    [[<span class="keyword">self</span> xmppStream] sendElement:presence];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="发送消息："><a href="#发送消息：" class="headerlink" title="发送消息："></a>发送消息：</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)sendMessage:(<span class="built_in">NSString</span> *) message toUser:(<span class="built_in">NSString</span> *) user &#123;</span><br><span class="line">    <span class="built_in">NSXMLElement</span> *body = [<span class="built_in">NSXMLElement</span> elementWithName:<span class="string">@"body"</span>];</span><br><span class="line">    [body setStringValue:message];</span><br><span class="line">    <span class="built_in">NSXMLElement</span> *XMLmessage = [<span class="built_in">NSXMLElement</span> elementWithName:<span class="string">@"message"</span>];</span><br><span class="line">    [XMLmessage addAttributeWithName:<span class="string">@"type"</span> stringValue:<span class="string">@"chat"</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *to = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@@john.local"</span>, user];</span><br><span class="line">    [XMLmessage addAttributeWithName:<span class="string">@"to"</span> stringValue:to];</span><br><span class="line">    [XMLmessage addChild:body];</span><br><span class="line">    [<span class="keyword">self</span>.xmppStream sendElement:XMLmessage];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *to = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@@john.local"</span>, user];</span><br></pre></td></tr></table></figure>
<p>是用来构造接收用户的JID的，<code>john.local</code>应该改成服务器域名，这里这个是我本机open fire 自建的域名。</p>
<p><img src="../../../../image/646ef345-2c1f-435a-b0d9-c87d594ff3b6.jpg" alt="本机域名"></p>
<h3 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)xmppStream:(XMPPStream *)sender didReceiveMessage:(XMPPMessage *)message &#123;</span><br><span class="line">	<span class="keyword">if</span> ([message.type isEqual:<span class="string">@"chat"</span>]) &#123;</span><br><span class="line">	        <span class="built_in">NSString</span> *txt = message.body;</span><br><span class="line">	        <span class="keyword">if</span> (txt != <span class="literal">nil</span>) &#123;</span><br><span class="line">	            JSQMessage *msg = [[JSQMessage alloc] initWithSenderId:<span class="keyword">self</span>.toUser</span><br><span class="line">	                                                 senderDisplayName:<span class="string">@"客服"</span></span><br><span class="line">	                                                              date:[<span class="built_in">NSDate</span> date]</span><br><span class="line">	                                                              text:txt];</span><br><span class="line">	            [<span class="keyword">self</span>.demoData.messages addObject:msg];</span><br><span class="line">	            [<span class="keyword">self</span> finishSendingMessageAnimated:<span class="literal">YES</span>];</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>手机端：<br><img src="../../../../image/4dae6d82-8fc8-44a5-b2cb-5d30c384c79e.jpg" alt="手机端"></p>
<p>桌面端：（open fire自带的一个桌面客户端，测试用）<br><img src="../../../../image/f4b77a63-36e7-4560-91d2-6d8ed96d992e.jpg" alt="桌面端"></p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS接入支付宝</title>
    <url>/2016/01/03/iOS%E6%8E%A5%E5%85%A5%E6%94%AF%E4%BB%98%E5%AE%9D/</url>
    <content><![CDATA[<p>记得我做的第一个iOS应用就有接入支付宝的功能，然而当时并没有成功接入。一个是因为当时自己大三刚刚开窍菜的抠脚，另一个是因为网上传闻iOS添加支付宝的SDK难用程度已经突破了天际！所以就自动放弃了～</p>
<p><strong>但是！！我终于在一年后的今天给它弄上了！！现在返回去看其实也不难，虽然坑很多</strong></p>
<p>引用《火星救援》马克说的话：</p>
<blockquote>
<p>You just begin.<br>You do the math. You solve one problem<br>and you solve the next one,<br>and then the next.<br>And if you solve enough problems, you get to come home.  </p>
</blockquote>
<p>遇到困难去做就是了，可能有成堆的问题，但是一个问题一个问题的去解决，只要解决的问题足够多，这个困难就过去了。同样，一个你不熟悉的框架或者系统，一开始自己会感到手足无措，完全不知道该怎么办，这时候只需要每天学一个技术，每天看一点文档，慢慢的就会了，然后就熟悉了，最后就可以在别人崇拜的眼光面前摇摇头说：“我也只是略懂啦～”。</p>
<a id="more"></a>

<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先要去支付宝填申请，可以得到一个<code>parnter</code>和一个<code>seller</code>。然后自己要在自己的电脑上生成一组RSA，把公钥交给支付宝，私钥自己留着。具体生成方法支付宝的SDK里面有写，或者可以看这个<a href="http://caoyudong.com/2015/11/01/openssl%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/">openssl生成RSA公私钥</a>，两分钟的事。</p>
<h2 id="下载SDK"><a href="#下载SDK" class="headerlink" title="下载SDK"></a>下载SDK</h2><p>首先要从网上下载SDK。<a href="https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.jhNbkN&treeId=54&articleId=104509&docType=1" target="_blank" rel="noopener">下载地址</a></p>
<h2 id="运行-demo"><a href="#运行-demo" class="headerlink" title="运行 demo"></a>运行 demo</h2><p>得到SDK后先运行下他给的iOS端的demo。demo中<code>APViewController.m</code>里面找到下面这几行代码，填上你的<code>parnter</code>、<code>seller</code>和<code>privateKey</code>，然后运行看下能不能支付成功，如果可以的话，说明你的三个参数没有问题，可以准备接入了</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	 *商户的唯一的parnter和seller。</span></span><br><span class="line"><span class="comment">	 *签约后，支付宝会为每个商户分配一个唯一的 parnter 和 seller。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">/*============================================================================*/</span></span><br><span class="line"><span class="comment">/*=======================需要填写商户app申请的===================================*/</span></span><br><span class="line"><span class="comment">/*============================================================================*/</span></span><br><span class="line">	<span class="built_in">NSString</span> *partner = <span class="string">@""</span>;</span><br><span class="line">	<span class="built_in">NSString</span> *seller = <span class="string">@""</span>;</span><br><span class="line">	<span class="built_in">NSString</span> *privateKey = <span class="string">@""</span>;</span><br><span class="line"><span class="comment">/*============================================================================*/</span></span><br><span class="line"><span class="comment">/*============================================================================*/</span></span><br><span class="line"><span class="comment">/*============================================================================*/</span></span><br></pre></td></tr></table></figure>

<h2 id="接入"><a href="#接入" class="headerlink" title="接入"></a>接入</h2><p>首先把SDK包中的几个东西拖到你的项目中去：<code>AlipaySDK.bundle</code>,<code>AlipaySDK.framework</code>,<code>libcrypto.a</code>和<code>libssl.a</code>。</p>
<p>然后把demo中<code>Util</code>文件夹拖入你的项目中：<br><strong>注意！要选择<code>Create groups</code>！！！</strong><br><strong>注意！要选择<code>Create groups</code>！！！</strong><br><strong>注意！要选择<code>Create groups</code>！！！</strong>   </p>
<p>**<code>Util</code>**拖进去后应该是黄色的而不是蓝色的！！！  </p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-1-3/17957823.jpg"></p>
<p>然后把demo中<code>openssl</code>文件夹拖入你的项目中： </p>
<p><strong>注意这次选<code>Create folder reference</code>！！</strong></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-1-3/46318361.jpg"></p>
<p>然后把demo中这几个文件拖到你的项目中：<code>Product.h</code>,<code>Product.m</code>,<code>APAuthV2Info.h</code>,<code>APAuthV2Info.m</code>,<code>Order.h</code>,<code>Order.m</code></p>
<p><strong>现在你的项目里面应该包含这些东西（特别注意下Util文件夹和openssl文件夹的颜色）：</strong></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-1-3/55639355.jpg"></p>
<hr>
<p>在你要用到支付的地方引入以下头文件</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"Order.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;AlipaySDK/AlipaySDK.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"DataSigner.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Product.h"</span></span></span><br></pre></td></tr></table></figure>


<p> 然后参考demo的支付写了下面这个支付函数：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)Alipay&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 *点击获取prodcut实例并初始化订单信息</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">//    Product *product = [self.productList objectAtIndex:indexPath.row];</span></span><br><span class="line">	Product *product = [[Product alloc] init];</span><br><span class="line">	product.subject = <span class="string">@"1"</span>;</span><br><span class="line">	product.body = <span class="string">@"人在塔在"</span>;</span><br><span class="line">	</span><br><span class="line">	product.price = <span class="number">0.01</span>f+pow(<span class="number">10</span>,<span class="number">-2</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 *商户的唯一的parnter和seller。</span></span><br><span class="line"><span class="comment">	 *签约后，支付宝会为每个商户分配一个唯一的 parnter 和 seller。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*============================================================================*/</span></span><br><span class="line">	<span class="comment">/*=======================需要填写商户app申请的===================================*/</span></span><br><span class="line">	<span class="comment">/*============================================================================*/</span></span><br><span class="line">	<span class="built_in">NSString</span> *partner = <span class="string">@""</span>;</span><br><span class="line">	<span class="built_in">NSString</span> *seller = <span class="string">@""</span>;</span><br><span class="line">	<span class="built_in">NSString</span> *privateKey = @“私钥”;</span><br><span class="line">	<span class="comment">/*============================================================================*/</span></span><br><span class="line">	<span class="comment">/*============================================================================*/</span></span><br><span class="line">	<span class="comment">/*============================================================================*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//partner和seller获取失败,提示</span></span><br><span class="line">	<span class="keyword">if</span> ([partner length] == <span class="number">0</span> ||</span><br><span class="line">		[seller length] == <span class="number">0</span> ||</span><br><span class="line">		[privateKey length] == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">				<span class="built_in">UIAlertView</span> *alert = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"提示"</span></span><br><span class="line">																message:<span class="string">@"缺少partner或者seller或者私钥。"</span></span><br><span class="line">															   delegate:<span class="keyword">self</span></span><br><span class="line">													  cancelButtonTitle:<span class="string">@"确定"</span></span><br><span class="line">													  otherButtonTitles:<span class="literal">nil</span>];</span><br><span class="line">				[alert show];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 *生成订单信息及签名</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	</span><br><span class="line">	product.price = <span class="number">0.01</span>f+pow(<span class="number">10</span>,<span class="number">-2</span>);<span class="comment">//商品价格</span></span><br><span class="line">	<span class="comment">//将商品信息赋予AlixPayOrder的成员变量</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	Order *order = [[Order alloc] init];</span><br><span class="line">	order.partner = partner;</span><br><span class="line">	order.seller = seller;</span><br><span class="line">	order.tradeNO = [<span class="keyword">self</span> generateTradeNO]; <span class="comment">//订单ID（由商家自行制定）</span></span><br><span class="line">	order.productName = product.subject; <span class="comment">//商品标题</span></span><br><span class="line">	order.productDescription = product.body; <span class="comment">//商品描述</span></span><br><span class="line">	order.amount = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.2f"</span>,product.price]; <span class="comment">//</span></span><br><span class="line">	</span><br><span class="line">	order.notifyURL =  <span class="string">@"http://www.xxx.com"</span>; <span class="comment">//回调URL</span></span><br><span class="line">	</span><br><span class="line">	order.service = <span class="string">@"mobile.securitypay.pay"</span>;</span><br><span class="line">	order.paymentType = <span class="string">@"1"</span>;</span><br><span class="line">	order.inputCharset = <span class="string">@"utf-8"</span>;</span><br><span class="line">	order.itBPay = <span class="string">@"30m"</span>;</span><br><span class="line">	order.showUrl = <span class="string">@"m.alipay.com"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//应用注册scheme,在AlixPayDemo-Info.plist定义URL types</span></span><br><span class="line">	<span class="built_in">NSString</span> *appScheme = <span class="string">@"alisdkdemo"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//将商品信息拼接成字符串</span></span><br><span class="line">	<span class="built_in">NSString</span> *orderSpec = [order description];</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"orderSpec = %@"</span>,orderSpec);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取私钥并将商户信息签名,外部商户可以根据情况存放私钥和签名,只需要遵循RSA签名规范,并将签名字符串base64编码和UrlEncode</span></span><br><span class="line">	<span class="keyword">id</span>&lt;DataSigner&gt; signer = CreateRSADataSigner(privateKey);</span><br><span class="line">	<span class="built_in">NSString</span> *signedString = [signer signString:orderSpec];</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//将签名成功字符串格式化为订单字符串,请严格按照该格式</span></span><br><span class="line">	<span class="built_in">NSString</span> *orderString = <span class="literal">nil</span>;</span><br><span class="line">	<span class="keyword">if</span> (signedString != <span class="literal">nil</span>) &#123;</span><br><span class="line">		orderString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@&amp;sign=\"%@\"&amp;sign_type=\"%@\""</span>,</span><br><span class="line">					   orderSpec, signedString, <span class="string">@"RSA"</span>];</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//回调会调用这个函数</span></span><br><span class="line">	[[AlipaySDK defaultService] payOrder:orderString fromScheme:appScheme callback:^(<span class="built_in">NSDictionary</span> *resultDic) &#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"reslut = %@"</span>,resultDic);</span><br><span class="line">	&#125;];</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//        [tableView deselectRowAtIndexPath:indexPath animated:YES];</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSString</span> *)generateTradeNO</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> kNumber = <span class="number">15</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">NSString</span> *sourceStr = <span class="string">@"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">	<span class="built_in">NSMutableString</span> *resultStr = [[<span class="built_in">NSMutableString</span> alloc] init];</span><br><span class="line">	srand(time(<span class="number">0</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; kNumber; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">unsigned</span> index = rand() % [sourceStr length];</span><br><span class="line">		<span class="built_in">NSString</span> *oneStr = [sourceStr substringWithRange:<span class="built_in">NSMakeRange</span>(index, <span class="number">1</span>)];</span><br><span class="line">		[resultStr appendString:oneStr];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> resultStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照官方的说法，这样子就差不多算是把支付宝接入了；现在点击运行。。。。会惊奇的发现：<strong>Boom! sha ka la ka!!</strong> </p>
<p>报了超多错！这就是支付宝坑的地方，接下来我们来填坑。</p>
<h2 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h2><h4 id="Util-base64-h-63-21-Cannot-find-interface-declaration-for-‘NSObject’-superclass-of-‘Base64’"><a href="#Util-base64-h-63-21-Cannot-find-interface-declaration-for-‘NSObject’-superclass-of-‘Base64’" class="headerlink" title="Util/base64.h:63:21: Cannot find interface declaration for ‘NSObject’, superclass of ‘Base64’"></a>Util/base64.h:63:21: Cannot find interface declaration for ‘NSObject’, superclass of ‘Base64’</h4><p>在<code>base64.h </code>中加入<code>#import &lt;Foundation/Foundation.h&gt;</code> 官方古老的demo加到了<code>PCH</code>中，所以不会报错～结果他说都不说一声！！！坑啊有没有！！！</p>
</br>

<h4 id="Util-openssl-wrapper-m-11-9-‘rsa-h’-file-not-found"><a href="#Util-openssl-wrapper-m-11-9-‘rsa-h’-file-not-found" class="headerlink" title="Util/openssl_wrapper.m:11:9: ‘rsa.h’ file not found"></a>Util/openssl_wrapper.m:11:9: ‘rsa.h’ file not found</h4><p> 在<code>Build setting</code>中搜索<code>search</code>，找到<code>Header Search Paths</code>，添加<code>$(PROJECT_DIR)/openssl</code>和<code>$(PROJECT_DIR)</code>  如图：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-1-3/40007724.jpg"></p>
</br>

<h4 id="“-CNCopyCurrentNetworkInfo”-referenced-from"><a href="#“-CNCopyCurrentNetworkInfo”-referenced-from" class="headerlink" title="“_CNCopyCurrentNetworkInfo”, referenced from:"></a>“_CNCopyCurrentNetworkInfo”, referenced from:</h4><p>这类错很多，大概有这些：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</span><br><span class="line">  <span class="string">"_CNCopyCurrentNetworkInfo"</span>, referenced from:</span><br><span class="line">	  -[APayReachability wifiInterface] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[internal_DeviceInfo getSSIDInfo] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[internal_DeviceInfo getNetworkInfo] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_CNCopySupportedInterfaces"</span>, referenced from:</span><br><span class="line">	  -[APayReachability wifiInterface] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[internal_DeviceInfo getSSIDInfo] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[internal_DeviceInfo getNetworkInfo] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_CTRadioAccessTechnologyCDMA1x"</span>, referenced from:</span><br><span class="line">	  -[AliSecXReachability networkStatusForFlags:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_CTRadioAccessTechnologyEdge"</span>, referenced from:</span><br><span class="line">	  -[AliSecXReachability networkStatusForFlags:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_CTRadioAccessTechnologyGPRS"</span>, referenced from:</span><br><span class="line">	  -[AliSecXReachability networkStatusForFlags:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_CTRadioAccessTechnologyLTE"</span>, referenced from:</span><br><span class="line">	  -[AliSecXReachability networkStatusForFlags:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_OBJC_CLASS_<span class="variable">$_CMMotionManager</span>"</span>, referenced from:</span><br><span class="line">	  objc-class-ref <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_OBJC_CLASS_<span class="variable">$_CTTelephonyNetworkInfo</span>"</span>, referenced from:</span><br><span class="line">	  objc-class-ref <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_SCNetworkReachabilityCreateWithAddress"</span>, referenced from:</span><br><span class="line">	  +[APayReachability reachabilityWithAddress:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[AliSecXReachability reachabilityWithAddress:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_SCNetworkReachabilityCreateWithName"</span>, referenced from:</span><br><span class="line">	  +[APayReachability reachabilityWithHostname:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[AliSecXReachability reachabilityWithHostName:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_SCNetworkReachabilityGetFlags"</span>, referenced from:</span><br><span class="line">	  -[APayReachability isReachable] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  -[APayReachability isReachableViaWWAN] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  -[APayReachability isReachableViaWiFi] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  -[APayReachability connectionRequired] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  -[APayReachability isConnectionOnDemand] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  -[APayReachability isInterventionRequired] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  -[APayReachability reachabilityFlags] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  ...</span><br><span class="line">  <span class="string">"_SCNetworkReachabilityScheduleWithRunLoop"</span>, referenced from:</span><br><span class="line">	  -[AliSecXReachability startNotifier] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_SCNetworkReachabilitySetCallback"</span>, referenced from:</span><br><span class="line">	  -[APayReachability startNotifier] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  -[APayReachability stopNotifier] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  -[AliSecXReachability startNotifier] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_SCNetworkReachabilitySetDispatchQueue"</span>, referenced from:</span><br><span class="line">	  -[APayReachability startNotifier] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  -[APayReachability stopNotifier] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_SCNetworkReachabilityUnscheduleFromRunLoop"</span>, referenced from:</span><br><span class="line">	  -[AliSecXReachability stopNotifier] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::__init(char const*, unsigned long)"</span>, referenced from:</span><br><span class="line">	  CAliSecXURL::encodeURIComponent(CAliSecXBuffer&amp;) <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long)"</span>, referenced from:</span><br><span class="line">	  CAliSecXURL::encodeURIComponent(CAliSecXBuffer&amp;) <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::~basic_string()"</span>, referenced from:</span><br><span class="line">	  CAliSecXURL::encodeURIComponent(CAliSecXBuffer&amp;) <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"std::nothrow"</span>, referenced from:</span><br><span class="line">	  CAliSecXBuffer::CAliSecXBuffer(unsigned long) <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  CAliSecXBuffer::_copy(unsigned char const*, unsigned long) <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  CAliSecXBuffer::resize(unsigned long) <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"std::terminate()"</span>, referenced from:</span><br><span class="line">	  ___clang_call_terminate <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"operator delete[](void*)"</span>, referenced from:</span><br><span class="line">	  CAliSecXBuffer::~CAliSecXBuffer() <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  CAliSecXBuffer::release() <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  CAliSecXBuffer::~CAliSecXBuffer() <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  CAliSecXBuffer::operator=(CAliSecXBuffer const&amp;) <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  CAliSecXBuffer::resize(unsigned long) <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  alisec_crypto_Hex2Bin(CAliSecXBuffer const&amp;) <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  alisec_crypto_Bin2Hex(CAliSecXBuffer const&amp;) <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  ...</span><br><span class="line">  <span class="string">"operator new[](unsigned long, std::nothrow_t const&amp;)"</span>, referenced from:</span><br><span class="line">	  CAliSecXBuffer::CAliSecXBuffer(unsigned long) <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  CAliSecXBuffer::_copy(unsigned char const*, unsigned long) <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  CAliSecXBuffer::resize(unsigned long) <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"___cxa_begin_catch"</span>, referenced from:</span><br><span class="line">	  ___clang_call_terminate <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"___gxx_personality_v0"</span>, referenced from:</span><br><span class="line">	  +[ASSStorageAccesser saveStorageModel:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[ASSStorageAccesser loadStorageModelFromKeychain] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[ASSStorageAccesser loadPreviousApdid] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[ASSStorageAccesser getRandomizedID] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[ASSStorageAccesser getNewRadomizedID] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[ASSStorageAccesser loadLastLoginTime] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[ASSStorageAccesser saveCurrentLoginTime:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  ...</span><br><span class="line">  <span class="string">"_deflate"</span>, referenced from:</span><br><span class="line">	  +[ASSCommonUtils gzipData:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[DTGZipUtil compressGZip:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_deflateEnd"</span>, referenced from:</span><br><span class="line">	  +[ASSCommonUtils gzipData:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[DTGZipUtil compressGZip:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_deflateInit2_"</span>, referenced from:</span><br><span class="line">	  +[ASSCommonUtils gzipData:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">	  +[DTGZipUtil compressGZip:] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_kCNNetworkInfoKeyBSSID"</span>, referenced from:</span><br><span class="line">	  +[UIDevice(APEX) networkDic] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">  <span class="string">"_kCNNetworkInfoKeySSID"</span>, referenced from:</span><br><span class="line">	  +[UIDevice(APEX) networkDic] <span class="keyword">in</span> AlipaySDK</span><br><span class="line">ld: symbol(s) not found <span class="keyword">for</span> architecture x86_64</span><br><span class="line">clang: error: linker <span class="built_in">command</span> failed with <span class="built_in">exit</span> code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure>

<p>这种问题通过在<code>General</code>-&gt;<code>Link Framework and Libraiies</code>中添加以下framework解决：</p>
<ul>
<li>libz.tbd</li>
<li>libc++.tbd</li>
<li>Security.framework</li>
<li>CoreMotion.Framework</li>
<li>CFNetwork.framework</li>
<li>CoreTelephony.framework</li>
<li>SystemConfiguration.framework</li>
</ul>
<p>如图：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-1-3/89744262.jpg"></p>
<blockquote>
<p>强迫症可以挪下位置～～</p>
</blockquote>
<p>现在运行，应该就可以了，别的问题我好像也没有遇到～（记得联网！！！！）</p>
<h4 id="交易订单处理失败，请稍候再试。（ALI64）"><a href="#交易订单处理失败，请稍候再试。（ALI64）" class="headerlink" title="交易订单处理失败，请稍候再试。（ALI64）"></a>交易订单处理失败，请稍候再试。（ALI64）</h4><p>我出现这个问题是因为<code>product.body</code>放了空值，这里不能为空～</p>
<hr>
<p>补充下，支付完成的回调需要在<code>AppDelegate.h</code>中的<code>-(BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation;</code>函数中调用：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ([url.host isEqualToString:<span class="string">@"safepay"</span>]) &#123;</span><br><span class="line">        [[AlipaySDK defaultService]</span><br><span class="line">         processOrderWithPaymentResult:url</span><br><span class="line">         standbyCallback:^(<span class="built_in">NSDictionary</span> *resultDic) &#123;</span><br><span class="line">         <span class="comment">//这个部分绝对不会运行，不用在这里浪费时间了～</span></span><br><span class="line">         &#125;];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>来处理回调，不然应用无法知道有没有支付成功。返回<code>9000</code>代表支付成功。</p>
<p><strong>注意仔细查看本文中<code>Alipay</code>函数的最后几行，在那个地方有个<code>[[AlipaySDK defaultService] payOrder:orderString fromScheme:appScheme callback……</code>函数，在这个函数中处理回调的结果！！</strong></p>
<p><strong><code>AppDelegate.h</code>里面的<code>standbyCallback:\^(NSDictionary \*resultDic) {}];</code>是不会有回调结果的!!!</strong></p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>pip和easy_install</title>
    <url>/2016/09/28/pip%E5%92%8Ceasy-install/</url>
    <content><![CDATA[<h1 id="pip和easy-install"><a href="#pip和easy-install" class="headerlink" title="pip和easy_install"></a>pip和easy_install</h1><p>有句话这么说的：</p>
<blockquote>
<p>Don’t use easy_install, unless you like stabbing yourself in the face. Use pip.</p>
</blockquote>
<a id="more"></a>

<p><em>easy_install</em>诞生于2004年，用于安装PyPI上的各种程序包以及它们的依赖，是一种自动化的包管理工具。</p>
<p><em>pip</em>诞生于2008年，是<em>easy_install</em>的升级版。 具体区别如下：</p>
<table>
<thead>
<tr>
<th></th>
<th align="center">pip</th>
<th align="center">easy_install</th>
</tr>
</thead>
<tbody><tr>
<td>Installs from Wheels</td>
<td align="center">Yes</td>
<td align="center">No</td>
</tr>
<tr>
<td>Uninstall Packages</td>
<td align="center">Yes (pip uninstall)</td>
<td align="center">No</td>
</tr>
<tr>
<td>Dependency Overrides</td>
<td align="center">Yes (Requirements Files)</td>
<td align="center">No</td>
</tr>
<tr>
<td>List Installed Packages</td>
<td align="center">Yes (pip list and pip freeze)</td>
<td align="center">No</td>
</tr>
<tr>
<td>PEP 438 Support</td>
<td align="center">Yes</td>
<td align="center">No</td>
</tr>
<tr>
<td>Installation format</td>
<td align="center">‘Flat’ packages with egg-info metadata.</td>
<td align="center">Encapsulated Egg format</td>
</tr>
<tr>
<td>sys.path modification</td>
<td align="center">No</td>
<td align="center">Yes</td>
</tr>
<tr>
<td>Installs from Eggs</td>
<td align="center">No</td>
<td align="center">Yes</td>
</tr>
<tr>
<td>pylauncher support</td>
<td align="center">No</td>
<td align="center">Yes</td>
</tr>
<tr>
<td>Multi-version Installs</td>
<td align="center">No</td>
<td align="center">Yes</td>
</tr>
<tr>
<td>Exclude scripts during install</td>
<td align="center">No</td>
<td align="center">Yes</td>
</tr>
</tbody></table>
<p>总之，就是把几乎把easy_install的功能都包含进去了，还附加了许多新功能，尤其是<code>uninstall</code> 卸载功能以及安装失败不会对你的系统环境不会有什么影响。</p>
<p>[1] <a href="http://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install" target="_blank" rel="noopener">http://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install</a>   </p>
<p>[2] <a href="https://packaging.python.org/pip_easy_install/" target="_blank" rel="noopener">https://packaging.python.org/pip_easy_install/</a></p>
<hr>
<p>当然，也不是一定只能用pip，今天就有个很蛋疼的事。为了做Machine Learning的作业，我需要安装<code>pydot</code>等包。使用pip之后包被成功安装在<code>/Library/Python/2.7/site-packages</code>文件夹下，但是程序报错说<code>ImportError: No module named pydot</code>。然后我先后尝试了：</p>
<ol>
<li>把<code>/Library/Python/2.7/site-packages</code>路径加入 <code>~/.bash_profile</code></li>
<li><code>python -m pip install pydot</code></li>
<li>删除<code>pydot</code>然后冲洗安装</li>
<li>重新安装python</li>
<li>升级<code>pip</code></li>
</ol>
<p>……</p>
<p>等操作，都没有什么卵用，于是我打算重装系统了。</p>
<p>后来，在最绝望的时候，某个一直为情所困的女同志发消息说她好了，因为课业太重了，没功夫纠结。我就突然想到貌似可以用个东西代替<code>pip</code>，也就是<code>easy_install</code>。然后试了下，<code>easy_install</code>刚好也是把<code>pydot</code>装在<code>/Library/Python/2.7/site-packages/</code>目录下，然而程序可以运行了…… 真是神奇的不行</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>pdfMiner UnicodeEncodeError</title>
    <url>/2016/05/22/pdfMiner-UnicodeEncodeError/</url>
    <content><![CDATA[<h1 id="pdfMiner-UnicodeEncodeError"><a href="#pdfMiner-UnicodeEncodeError" class="headerlink" title="pdfMiner UnicodeEncodeError"></a>pdfMiner UnicodeEncodeError</h1><p>用pdfMiner读取中文pdf内容的时候，会遇到这个错误</p>
<p><strong>UnicodeEncodeError: ‘ascii’ codec can’t encode character u’\xe9’ in position 0: ordinal not in range(128)</strong></p>
<p>解决这个问题需要修改一点官方源码使得它可以读取中文字符。</p>
<a id="more"></a>

<p>下面是我读取PDF文件的函数，使用时将PDF文件路径传进去即可，函数会返回PDF中所有的内容。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_pdf_to_txt</span><span class="params">(path)</span>:</span></span><br><span class="line">    rsrcmgr = PDFResourceManager()</span><br><span class="line">    retstr = StringIO() </span><br><span class="line">    codec = <span class="string">'utf-8'</span></span><br><span class="line">    laparams = LAParams()</span><br><span class="line">    device = TextConverter(rsrcmgr, retstr, codec=codec, laparams=<span class="literal">None</span>)</span><br><span class="line">    fp = file(path, <span class="string">'rb'</span>)</span><br><span class="line">    interpreter = PDFPageInterpreter(rsrcmgr, device)</span><br><span class="line">    password = <span class="string">""</span></span><br><span class="line">    maxpages = <span class="number">0</span></span><br><span class="line">    caching = <span class="literal">True</span></span><br><span class="line">    pagenos=set()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> PDFPage.get_pages(fp, pagenos, maxpages=maxpages, password=password,caching=caching, check_extractable=<span class="literal">True</span>):</span><br><span class="line">        interpreter.process_page(page)</span><br><span class="line"></span><br><span class="line">    text = retstr.getvalue()</span><br><span class="line">    <span class="keyword">print</span> text</span><br><span class="line"></span><br><span class="line">    fp.close()</span><br><span class="line">    device.close()</span><br><span class="line">    retstr.close()</span><br><span class="line">    <span class="keyword">return</span> text</span><br></pre></td></tr></table></figure>

<p><strong>需要修改源码<code>convert.py</code>文件167行，将</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.outfp.write(<span class="string">u"é"</span>)</span><br></pre></td></tr></table></figure>
<p><strong>改为</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.outfp.write(<span class="string">u"é"</span>.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>
<hr>
<p>否则会有以下报错信息报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/Administer/Desktop/pdfReader.py"</span>, line <span class="number">33</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    convert_pdf_to_txt(<span class="string">'document1.pdf'</span>)</span><br><span class="line">  File <span class="string">"/Users/Administer/Desktop/pdfReader.py"</span>, line <span class="number">13</span>, <span class="keyword">in</span> convert_pdf_to_txt</span><br><span class="line">    device = TextConverter(rsrcmgr, retstr, codec=codec, laparams=<span class="literal">None</span>)</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pdfminer/converter.py"</span>, line <span class="number">180</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    PDFConverter.__init__(self, rsrcmgr, outfp, codec=codec, pageno=pageno, laparams=laparams)</span><br><span class="line">  File <span class="string">"/Library/Python/2.7/site-packages/pdfminer/converter.py"</span>, line <span class="number">167</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    self.outfp.write(<span class="string">u"é"</span>)</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode character u'</span>\xe9<span class="string">' in position 0: ordinal not in range(128)</span></span><br><span class="line"><span class="string">[Finished in 0.2s with exit code 1]Administer</span></span><br><span class="line"><span class="string">[shell_cmd: python -u "/Users/Administer/Desktop/pdfReader.py"]</span></span><br><span class="line"><span class="string">[dir: /Users/Administer/Desktop]</span></span><br><span class="line"><span class="string">[path: /usr/bin:/bin:/usr/sbin:/sbin]</span></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>python</tag>
        <tag>pdfMiner</tag>
      </tags>
  </entry>
  <entry>
    <title>windows常用破解软件</title>
    <url>/2015/09/16/windows%E5%B8%B8%E7%94%A8%E7%A0%B4%E8%A7%A3%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<p><strong>其实在天朝还是很幸福的，学习成本太低了，低到不要钱就能搞到所有东西～</strong></p>
<a id="more"></a>

<h2 id="win7激活工具-http-7xkfbb-com1-z0-glb-clouddn-com-15-9-8-79555991-WIN7-激活程序-exe"><a href="#win7激活工具-http-7xkfbb-com1-z0-glb-clouddn-com-15-9-8-79555991-WIN7-激活程序-exe" class="headerlink" title="[win7激活工具](http://7xkfbb.com1.z0.glb.clouddn.com/15-9-8/79555991-WIN7 激活程序.exe)"></a>[win7激活工具](<a href="http://7xkfbb.com1.z0.glb.clouddn.com/15-9-8/79555991-WIN7" target="_blank" rel="noopener">http://7xkfbb.com1.z0.glb.clouddn.com/15-9-8/79555991-WIN7</a> 激活程序.exe)</h2><p>下载下来直接点击激活就好</p>
<h2 id="win10激活工具"><a href="#win10激活工具" class="headerlink" title="win10激活工具"></a><a href="http://pan.baidu.com/s/1kF3lG" target="_blank" rel="noopener">win10激活工具</a></h2><p>下载下来一键激活</p>
<h2 id="office2010激活工具"><a href="#office2010激活工具" class="headerlink" title="office2010激活工具"></a><a href="http://pan.baidu.com/s/1qWnAk5u" target="_blank" rel="noopener">office2010激活工具</a></h2><p>使用方法：<a href="http://jingyan.baidu.com/article/7f766daf5bd0934100e1d05b.html" target="_blank" rel="noopener">参考百度经验</a></p>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>winform设置splitContainer固定大小</title>
    <url>/2016/03/20/winform%E8%AE%BE%E7%BD%AEsplitContainer%E5%9B%BA%E5%AE%9A%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<p>比如，要设置左边的<code>pannel</code>固定大小：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.splitContainer1.IsSplitterFixed = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">this</span>.splitContainer1.FixedPanel = FixedPanel.Panel1;</span><br></pre></td></tr></table></figure>

<p>其中</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.splitContainer1.IsSplitterFixed = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>用来设置<code>splitContainer1</code>的大小是否可以改变</p>
<p><code>IsSplitterFixed</code>获取或设置一个值，用以指示拆分器是固定的还是可移动的。如果为<strong>false</strong>就可以改变，<strong>true</strong>不可以改变。</p>
<blockquote>
<p>究竟为什么我来趟.NET这个坑，明明js写桌面端那么容易</p>
</blockquote>
]]></content>
      <tags>
        <tag>C＃</tag>
      </tags>
  </entry>
  <entry>
    <title>python操作Mongodb</title>
    <url>/2016/10/26/python%E6%93%8D%E4%BD%9CMongodb/</url>
    <content><![CDATA[<p>先安装<code>pymongo</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pymongo</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="from-pymongo-import-MongoClient"><a href="#from-pymongo-import-MongoClient" class="headerlink" title="from pymongo import MongoClient"></a>from pymongo import MongoClient</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br></pre></td></tr></table></figure>


<h2 id="创建链接"><a href="#创建链接" class="headerlink" title="创建链接"></a>创建链接</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">client = MongoClient()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">client = MongoClient(<span class="string">"mongodb://mongodb0.example.net:27017"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="连接到指定的database和collection"><a href="#连接到指定的database和collection" class="headerlink" title="连接到指定的database和collection"></a>连接到指定的database和collection</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = client.test_db</span><br><span class="line">collection = db.test_collection</span><br></pre></td></tr></table></figure>

<p>也可以像这样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = client[<span class="string">"test_db"</span>]</span><br><span class="line">collection = db[<span class="string">"test_collection"</span>]</span><br></pre></td></tr></table></figure>
<p>两种代码是等价的</p>
<p>其中<code>collection</code>相当于关系型数据库的表。</p>
<h2 id="增删查改操作"><a href="#增删查改操作" class="headerlink" title="增删查改操作"></a>增删查改操作</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">"name"</span>:<span class="string">"John"</span>,<span class="string">"age"</span>:<span class="number">23</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>&#125;</span><br><span class="line">collection.insert(data)</span><br><span class="line">collection.insert_one(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#inser_many()必须为数组</span></span><br><span class="line">dataList = []</span><br><span class="line">dataList.append(data)</span><br><span class="line">collection.insert_many(dataList)</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.remove(temp)      <span class="comment">#即便该temp不存在也不会报错</span></span><br><span class="line">collection.delete_one(temp)</span><br><span class="line">collection.delete_many(temp) <span class="comment">#与 .insert_many() 不同，在temp不是list类型时也不会报错</span></span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>空查询：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回collection所有记录</span></span><br><span class="line">collection.find(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>find_one()**显示满足条件的第一个collection，而</strong>find()**这是所有满足查询条件的一个数组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回所有名字叫lucy的人</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> collection.find(&#123;<span class="string">"name"</span>:<span class="string">"Lucy"</span>&#125;)</span><br><span class="line">	<span class="keyword">print</span> data</span><br></pre></td></tr></table></figure>

<p>查询指定条件的collection，可以指定一个活多个条件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.find_one(&#123;“name”:”Lucy”&#125;)</span><br><span class="line">collection.find_one(&#123;“name”:”Lucy”, “sex”:”female”&#125;)</span><br></pre></td></tr></table></figure>

<p><code>.count()</code>统计结果总条数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.find(&#123;“name”:”Lucy”&#125;).count()</span><br></pre></td></tr></table></figure>

<p>指定大于小于等于条件查询：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.find(&#123;“age”: &#123;“$lt”: <span class="number">30</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>这样的查询符号有 <code>$lt（小于）</code>， <code>$gt（大于）</code>， <code>$lte（小于等于）</code>， <code>$gte（大于等于）</code>， $ne（不等于），这与原生 MongoDB 中相同。</p>
<p>将查询结果按条件排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">collection.find().sort(<span class="string">"age"</span>)  <span class="comment">#默认，升序</span></span><br><span class="line">collection.find().sort(<span class="string">"age"</span>, pymongo.ASCENDING)   <span class="comment">#升序</span></span><br><span class="line">collection.find().sort(<span class="string">"age"</span>, pymongo.DESCENDING)  <span class="comment">#降序</span></span><br></pre></td></tr></table></figure>

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = collection.find_one(&#123;<span class="string">"name"</span>:<span class="string">"Lucy"</span>&#125;)</span><br><span class="line">temp2 = temp.copy()</span><br><span class="line">temp[<span class="string">"name"</span>] = <span class="string">"Jordan"</span></span><br><span class="line">collection.save(temp)   <span class="comment">#或 .update() ，注意参数形式</span></span><br><span class="line">collection.update(temp, temp2)  <span class="comment">#将temp更新为temp2</span></span><br></pre></td></tr></table></figure>

<hr>
<p>如果直接输出查询结果，会发现输出的是一“团”连续的，没有锁进的JSON数据，完全没有办法看，这时可以通过下面这行代码来输出格式化的JSON数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># item 是你要输出的数据</span></span><br><span class="line"><span class="keyword">print</span> json.dumps(item, indent=<span class="number">4</span>, sort_keys=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>



<blockquote>
<p><a href="http://xitongjiagoushi.blog.51cto.com/9975742/1657096" target="_blank" rel="noopener">http://xitongjiagoushi.blog.51cto.com/9975742/1657096</a><br><a href="http://api.mongodb.org/python/current/tutorial.html" target="_blank" rel="noopener">http://api.mongodb.org/python/current/tutorial.html</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hazel部署Electron更新服务器</title>
    <url>/2018/06/19/%E4%BD%BF%E7%94%A8Hazel%E9%83%A8%E7%BD%B2Electron%E6%9B%B4%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p><a href="https://github.com/zeit/hazel" target="_blank" rel="noopener">Hazel</a>是一款轻量级的Electron 程序更新服务器，可以在<a href="https://zeit.co/now" target="_blank" rel="noopener">Now</a>上免费部署。它会自动从<code>GitHub Releases</code>中拉取更新文件，并且利用 GitHub CDN 的强大性能，下载很快。</p>
<a id="more"></a>


<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先在自己电脑上安装一个 <a href="https://zeit.co/now#get-started" target="_blank" rel="noopener">Now桌面端</a>，然后创建一个账户登录进去。</p>
<p>然后通过命令行进入到项目更目录下，比如项目文件夹叫<code>app-project</code>，直接输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">now zeit/hazel</span><br></pre></td></tr></table></figure>

<p>然后就根据提示，输入你github的用户名<code>ACCOUNT</code>以及仓库<code>REPOSITORY</code>的名字。</p>
<p>之后，now会给你一个更新的URL，需要把这个URL记下来，以后用得到，比如我的就是：<code>https://electrontest-xpugzqzjyt.now.sh </code></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>在程序的主线程（main.js）里面添加以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, autoUpdater &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = &lt;之前的更新URL地址&gt;</span><br><span class="line"><span class="keyword">const</span> feed = <span class="string">`<span class="subst">$&#123;server&#125;</span>/update/<span class="subst">$&#123;process.platform&#125;</span>/<span class="subst">$&#123;app.getVersion()&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">autoUpdater.setFeedURL(feed)</span><br></pre></td></tr></table></figure>

<p>然后就可以使用了。</p>
<h3 id="github端"><a href="#github端" class="headerlink" title="github端"></a>github端</h3><p>在github网页直接发布release就好。</p>
<p>但是需要注意的是，windows端发布需要直接上传<code>.exe</code>文件和<code>.nupkg</code>文件以及一个<code>RELEASES</code>文件。<strong>直接上传zip压缩文件是没用的！</strong></p>
<p>可以参考<a href="https://github.com/electron/electron-api-demos/releases" target="_blank" rel="noopener">electron-api-demos的release</a></p>
]]></content>
      <tags>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Mac终端里的bogon</title>
    <url>/2015/10/19/%E4%BF%AE%E6%94%B9Mac%E7%BB%88%E7%AB%AF%E9%87%8C%E7%9A%84bogon/</url>
    <content><![CDATA[<p>打开终端 用户名前会有个 bogon，看着不爽😕，怎么改掉呢？</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-19/79349613.jpg"></p>
<a id="more"></a>

<p>通过这个命令，就可以了。注意<code>HostName</code>是大写！！</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo scutil --<span class="built_in">set</span> HostName 要改的名字</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="bogon是什么？"><a href="#bogon是什么？" class="headerlink" title="bogon是什么？"></a>bogon是什么？</h2><p>bogon是指那些不该出现在internet路由表中的地址吧<br>这些地址应该包括：    </p>
<ol>
<li>私有地址如10，172.16-32,192.168…..</li>
<li>还未正式分配出去的地址</li>
</ol>
<p>Mac 下的终端经常有时候前面的计算机名会错误的显示成 bogon. 这是因为终端会先向 DNS 请求查询当前 IP 的反向域名解析的结果，如果查询不到再显示我们设置的计算机名。而由于我们的 DNS 错误地将保留地址反向的 NS 查询结果返回了 bogon. 其中 bogon 本应该用来指虚假的 IP 地址，而非保留 IP 地址。因此就出现了会时不时地打印 bogon 这种奇怪名字作为计算机名的现象了。</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>react-navigation和react-native-navigation</title>
    <url>/2017/10/04/react-navigation%E5%92%8Creact-native-navigation/</url>
    <content><![CDATA[<p>写项目的时候肯定会遇到实现类似于iOS 的Navigation Controller或者Tab bar之类的界面。官方只有一个<code>NavigatorIOS</code>的控件可以用，但是这个控件只能用在iOS平台，安卓的要另外重写，十分鸡肋。所以官方还提供了两个控件可以选择：react-navigation 和 react-native-navigation。这两个的区别我感觉网上写的很少，所以写这篇博客来记下两个区别。。。</p>
<blockquote>
<p>当然如果懒得看完，可以直接用这个结论：<br><strong>用 react-navigation！！！</strong><br><strong>好用的多！！！</strong></p>
</blockquote>
<a id="more"></a>


<h2 id="react-native-navigation"><a href="#react-native-navigation" class="headerlink" title="react-native-navigation"></a>react-native-navigation</h2><p>react-native 版本需要大于 0.43，nmp 版本大于 3.0</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add react-native-navigation@latest</span><br></pre></td></tr></table></figure>

<h4 id="iOS-安装"><a href="#iOS-安装" class="headerlink" title="iOS 安装"></a>iOS 安装</h4><p>通过 /iOS/<project name>.xcodeproj 打开项目</p>
<ol>
<li><code>Libraries</code>-&gt;<code>Add files to [project name]</code> 添加(Add) <code>./node_modules/react-native-navigation/ios/ReactNativeNavigation.xcodeproj</code><br><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-9-6/82366898.jpg"></li>
<li>点击<code>Build Phases</code>，在 <code>Link Binary With Libraries</code>里添加 <code>libReactNativeNavigation.a</code><br><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-9-6/92007932.jpg"></li>
<li>点击<code>Build Settings</code>，在<code>Header Search Paths</code>里添加 <code>$(SRCROOT)/../node_modules/react-native-navigation/ios</code>，确保是<code>recursive</code>模式。<br><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-9-6/18147584.jpg"></li>
<li>修改<code>AppDelegate.m</code>如下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">  NSURL *jsCodeLocation;</span><br><span class="line">#ifdef DEBUG</span><br><span class="line">  &#x2F;&#x2F;  jsCodeLocation &#x3D; [NSURL URLWithString:@&quot;http:&#x2F;&#x2F;localhost:8081&#x2F;index.ios.bundle?platform&#x3D;ios&amp;dev&#x3D;true&quot;];</span><br><span class="line">  jsCodeLocation &#x3D; [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</span><br><span class="line">#else</span><br><span class="line">  jsCodeLocation &#x3D; [[NSBundle mainBundle] URLForResource:@&quot;main&quot; withExtension:@&quot;jsbundle&quot;];</span><br><span class="line">#endif</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; **********************************************</span><br><span class="line">  &#x2F;&#x2F; *** DON&#39;T MISS: THIS IS HOW WE BOOTSTRAP *****</span><br><span class="line">  &#x2F;&#x2F; **********************************************</span><br><span class="line">  self.window &#x3D; [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</span><br><span class="line">  self.window.backgroundColor &#x3D; [UIColor whiteColor];</span><br><span class="line">  [[RCCManager sharedInstance] initBridgeWithBundleURL:jsCodeLocation launchOptions:launchOptions];</span><br><span class="line">  </span><br><span class="line">  &#x2F;*</span><br><span class="line">   &#x2F;&#x2F; original RN bootstrap - remove this part</span><br><span class="line">   RCTRootView *rootView &#x3D; [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class="line">   moduleName:@&quot;example&quot;</span><br><span class="line">   initialProperties:nil</span><br><span class="line">   launchOptions:launchOptions];</span><br><span class="line">   self.window &#x3D; [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</span><br><span class="line">   UIViewController *rootViewController &#x3D; [UIViewController new];</span><br><span class="line">   rootViewController.view &#x3D; rootView;</span><br><span class="line">   self.window.rootViewController &#x3D; rootViewController;</span><br><span class="line">   [self.window makeKeyAndVisible];</span><br><span class="line">   *&#x2F;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="Android-安装"><a href="#Android-安装" class="headerlink" title="Android 安装"></a>Android 安装</h4><p>在<code>android/settings.gradle</code>里面添加：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">include ':react-native-navigation'</span><br><span class="line"> project(':react-native-navigation').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-navigation/android/app/')</span><br></pre></td></tr></table></figure>

<p>更新<code>android/app/build.gradle</code>文件如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 25</span><br><span class="line">    buildToolsVersion "25.0.1"</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: "libs", include: ["*.jar"])</span><br><span class="line">    compile "com.android.support:appcompat-v7:23.0.1"</span><br><span class="line">    compile "com.facebook.react:react-native:+"</span><br><span class="line">    compile project(':react-native-navigation')</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <code>android/app/src/main/java/com/yourproject/MainActivity.java</code>文件，MainActivity 应该继承 <code>com.reactnativenavigation.controllers.SplashActivity</code> 而不是 <code>ReactActivity</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.reactnativenavigation.controllers.SplashActivity;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">SplashActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><code>MainApplication.java</code>文件添加以下内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.reactnativenavigation.NavigationApplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">NavigationApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDebug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Make sure you are using BuildConfig from your own application</span></span><br><span class="line">        <span class="keyword">return</span> BuildConfig.DEBUG;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Add additional packages you require here</span></span><br><span class="line">        <span class="comment">// No need to add RnnPackage and MainReactPackage</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">            <span class="comment">// eg. new VectorIconsPackage()</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ReactPackage&gt; <span class="title">createAdditionalReactPackages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPackages();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>更新 <code>AndroidManifest.xml</code> 把 <strong>android:name</strong> 的值改成 <code>.MainApplication</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".MainApplication"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>这里我们实现三个页面来介绍react-native-navigation的用法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FirstTabScreen.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRegistry, Text, View, StyleSheet, Button &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstTabScreen</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  onPushAnother = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.navigator.push(&#123;</span><br><span class="line">      screen: <span class="string">'example.PushedScreen'</span>,</span><br><span class="line">      title: <span class="string">'Pushed Screen'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">          onPress=&#123;<span class="keyword">this</span>.onPushAnother&#125;</span><br><span class="line">          title=<span class="string">"Push Another Screen"</span> /&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.content&#125;&gt;first screen&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">    justifyContent: <span class="string">'center'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  content: &#123;</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    marginTop: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//SecondTabScreen.js &amp;&amp; PushedScreen.js(改下&lt;Text&gt;里面的文字就好)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRegistry, Text, View, StyleSheet &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondTabScreen</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;Text style=&#123;styles.content&#125;&gt;second screen&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">    justifyContent: <span class="string">'center'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  content: &#123;</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    marginTop: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<br>

<br>

<hr>
<p>以及 <code>index.js</code>，这是<code>react-native-navigation</code>中最重要的部分，没有之一。注意看这里的操作，通过<code>Navigation.registerComponent</code>方法注册所有的页面，每个页面手动分了一个id，比如<code>example.FirstTabScreen</code>就是<code>“example.FirstTabScreen”</code>，之后如果用到页面就通过这个id把它调出来。而 <code>registerScreens()</code>方法只能调用一次就是说<strong>你要把你项目中所有的页面全部在这里写一遍！！！</strong>当时我也很震惊，哪有这么写框架的，一点也不优雅，但是它真是这么干的，而且官方的例子也是这么写的:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; Navigation &#125; <span class="keyword">from</span> <span class="string">'react-native-navigation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> FirstTabScreen <span class="keyword">from</span> <span class="string">'./FirstTabScreen'</span>;</span><br><span class="line"><span class="keyword">import</span> SecondTabScreen <span class="keyword">from</span> <span class="string">'./SecondTabScreen'</span>;</span><br><span class="line"><span class="keyword">import</span> PushedScreen <span class="keyword">from</span> <span class="string">'./PushedScreen'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// register all screens of the app (including internal ones)</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">registerScreens</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Navigation.registerComponent(<span class="string">'example.FirstTabScreen'</span>, () =&gt; FirstTabScreen);</span><br><span class="line">  Navigation.registerComponent(<span class="string">'example.SecondTabScreen'</span>, () =&gt; SecondTabScreen);</span><br><span class="line">  Navigation.registerComponent(<span class="string">'example.PushedScreen'</span>, () =&gt; PushedScreen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上页面放到一个screen文件夹中。</p>
<p>然后<code>index.ios.js</code>加入以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Navigation &#125; <span class="keyword">from</span> <span class="string">'react-native-navigation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; registerScreens &#125; <span class="keyword">from</span> <span class="string">'./screens'</span>;</span><br><span class="line"></span><br><span class="line">registerScreens(); <span class="comment">// this is where you register all of your app's screens</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start the app</span></span><br><span class="line">Navigation.startTabBasedApp(&#123;</span><br><span class="line">  tabs: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'One'</span>,</span><br><span class="line">      screen: <span class="string">'example.FirstTabScreen'</span>, <span class="comment">// this is a registered name for a screen</span></span><br><span class="line">      title: <span class="string">'Screen One'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Two'</span>,</span><br><span class="line">      screen: <span class="string">'example.SecondTabScreen'</span>,</span><br><span class="line">      title: <span class="string">'Screen Two'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-10-3/74589375.jpg"></p>
<h2 id="react-navigation"><a href="#react-navigation" class="headerlink" title="react-navigation"></a>react-navigation</h2><p>这个是airbnb团队开发的，个人感觉比<code>react-native-navigation</code>好用，强烈推荐</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save react-navigation</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add react-navigation</span><br></pre></td></tr></table></figure>

<p>修改<code>index.ios.js</code>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  Text,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; StackNavigator &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    title: <span class="string">'Welcome'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, Navigation!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">const</span> SimpleApp = StackNavigator(&#123;</span><br><span class="line">  Home: &#123; <span class="attr">screen</span>: HomeScreen &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// if you are using create-react-native-app you don't need this line</span></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'SimpleApp'</span>, () =&gt; SimpleApp);</span><br></pre></td></tr></table></figure>

<p>就可以了，十分方便</p>
<h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><p>这里我们同样用三个页面来介绍react-navigation的用法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FirstTabScreen.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRegistry, Text, View, StyleSheet, Button &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; StackNavigator &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"><span class="keyword">import</span> PushedScreen <span class="keyword">from</span> <span class="string">'./PushedScreen'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fcreen</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                &lt;Button</span><br><span class="line">                onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.navigate(<span class="string">'Pushed'</span>, &#123;<span class="attr">name</span>: <span class="string">'Pushed Screen'</span>&#125;)&#125;</span><br><span class="line">                    title=<span class="string">"Push Another Screen"</span> /&gt;</span><br><span class="line">                &lt;Text style=&#123;styles.content&#125;&gt;first screen&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstTabScreen</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        FPage = StackNavigator(&#123;</span><br><span class="line">            FirstTabScreen: &#123;</span><br><span class="line">                screen: Fcreen,</span><br><span class="line">            &#125;,</span><br><span class="line">            Pushed: &#123;</span><br><span class="line">                navigationOptions: <span class="function">(<span class="params">&#123; navigation &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">                    title: <span class="string">'Pushed Screen'</span>,</span><br><span class="line">                &#125;),</span><br><span class="line">                </span><br><span class="line">                screen: PushedScreen,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">FPage</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">    container: &#123;</span><br><span class="line">        flex: <span class="number">1</span>,</span><br><span class="line">        alignItems: <span class="string">'center'</span>,</span><br><span class="line">        justifyContent: <span class="string">'center'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    content: &#123;</span><br><span class="line">        textAlign: <span class="string">'center'</span>,</span><br><span class="line">        marginTop: <span class="number">10</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//SecondTabScreen.js 和 PushedScreen.js(改改字符串)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRegistry, Text, View, StyleSheet &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondTabScreen</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;Text style=&#123;styles.content&#125;&gt;second screen&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">    justifyContent: <span class="string">'center'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  content: &#123;</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">    marginTop: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>以及<code>index.ios.js</code> 或 <code>index.android.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  Text,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; StackNavigator, TabNavigator &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"><span class="keyword">import</span> FirstTabScreen <span class="keyword">from</span> <span class="string">'./view/FirstTabScreen'</span></span><br><span class="line"><span class="keyword">import</span> SecondTabScreen <span class="keyword">from</span> <span class="string">'./view/SecondTabScreen'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    title: <span class="string">'Welcome'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, Navigation!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = TabNavigator(&#123;</span><br><span class="line">  First: &#123;</span><br><span class="line">    screen: FirstTabScreen,</span><br><span class="line">  &#125;,</span><br><span class="line">  Second: &#123;</span><br><span class="line">    screen: SecondTabScreen,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  tabBarPosition: <span class="string">'bottom'</span>,</span><br><span class="line">  animationEnabled: <span class="literal">true</span>,</span><br><span class="line">  tabBarOptions: &#123;</span><br><span class="line">    activeTintColor: <span class="string">'#e91e63'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// if you are using create-react-native-app you don't need this line</span></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'test'</span>, () =&gt; test);</span><br></pre></td></tr></table></figure>



<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-10-4/80706001.jpg"></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-10-9/72844807.jpg"></p>
]]></content>
      <tags>
        <tag>React-Native</tag>
      </tags>
  </entry>
  <entry>
    <title>使用iOS Homekit控制树莓派</title>
    <url>/2017/01/10/%E4%BD%BF%E7%94%A8iOS-Homekit%E6%8E%A7%E5%88%B6%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
    <content><![CDATA[<h1 id="使用iOS-Homekit控制树莓派"><a href="#使用iOS-Homekit控制树莓派" class="headerlink" title="使用iOS Homekit控制树莓派"></a>使用iOS Homekit控制树莓派</h1><p><code>HomeKit</code> 就是苹果官方的智能家居平台解决方案，包括移动设备 SDK，智能家居硬件通信协议 (HAP: HomeKit Accessory Protocol) 、以及 MFi(Made for iPhone/iPod/iPad) 认证等等。通过 WiFi 或蓝牙连接智能家居设备（或 bridge 设备），也可以利用 Apple TV(4代) 或闲家中的置 iPad 实现设备的远程控制（HAP over iCloud）。</p>
<p>但是 HAP 协议部分是需要加入 MFi Program 才能获取文档，而且 MFi Program 无法以个人开发者身份加入。</p>
<p>好在有好心人（大牛）逆向了 HAP 的服务端协议，给了我们折腾党一个机会～</p>
<a id="more"></a>

<p>为了实现这个，我们需要用到一个库，叫做<a href="https://github.com/nfarina/homebridge" target="_blank" rel="noopener">Homebridge</a>。<code>Homebridge</code>是一个用Node.js实现的轻量级后台，能够在局域网内与苹果的Homekit API对接，并且支持插件。</p>
<p>然后我们用到的插件叫做<a href="https://github.com/rsg98/homebridge-gpio-wpi" target="_blank" rel="noopener">Homebridge GPIO WiringPi</a>，用来控制树莓派上的GPIO。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>先安装 <code>Homebridge</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g homebridge</span><br></pre></td></tr></table></figure>

<p>再安装<code>Homebridge GPIO WiringPi</code>插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g homebridge-gpio-wpi</span><br></pre></td></tr></table></figure>

<h2 id="创建config-json文件"><a href="#创建config-json文件" class="headerlink" title="创建config.json文件"></a>创建<code>config.json</code>文件</h2><p>在根目录下，进入 <code>.homebridge</code> 文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.homebridge/</span><br></pre></td></tr></table></figure>


<p>新建 <code>config.json</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim config.json</span><br></pre></td></tr></table></figure>

<p>然后文件内容如下：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"bridge"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Homebridge"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"CC:22:3D:E3:CE:32"</span>,</span><br><span class="line">        <span class="string">"port"</span>: <span class="number">51826</span>,</span><br><span class="line">        <span class="string">"pin"</span>: <span class="string">"031-45-155"</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"This has some fake accessories"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"accessories"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"accessory"</span>: <span class="string">"GPIO"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Yellow Light"</span>,</span><br><span class="line">            <span class="string">"pin"</span>: <span class="number">27</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"accessory"</span>: <span class="string">"GPIO"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Red Light"</span>,</span><br><span class="line">            <span class="string">"pin"</span>: <span class="number">22</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"accessory"</span>: <span class="string">"GPIO"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Green Light"</span>,</span><br><span class="line">            <span class="string">"pin"</span>: <span class="number">17</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    <span class="string">"platforms"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>bridge</code>字段表示这个设备的基本信息，<code>username</code>可以随便写，<code>pin</code>是链接时候需要用到的一串数字，等下会看到。<code>accessories</code>是声明GPIO，其中，里面的<code>pin</code>是GPIO引脚的编号（BCM），<code>accessory</code>必须写GPIO。</p>
<p>引脚信息如下：</p>
<p> | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |<br>|—–|—–|———|——|—|—|—|—|——|———|—–|—–|<br> |     |     |    3.3v |      |   |  1 || 2  |   |      | 5v      |     |     |<br> |   2 |   8 |   SDA.1 |  OUT | 0 |  3 || 4  |   |      | 5V      |     |     |<br> |   3 |   9 |   SCL.1 |   IN | 1 |  5 || 6  |   |      | 0v      |     |     |<br> |   4 |   7 | GPIO. 7 |   IN | 1 |  7 || 8  | 1 | ALT0 | TxD     | 15  | 14  |<br> |     |     |      0v |      |   |  9 || 10 | 1 | ALT0 | RxD     | 16  | 15  |<br> |  17 |   0 | GPIO. 0 |  OUT | 0 | 11 || 12 | 1 | IN   | GPIO. 1 | 1   | 18  |<br> |  27 |   2 | GPIO. 2 |  OUT | 0 | 13 || 14 |   |      | 0v      |     |     |<br> |  22 |   3 | GPIO. 3 |  OUT | 0 | 15 || 16 | 0 | IN   | GPIO. 4 | 4   | 23  |<br> |     |     |    3.3v |      |   | 17 || 18 | 0 | IN   | GPIO. 5 | 5   | 24  |<br> |  10 |  12 |    MOSI |   IN | 0 | 19 || 20 |   |      | 0v      |     |     |<br> |   9 |  13 |    MISO |   IN | 0 | 21 || 22 | 0 | IN   | GPIO. 6 | 6   | 25  |<br> |  11 |  14 |    SCLK |   IN | 0 | 23 || 24 | 1 | IN   | CE0     | 10  | 8   |<br> |     |     |      0v |      |   | 25 || 26 | 1 | IN   | CE1     | 11  | 7   |<br> |   0 |  30 |   SDA.0 |   IN | 1 | 27 || 28 | 1 | IN   | SCL.0   | 31  | 1   |<br> |   5 |  21 | GPIO.21 |   IN | 1 | 29 || 30 |   |      | 0v      |     |     |<br> |   6 |  22 | GPIO.22 |   IN | 1 | 31 || 32 | 0 | IN   | GPIO.26 | 26  | 12  |<br> |  13 |  23 | GPIO.23 |   IN | 0 | 33 || 34 |   |      | 0v      |     |     |<br> |  19 |  24 | GPIO.24 |   IN | 0 | 35 || 36 | 0 | IN   | GPIO.27 | 27  | 16  |<br> |  26 |  25 | GPIO.25 |   IN | 0 | 37 || 38 | 0 | IN   | GPIO.28 | 28  | 20  |<br> |     |     |      0v |      |   | 39 || 40 | 0 | IN   | GPIO.29 | 29  | 21  |<br> | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |</p>
<p>之后保存文件。</p>
<h2 id="连接电路"><a href="#连接电路" class="headerlink" title="连接电路"></a>连接电路</h2><p>注意GPIO引脚的编号，我们用的是BCM编号，三个引脚分别为17，27，22，如图：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-1-11/20899053-file_1484095589589_1f1.jpg"></p>
<h2 id="运行Homebridge"><a href="#运行Homebridge" class="headerlink" title="运行Homebridge"></a>运行Homebridge</h2><p>直接在终端输入命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">homebridge</span><br></pre></td></tr></table></figure>

<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-1-11/90476577-file_1484094408691_16d0c.png"></p>
<p>打开手机的Homekit，按照提示连接到树莓派上，如下：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-1-11/60340144-file_1484094685902_1812d.png"></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-1-11/6495076-file_1484094975726_17911.png"></p>
<p>然后就可以控制灯泡了。。。</p>
<p>可以尝试用Siri控制下开关，试试</p>
<blockquote>
<p>Turn on the Red Light</p>
</blockquote>
<p>很神奇～</p>
<hr>
<h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><p><strong>1. /usr/local/lib/node_modules/homebridge-gpio-wpi/index.js:33<br>      throw new Error(‘Pin ‘ + this.pin + ‘ is not readable (‘ + currentPinStatus.error.code + ‘).  Did you run gpio export as the right user?’);</strong></p>
<p>可能是引脚的问题，尝试在终端运行，注意替换引脚的编号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpio -g mode 22 out   </span><br><span class="line">gpio -g mode 22 down  </span><br><span class="line">gpio <span class="built_in">export</span> 22 out</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>如何区分UITableView里的UITextField（UIButton）</title>
    <url>/2015/08/13/%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86UITableView%E9%87%8C%E7%9A%84UITextField%E5%92%8CUIButton/</url>
    <content><![CDATA[<p>如果tableView里面添加了TextField，如何知道每一个TextField的值呢？</p>
<p>如果是静态的tableView就可以用<code>control－drag</code>大法（从View相应控件按住control键拖到controller上）。</p>
<p>但是如果是动态的呢？</p>
<a id="more"></a>

<p>不能用control－drag，因为cell都是重用的的，这样没发知道是哪一个TextField，就算你这么做了系统也会报错。</p>
<p>这时可以用这个方法：**<em>把每个textField的tag赋值，通过不同的Tag区分不同的textField**</em></p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>首先肯定是要自定义一个custom cell,我是这样定义的：新建一个TableViewCell类继承UITableViewCell，然后在里面定义了label和textField</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-13/94552121.jpg"></p>
<p>然后就新建一个UITableView，<code>(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath</code>这个方法里面这样定义：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    TableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:<span class="string">@"cell"</span> forIndexPath:indexPath];</span><br><span class="line">    cell.label.text = [<span class="built_in">NSString</span> stringWithFormat: <span class="string">@"%ld "</span>, (<span class="keyword">long</span>)indexPath.row ];</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  每个textField的tag对应每行的序号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    cell.textFiedl.tag = indexPath.row;</span><br><span class="line">    cell.textFiedl.delegate = <span class="keyword">self</span>;</span><br><span class="line">    cell.textFiedl.text = <span class="keyword">self</span>.array[indexPath.row];</span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就相当于给每个textField分了不同的tag值。</p>
<p>然后，通过<code>(void)textFieldDidEndEditing:(UITextField *)textField</code>方法获得每次输入完之后对应textField的值：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">-(<span class="keyword">void</span>)textFieldDidEndEditing:(<span class="built_in">UITextField</span> *)textField&#123;</span><br><span class="line">    <span class="keyword">self</span>.array[textField.tag] =  textField.text;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="keyword">self</span>.array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>[代码下载（OC  Xcode6.4）](<a href="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-13/48999955-TextField" target="_blank" rel="noopener">http://7xkfbb.com1.z0.glb.clouddn.com/15-8-13/48999955-TextField</a> in tableView.zip)</p>
<hr>
<p>当然有人会问了，如果cell里面放了button怎么办？button没有对应的带代理法呀？</p>
<p>很简单，其实也是通过tag值区分，只是在<code>(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath</code>方法里面加多一行代码，比如我定义了一个<code>saveButton</code>:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    TableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:<span class="string">@"cell"</span> forIndexPath:indexPath];</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  每个textField的tag对应每行的序号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    cell.saveButton.tag = indexPath.row;</span><br><span class="line">    </span><br><span class="line">    [cell.saveButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(saveAction) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>这样每次点击了<code>saveButton</code>都会运行一遍<code>saveAction</code></p>
<p>我们在<code>saveAction</code>里面区分tag值就可以知道点击了哪个button。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">-(<span class="keyword">void</span>)saveAction:(<span class="built_in">UIButton</span>*)sender</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span> (sender.tag == <span class="number">0</span>) </span><br><span class="line">     &#123;</span><br><span class="line">         <span class="comment">//   ………</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当然使用前也要自定义一个custom cell</p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>伦敦</title>
    <url>/2016/12/24/%E4%BC%A6%E6%95%A6/</url>
    <content><![CDATA[<h1 id="伦敦"><a href="#伦敦" class="headerlink" title="伦敦"></a>伦敦</h1><p>这次行程比较紧张，毕竟出发前一周都不知道护照能不能到我手上，但是依然相信德国人的办事效率以及自己的人品，强行定了欧洲的机票和酒店。</p>
<p>从纽瓦克机场起飞，经过12小时的飞行，早上一早就降落到希思罗机场。这里强烈推荐下维珍亚特兰大航空，经济舱可以选很多种酒类，吃的也贼好，简直媲美海南航空。</p>
<p><img src="../../../../../image/b778fb25-913b-4af8-a086-179061cb2df7.jpg"></p>
<p>早上8点到希思罗机场，海关几乎没人排队，问了我来英国干嘛的，我说来玩的就放我过了。</p>
<p><img src="../../../../../image/fa643646-4473-421f-ae40-9d6fdc417ab9.jpg"></p>
<p>然后就尝试在机场打车，结果惊奇的发现，准备来欧洲玩二十几天的我居然只带了美元和人民币……还好Uber可以用美元结账。不过第一次去希思罗机场的同学要特别注意，这个机场有个异常奇葩的设计，Uber APP让我在机场的level 3 上车，但是所谓level 3其实是2楼。。。我一共打了3次车，到了第三次才有司机打电话跟我说了这个问题，然后接到我了，之前的司机一直在不停地绕圈，然后取消订单，扣我的钱，白白浪费了我10英镑。</p>
<p><img src="../../../../../image/b77b6bde-7289-4fe5-95c1-f64095e1c700.jpg" alt="机场内随处可见的华为广告"></p>
<center>机场内随处可见的华为广告</center>

<h2 id="大英博物馆"><a href="#大英博物馆" class="headerlink" title="大英博物馆"></a>大英博物馆</h2><p>之后就去了大英博物馆。作为世界上历史最悠久的博物馆之一，大英博物馆成立于1753年，已经有261年的历史，藏品超过800万件，应该是去伦敦的必去景点。</p>
<p><img src="../../../../../image/95f1dcbe-4452-4b82-8cda-6452b622df9b.jpg"></p>
<p>然而著名的大英博物馆，说实话，真的令我失望，完全比不上纽约大都会，或者巴黎卢浮宫，里面光线很暗，藏品残缺不缺而且还看不清楚的，哪里像纽约大都会博物馆，连乾隆老爷子的金马鞍都有。</p>
<p><img src="../../../../../image/115f998e-4f54-443b-8dc5-a46d2984ccb1.jpg"></p>
<p><img src="../../../../../image/74f8c018-40f0-4d37-ab81-169839db8e0a.jpg"></p>
<p>我逛了大约半小时就出来了，现在想想可能是小伙伴带我走错门了？或者是在整修？或者我在倒时差产生了幻觉？或者我撸多了眼花了？反正下次有机会我会好好去看下的。</p>
<h2 id="伦敦塔桥和伦敦塔"><a href="#伦敦塔桥和伦敦塔" class="headerlink" title="伦敦塔桥和伦敦塔"></a>伦敦塔桥和伦敦塔</h2><p>时差都没倒好就去了伦敦塔桥，主要是为了帮我国学大师室友送东西给妹子。大师就是大师，我本科的时候完全不敢想想这种操作：在纽约买个包包，让自己室友带上然后横跨大西洋送给一个刚好去伦敦玩的妹子……工科学校限制了我的想象力，下辈子高考我一定选个文科学校。</p>
<p>伦敦塔桥(Tower Bridge)是英国伦敦泰晤士河口的第一座桥，也是泰晤士河上15座桥梁中最知名的一座，是伦敦的象征，有“伦敦正门”之称。造型古典，十分漂亮。</p>
<p><img src="../../../../../image/5892a0cc-d38b-4eca-8c53-40fc31752ec1.jpg"></p>
<p><img src="../../../../../image/c16db0da-9d41-4642-9f62-ff651043d425.jpg"></p>
<p>然后就去了隔壁的景点，伦敦塔。伦敦塔的官方名称是“女王陛下的宫殿与城堡“(Her Majesty’s Palace and Fortress, The Tower of London)。一开始我们也不知道这中英文名字可以差得那么大，只记得一直找不到伦敦塔在哪，然后去了一个”名字很长不记得怎么拼写的“城堡。</p>
<p><img src="../../../../../image/25f37359-e0a6-4af9-b207-bf69a968e541.jpg"></p>
<p>伦敦塔修建于11世纪，是诸多历史事件发生地，1988年被列为世界文化遗产。它曾作为伦敦的军事要塞、军械库、国库、铸币厂、宫殿、刑场、公共档案办公室、天文台、避难所和监狱，特别是关押皇室、贵族等重要人物的监狱。最有名的囚犯当属亨利八世的第二任王后安·柏林（关于亨利八世和他的五个王后。伊丽莎白一世在其姐姐玛丽一世统治时曾在此入狱一段时间；伦敦塔最后一次作为监狱使用是在第二次世界大战期间，关押鲁道夫·赫斯。</p>
<p>城堡里面有很多穿着古代衣服的工作人员，在里面浏览别有一番风味。</p>
<p><img src="../../../../../image/cd1b0f9c-db2f-4aa9-a6ef-b476a3620655.jpg"></p>
<p><img src="../../../../../image/18425ee5-ef8a-4855-8e96-c0421c4bcd5d.jpg"></p>
<p><img src="../../../../../image/2cef70fb-cfc0-4203-93df-7b76ec65f805.jpg"></p>
<p><img src="../../../../../image/3139a270-44db-4c0b-aa6c-9b86e17ef605.jpg"></p>
<h2 id="大本钟和威斯敏斯特宫"><a href="#大本钟和威斯敏斯特宫" class="headerlink" title="大本钟和威斯敏斯特宫"></a>大本钟和威斯敏斯特宫</h2><p><img src="../../../../../image/d4fd6a98-84b5-4d72-9677-16c97423efb9.jpg"></p>
<p>威斯敏斯特宫，也就是英国的国会大厦，大本钟是国会大厦的钟楼，建于1859年伦敦泰晤士河畔，是伦敦著名古钟和标志性建筑之一。出现在了无数部电影里面，旁边的桥东里面好像还有007的秘密基地以及全新的阿斯顿马丁，当然我之后去看了下发现没有……</p>
<p><img src="../../../../../image/53606b52-0a8a-40ce-818f-7ab29385ac6e.jpg"></p>
<p>钟楼高95米，钟直径9英尺，重13.5吨。从1859年开始大本钟便开始为伦敦报时，至今已有一个多世纪。大本钟也是英国人庆祝新年的重要场所。然而我去的那天威斯敏斯特宫在施工，没能进去参观。</p>
<h2 id="西敏寺"><a href="#西敏寺" class="headerlink" title="西敏寺"></a>西敏寺</h2><p>西敏寺， 又叫威斯敏斯特大教堂，始建于公元960 年，1045年进行了扩建，1065年建成，1220年至1517年进行了重建。它既是英国国教的礼拜堂，又是历代国王加冕及王室成员举行婚礼的地方，威廉王子的婚礼于2011年在此举行。它可以说是英国地位最高的教堂，除了王室成员以外，很多名人都安葬于此，并被视为至高无上的荣誉，其中包括牛顿、达尔文和丘吉尔等。所以有人说，人们去威斯敏斯特教堂，不是瞻仰国君，而是那些对国家有过贡献的人。整个教堂的建筑是哥特式风格的代表，既富丽堂皇又庄严静谧，阳光透过彩色的玻璃呈现出斑斓的色彩。</p>
<p><img src="../../../../../image/586bdea2-c774-48e5-b54d-72ebfb465cc3.jpg"></p>
<center>西敏寺</center>


<h2 id="伦敦眼"><a href="#伦敦眼" class="headerlink" title="伦敦眼"></a>伦敦眼</h2><p>伦敦眼（The London Eye）是世界上第一座摩天轮，又称千禧之轮。一共有32个座舱，每个座舱可以坐25人，转一圈需要半小时。可以看到伦敦市全景，是不可多得的观景点。</p>
<p><img src="../../../../../image/366660a3-72ff-438c-b9ba-22836ce5c251.jpg"></p>
<p>一般建议傍晚十分去坐伦敦眼，因为那个时候刚好可以看到伦敦的晚霞，特别浪漫有情调，也十分适合特殊场合。好像可口可乐冠名之后土豪可以出钱直接包厢，工作人员会提前在座舱里面准备好你预定的酒，是表白求婚的好地方。（当然我也只是听说，具体操作我也不知道）。但是那天由于人太多，排队排到了天黑，没有办法，只能看到伦敦夜景了。但是不得不说夜景也是十分漂亮的。泰晤士河对岸的威斯敏斯特宫以及大本钟，国会大厦后面的西敏寺，远处的圣彼得堡以及伦敦塔桥都看得见。</p>
<p><img src="../../../../../image/298030d9-3884-49c9-9bf8-dc4ba90a7c39.jpg"></p>
<p><img src="../../../../../image/d30604a3-4303-4a53-aa5f-16b300418990.jpg"></p>
<p><img src="../../../../../image/8240f76d-53dc-4d46-b019-6fa74dcb81e1.jpg"></p>
<h2 id="贝克街221b"><a href="#贝克街221b" class="headerlink" title="贝克街221b"></a>贝克街221b</h2><p>作为福尔摩斯的死忠粉，贝克街221b是一定要去的。</p>
<p><img src="../../../../../image/7f939f9e-f501-4142-a363-b7ec215db2a9.jpg"></p>
<p>其实贝克街221b却是一个不存在的地址，但是人们为了纪念这位神探，1930年使其成为可用地址。现今该地址被分配给夏洛克·福尔摩斯博物馆使用。</p>
<p><img src="../../../../../image/984ceb32-caf3-41ad-aaa0-5a035f54ab90.jpg"></p>
<center>门口有一个维多利亚时期的警察</center>

<p>旁边是纪念品商店，一切跟福尔摩斯有关的东西都可以在里面买到。</p>
<p><img src="../../../../../image/0a344df6-d339-433f-96aa-37e1556535a3.jpg"></p>
<p><img src="../../../../../image/c1073c4a-10f5-4a38-b86d-e9163f96bcf7.jpg"></p>
<blockquote>
<p>这次表遗憾的是因为计划不周MI6的总部没去，Top Gear的演播厅没参观，国会大厦没参观，圣彼得堡教堂没参观以及大英博物馆没好好看。。。最最重要的是，白金汉宫没去成！<br>计划下次去英国可以有个自驾游，把这些景点补上</p>
</blockquote>
]]></content>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在自己的app中打开其他app</title>
    <url>/2015/09/01/%E5%A6%82%E4%BD%95%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84app%E4%B8%AD%E6%89%93%E5%BC%80%E5%85%B6%E4%BB%96app/</url>
    <content><![CDATA[<p>这个动作通过<code>iOS URL schemes</code>完成，每个程序都有一个<code>URL schemes</code>。</p>
<p>通过<code>openURL</code>就可以打开相应的应用了。openurl()里面填上对应程序的URL。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="type">UIApplication</span>.sharedApplication().openURL(<span class="type">NSURL</span>(string: <span class="string">"…………"</span>)!)</span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"…………"</span>]]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>比如拨打电话：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="type">UIApplication</span>.sharedApplication().openURL(<span class="type">NSURL</span>(string: <span class="string">"tel://1234567890"</span>)!)</span><br></pre></td></tr></table></figure>



<h2 id="打开其他应用的url"><a href="#打开其他应用的url" class="headerlink" title="打开其他应用的url"></a>打开其他应用的url</h2><p><a href="http://www.zhihu.com/question/19907735" target="_blank" rel="noopener">你所知道好玩有趣的 iOS URL schemes 有哪些？（我只是搬运工）</a></p>
<table>
<thead>
<tr>
<th>应用</th>
<th>url</th>
</tr>
</thead>
<tbody><tr>
<td>QQ的url</td>
<td>mqq://</td>
</tr>
<tr>
<td>微信</td>
<td>weixin://</td>
</tr>
<tr>
<td>淘宝</td>
<td>taobao://</td>
</tr>
<tr>
<td>点评</td>
<td>dianping:// dianping://search</td>
</tr>
<tr>
<td>微博</td>
<td>sinaweibo://</td>
</tr>
<tr>
<td>名片全能王</td>
<td>camcard://</td>
</tr>
<tr>
<td>weico微博</td>
<td>weico://</td>
</tr>
<tr>
<td>支付宝</td>
<td>alipay://</td>
</tr>
<tr>
<td>豆瓣fm</td>
<td>doubanradio://</td>
</tr>
<tr>
<td>微盘</td>
<td>sinavdisk://</td>
</tr>
<tr>
<td>网易公开课</td>
<td>ntesopen://</td>
</tr>
<tr>
<td>美团</td>
<td>imeituan://</td>
</tr>
<tr>
<td>京冬</td>
<td>openapp.jdmoble://</td>
</tr>
<tr>
<td>人人</td>
<td>renren://</td>
</tr>
<tr>
<td>我查查</td>
<td>wcc://</td>
</tr>
<tr>
<td>1号店</td>
<td>wccbyihaodian://</td>
</tr>
<tr>
<td>有道词典</td>
<td>yddictproapp://</td>
</tr>
<tr>
<td>知乎</td>
<td>zhihu://</td>
</tr>
<tr>
<td>优酷</td>
<td>youku://</td>
</tr>
</tbody></table>
<p>其中，微信的有</p>
<table>
<thead>
<tr>
<th>url</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>weixin://dl/scan</td>
<td>扫一扫</td>
</tr>
<tr>
<td>weixin://dl/feedback</td>
<td>反馈</td>
</tr>
<tr>
<td>weixin://dl/moments</td>
<td>朋友圈</td>
</tr>
<tr>
<td>weixin://dl/settings</td>
<td>设置</td>
</tr>
<tr>
<td>weixin://dl/notifications</td>
<td>消息通知设置</td>
</tr>
<tr>
<td>weixin://dl/chat</td>
<td>聊天设置</td>
</tr>
<tr>
<td>weixin://dl/general</td>
<td>通用设置</td>
</tr>
<tr>
<td>weixin://dl/officialaccounts</td>
<td>公众号</td>
</tr>
<tr>
<td>weixin://dl/games</td>
<td>游戏</td>
</tr>
<tr>
<td>weixin://dl/help</td>
<td>帮助</td>
</tr>
<tr>
<td>weixin://dl/feedback</td>
<td>反馈</td>
</tr>
<tr>
<td>weixin://dl/profile</td>
<td>个人信息</td>
</tr>
<tr>
<td>weixin://dl/features</td>
<td>功能插件</td>
</tr>
</tbody></table>
<hr>
<h2 id="在自己的程序里面添加iOS-URL-schemes"><a href="#在自己的程序里面添加iOS-URL-schemes" class="headerlink" title="在自己的程序里面添加iOS URL schemes"></a>在自己的程序里面添加<code>iOS URL schemes</code></h2><p>先在<code>info.plist</code>添加如下属性（这个地方和网上的教程有很大的不同，多了很多功能，我也不是很清楚具体代表什么）。点击工程 -&gt;info -&gt;URL Types。</p>
<p>注意, 这里的URL Schemes必填， URL identifier选填。<br>另外，URL Schemes建议都小写，因为之后接收到数据的时候，不区分大小写， 都是转为小写。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-22/24810830.jpg"></p>
<p>然后在<code> Appdelegate.swift</code>中添加如下代码。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, handleOpenURL url: NSURL)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="built_in">println</span>(url)</span><br><span class="line">        <span class="keyword">if</span> (url.scheme == <span class="string">"urltest"</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> text = url.host?.stringByReplacingPercentEscapesUsingEncoding(<span class="type">NSUTF8StringEncoding</span>)</span><br><span class="line">            <span class="keyword">var</span> alert:<span class="type">UIAlertView</span> = <span class="type">UIAlertView</span>()</span><br><span class="line">            alert.addButtonWithTitle(<span class="string">"OK"</span>)</span><br><span class="line">            alert.title = <span class="string">"title"</span></span><br><span class="line">            alert.message = text</span><br><span class="line">            alert.show()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-22/11060372.jpg"></p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>在华尔街实习是种怎样的体验</title>
    <url>/2017/07/04/%E5%9C%A8%E5%8D%8E%E5%B0%94%E8%A1%97%E5%AE%9E%E4%B9%A0%E6%98%AF%E7%A7%8D%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p>好吧我承认我是标题党，我实习的公司其实是在水街（Water Street），离华尔街还有几十米，具体位置可以看地图：</p>
<a id="more"></a>

<p><img src="https://ooo.0o0.ooo/2017/06/26/5950791ed8e84.png"></p>
<p>虽然公司在水街，但是公司不是水公司。我自己是学计算机的，不是金融相关专业，之所以能有一个在华尔街实习的机会，完全是因为我 <del>之前投了Facebook和Google，然后Google直接拒掉了我的简历，Facebook面试又没过，实在是去不了硅谷，菜的抠脚只能随便找个离家近的地方实习</del> 平时努力读书，认真总结各方面的知识，外加自己一口流利的口语<del>本来不会讲英语的我莫名其妙开了无双状态</del>和高贵冷艳的外表<del>被几个面试官吓成面瘫</del>直接征服了面试官。</p>
<p><img src="https://ooo.0o0.ooo/2017/06/26/5950791e78adf.jpg"></p>
<blockquote>
<p>霍博肯是棒球起源地</p>
</blockquote>
<p>我住在新泽西霍博肯（Hoboken），因为离学校近，每天从家到公司大约需要45分钟。每天早上我大约6:30起床，玩半个小时手机，然后洗漱，吃个早餐出门。我租的公寓每天早上有免费的大巴把我接到Path Station（相当于地铁站），坐新泽西到纽约的地铁，在世贸中心下车，然后走5分钟就到公司了。2001年，世贸中心遭到恐怖袭击，世贸双塔收到4架飞机撞击后倒塌，现在其中一座塔被修成了新的世贸中心，另一个被修成了一个购物中心，每天上班我都要经过这里。比较巧的是，我这个实习公司办公室当时在世贸中心的101楼到105楼，也就是遭到撞击的那一层，那天公司损失了658名员工，占了员工总数的68%，是整个恐怖袭击中损失最惨的一家公司。</p>
<p><img src="https://ooo.0o0.ooo/2017/06/26/5950791d336c3.jpg"></p>
<blockquote>
<p>世贸中心Shopping Mall</p>
</blockquote>
<p>实习公司很蛋疼，有Dress Code，不能乱穿衣服上班，每天都要穿衬衫西裤皮鞋。这对我们程序员就很伤，因为对于程序员来说，标准的服饰应该是牛仔裤冲锋衣洞洞鞋，或者短裤拖鞋T恤衫。如果哪个程序员去面试穿的非常正式，西装革履，那不用想了，这个人技术一定不行，甚至可能只会开机。但是这里不一样，HR每两周发一次邮件提醒你Dress Code，注意形象，别乱穿衣服。这规定我觉得得改改，对于程序猿这种职业，穿那么正式是没有灵感的，严重影响工作效率，我经常一个简单的问题要想半天，肯定就是因为这身衣服，如果让我穿睡衣，肯定早就写出来了，一行bug没有。</p>
<p>我面试的时候，4个面试官轮着问了我快一小时iOS开发的问题，从“hello world”到苹果商店上架都问了，几乎囊括了iOS开发的方方面面。我当时觉得我实习的时候肯定是在写iOS了，虽然我一直想找个后台开发的工作，但是投了一百多份简历都没回信，好不容易找到了个移动端的工作，那就凑合做吧。结果我来公司报道的第一天，发现二十几个实习生，分了几个组负责不同的东西，我比较奇葩，一个人一组，开发部老大直接带我。老大让我看Xamarin，说他们准备写个app，看完之后告诉他这个大概要怎么实现，因为他也不太懂。我一听就知道是个坑啊，C#怎么写APP？当年弄Xamarin的hello word都弄了半天。于是就赶紧跟他说这是个深坑，千万碰不得，有个稍微浅一点的坑叫做<code>react-native</code>，要不我用那个吧。老大就说好听你的。我从来没有想过一个那么大的公司会这么随便，毕竟这个公司全球十几个国家都有分部，随便一个实习生一句话就能让这个公司换个技术？！！</p>
<p>但是，我根本不会<code>react-native</code>。我是2月份面试完的，面试之前只是听说过react，面试之后几个月每天花几小时学了下react，谁知道我实习的时候真的用上了，难道这就是命？然后之后几天，我跟老大说App几个功能需要后台支持，但是我们没有后台，老大就让我顺便把后台也写了。我比较熟悉轻量级的<code>Node.js</code>，但是公司不同意，一定要用.NET，于是我又要重新入门.NET。上一次写.NET程序还是三年前在冯玉祥老师的课上，三天刷夜搞了个航空订票系统，之后就再也没有碰过。的网上很多人都说，华尔街工作强度大，每天只能睡四小时。我感觉如果我这几个月没有每天看一点的话，我也是每天睡四小时的节奏。现在还好，至少懂一点，大大增加了我的睡眠时间，每天可以睡四个半小时。……以前我妈老说，等你自己挣钱了，就知道挣钱多么不容易，就会省着花了。但是事实上，爸妈给的钱花起来还有点心虚，瞻前顾后。自己挣的钱拿到的工资，花起来根本不眨眼，我特么不甩花往死里花都对不起我平常吃的苦！</p>
<p><img src="https://ooo.0o0.ooo/2017/06/26/5950791e30c3d.jpg"></p>
<blockquote>
<p>布鲁克林大桥</p>
</blockquote>
<p>公司是一家传统金融公司，金融气氛十分浓厚，我的位置靠着一群交易员，每天听着他们对着电话fuck来fuck去，与他们的西装革履格格不入，完全是一群衣冠禽兽。虽然公司没有摩根斯坦利那么大，但是也不是家创业公司，全球很多国家都有分部，总部在伦敦。然而这个公司对程序员是真的不友好，开发环境是windows，还只给了我一小个屏幕。而且配置环境就花了一个多星期，陪好之后我惊奇的发现我只有2G的硬盘空间了，完全没有办法做任何的开发，于是我只能每天背着自己的电脑去上班。但是有什么办法，企业做大了，老板的每一个行为，都有人负责把它解释得合理。我跟我主管提了这个，他每次都可以用不同的理由告诉我，公司这么做是对的。一开始老大并不同意我用自己的电脑开发，直到有一次他想看下我做的一小个demo，用公司电脑花了大约一小时编译运行完，我电脑只用了5分钟，于是他终于理解了自己公司电脑有多坑，同意我用自己的电脑编程。我实习10周要做的工作，大概涵盖了安卓开发，苹果iOS开发，以及后台开发，只有我一个人做。哪怕一个创业公司，都会至少招三个人做这些事情。目前的感受是：</p>
<p><strong>这个公司的软件开发流程不太规范，有点像创业公司。如果这种级别的公司在华尔街都那么不规范，感觉大部分金融公司的软件开发都不是按照标准流程的。所以在金融公司上班会过的很蛋疼，工作不会很愉快，Boss很有没有灵性，基本上需求都没确定就让你开始做，然后改改改，改到头皮发麻。所以尽量试试谷歌亚马逊微软IBM，在纽约都有分公司。找工作也尽量找内核开发，人工智能之类的工作，至少同事都是搞这个的，特别好交流，可以开心的做开发。</strong></p>
<p><strong><em>比如人生赢家Joe，在亚马逊就过的特别开心，项目高大上，月入过万，最重要的是还有女朋友，真是羡慕嫉妒恨。。。</em></strong></p>
<p>每天九点上班，下午5点下班，实习生不允许加班。但是所谓不允许加班只是说你没有加班工资，该做完的事你还是要做完。公司不提供午饭，明天只能去外面吃。上了两周班之后我惊奇的发现，堂堂华尔街居然只能吃汉堡炸鸡披萨！！！有一天鼓起勇气试了下路边摊的纽约传统美食：“Chicken over Rice”鸡肉饭，发现鸡肉还能吃，饭有一股柴油味，就再也没吃过。办公室大部分人都是忙一早上，中文匆忙的去弄个三明治来啃了，然后继续忙，尤其是坐我对面那群交易员，每天水都没时间喝，怎一个惨字了得。小时候曾经有过一个愿望：能每天吃麦当劳就好，现在愿望实现之后发现小时候自己脑子真是进水了，明明隔壁有卤面炒饭吃什么汉堡。（后来公司又来了个新实习生，一年前在华尔街实习过，韩国欧巴，轻车熟路，带我去了个各种小巷子的餐馆，吃的巨好，也很便宜，要不是见过世面我肯定直接一句“擦浪嘿”就出来了。） </p>
<p>实习了十周的感觉就是：华尔街没那么神，也不是每个人都是精英，甚至有一大批混日子没理想的瓜皮。他们能这样肯定是一百年来资本积累的结果，感觉只要再给中国十几年，超越他们也不是不可能！！！</p>
<blockquote>
<p>相传华尔街的人说的话只能信20%，剩下80%全是谎言！不过我不一样，我是个老实人，只会写代码，只是在资本主义老巢呆了几天受了点影响，所以这篇文章应该有95%的可信度吧～😄</p>
</blockquote>
<h2 id="午餐推荐："><a href="#午餐推荐：" class="headerlink" title="午餐推荐："></a>午餐推荐：</h2><p>Open Kitchen: 自选食品然后称重付款，大约10刀一顿还可以，有一种肉类似叉烧特别好吃！！。也可以去旁边点餐，味道都还行~</p>
<p>地址：123 William St, New York, NY 10005</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/18-1-22/30924366.jpg"></p>
<p>Open Market: 也是自选。</p>
<p>地址：15 William St, New York, NY 10005</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/18-1-22/7296396.jpg"></p>
<p>55 Fulton Market：自选</p>
<p>地址：55 Fulton St, New York, NY 10038</p>
<p>另外听说法拉盛的中餐馆每天会送一小批东西到世贸大厦一楼，中餐，特别抢手需要预定。我也不是很清楚怎么操作，有知道的小伙伴补充下吗？</p>
<hr>
<p><img src="https://ooo.0o0.ooo/2017/06/26/5950791e2b7a1.jpg"></p>
<blockquote>
<p>华尔街傍晚</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/06/26/59507a63b0566.jpg"></p>
<blockquote>
<p>公司在哈佛俱乐部组织的实习生party</p>
</blockquote>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-7-6/62646229.jpg"></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-7-6/7401519.jpg"></p>
<blockquote>
<p>华尔街（是真的很破，放中国就是某栋高楼后面扔垃圾的小巷子</p>
</blockquote>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-7-6/79288205.jpg"></p>
<blockquote>
<p>纽约证劵交易所</p>
</blockquote>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-7-6/13272244.jpg"></p>
]]></content>
      <tags>
        <tag>杂七杂八</tag>
      </tags>
  </entry>
  <entry>
    <title>奥斯陆</title>
    <url>/2016/12/29/%E5%A5%A5%E6%96%AF%E9%99%86/</url>
    <content><![CDATA[<p>奥斯陆是挪威的首都,大约有一百五十万人口，在古挪威语中，奥斯陆的意思是“上帝的山谷“，它三面被群山环绕，既有海滨城市的旖旎风光，又有依托高山密林的雄浑气势，整个城市与绿色的大自然和谐地融为一体，美不胜收。我们这次去奥斯陆只是为了去松恩峡谷以及体验挪威的雪地火车。</p>
<p>不过需要注意的是，奥斯陆的机场离奥斯陆市区大约有120英里，是的你没看错我也没写错，120英里。可能寒冷的北欧找块地方修机场真的不容易？总之，从机场到市区，我们先坐了火车，又转了汽车，最后又打了出租，大约花了两个半小时才到住的地方，交通十分不容易。</p>
<a id="more"></a>

<h2 id="世界上最美的铁路"><a href="#世界上最美的铁路" class="headerlink" title="世界上最美的铁路"></a>世界上最美的铁路</h2><p>卑尔根到奥斯陆的铁路被称之为世界上最美的铁路。由于斯堪的纳维亚山脉纵贯挪威全境，全国的高原、山地、冰川大概占了 2/3 以上。这段铁路线翻山越岭，途中有 100 公里（总长约 470 公里）穿行在高山白雪严寒的荒凉之地。</p>
<p><img src="../../../../image/03edee88-4e84-45b4-be2b-02d04f25943a.JPG"></p>
<p><img src="../../../../image/5e2c35b7-4204-4580-a016-566e42d010d7.JPG"></p>
<p><img src="../../../../image/920e3d7f-cae8-4cec-a414-fc648b1686ee.JPG"></p>
<p>网上攻略建议春天或者夏天来坐这趟火车，可以体验到从春意盎然的草地森林进入到冰天雪地的雪原。然而这次我们是冬天去的，全程只有皑皑白雪和森林，但是景色依旧很美。</p>
<p><img src="../../../../image/cbfd6160-ccdf-40f5-a8f2-c43f090d9d7d.JPG"></p>
<p><img src="../../../../image/5c4104ab-1a1d-4c84-bc11-d83877bba575.JPG"></p>
<p><img src="../../../../image/9af62742-6c69-4a33-8e20-3346cce0e756.JPG"></p>
<p><img src="../../../../image/b8e7f73a-50b8-469e-a100-463e694c2ff3.JPG"></p>
<p><img src="../../../../image/d62fd68b-f1c7-4663-9b84-af5df95d9a0d.JPG"></p>
<h2 id="松恩峡"><a href="#松恩峡" class="headerlink" title="松恩峡"></a>松恩峡</h2><p>松恩峡湾位于挪威西部松恩-菲尤拉讷郡境内，全长205公里，为挪威第一长，世界第二长的峡湾。最深处达海平面下1308米，主干平均宽度约为4.5千米。 下火车之后就可以直接上船。</p>
<p><img src="../../../../image/2fcc6604-3184-4508-83d7-a19e0ba37379.JPG"></p>
<p><img src="../../../../image/9c512495-3bfb-41e2-9e9c-da570d35eba3.JPG"></p>
<p>根据船上语音介绍，可以在游览的时候看到海豚或者鹰，但是由于我们是冬天去的，下午坐上船的时候天色已暗，没有看到任何的动物。</p>
<p><img src="../../../../image/24c0ab0c-ddb6-41c5-841c-8985f6892b89.JPG"></p>
<blockquote>
<p>冬天去天色会特别暗，而且天气很冷容易生病，所以建议还是夏天的时候去玩比较合适。。。</p>
</blockquote>
]]></content>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>如何根据文字的多少动态的调整TableViewCell的高度</title>
    <url>/2016/01/25/%E5%A6%82%E4%BD%95%E6%A0%B9%E6%8D%AE%E6%96%87%E5%AD%97%E7%9A%84%E5%A4%9A%E5%B0%91%E5%8A%A8%E6%80%81%E7%9A%84%E8%B0%83%E6%95%B4TableViewCell%E7%9A%84%E9%AB%98%E5%BA%A6/</url>
    <content><![CDATA[<p>开发中经常会遇到需要动态调整UITableViewCell的高度的问题，这个问题百度到的十分不清楚，但是谷歌到的就十分清楚，在百度没完之前我还是自己还是记录下吧……</p>
<a id="more"></a>

<h2 id="方法一：使用AutoLayout"><a href="#方法一：使用AutoLayout" class="headerlink" title="方法一：使用AutoLayout"></a>方法一：使用AutoLayout</h2><p>在storyboard中设置label的约束如图所示：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-1-21/40577384.jpg"></p>
<p><strong>或者:</strong></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-1-25/67412403.jpg"></p>
<p>然后在viewDidLoad中添加</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.tableView.rowHeight = <span class="built_in">UITableViewAutomaticDimension</span>;</span><br><span class="line"><span class="keyword">self</span>.tableView.estimatedRowHeight = <span class="number">44</span>;</span><br></pre></td></tr></table></figure>


<p> <strong>tableView需要设置为Dynamic Prototypes，上图的约束一条都不能少！！</strong></p>
<h2 id="方法二：调用heightForRowAtIndexPath"><a href="#方法二：调用heightForRowAtIndexPath" class="headerlink" title="方法二：调用heightForRowAtIndexPath"></a>方法二：调用heightForRowAtIndexPath</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ScreenFrame [[UIScreen mainScreen]bounds]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ScreenSize ScreenFrame.size</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FONT_SIZE 15.0f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CELL_CONTENT_WIDTH ScreenSize.width <span class="comment">//CELL_CONTENT_WIDTH 为cell的宽度</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CELL_CONTENT_MARGIN 8.0f <span class="comment">//CELL_CONTENT_MARGIN为label距cell两边的宽度</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  获取当前indexPath下的cell的那个lable的内容</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *rowData = _dataArray[indexPath.section];</span><br><span class="line">    text = [rowData objectForKey:<span class="string">@"content"</span>];</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">//CELL_CONTENT_WIDTH 为cell的宽度；CELL_CONTENT_MARGIN为label距cell两边的宽度，相减得到label长度～；后面的20000任意设置</span></span><br><span class="line">    <span class="built_in">CGSize</span> constraint = <span class="built_in">CGSizeMake</span>(CELL_CONTENT_WIDTH - (CELL_CONTENT_MARGIN * <span class="number">2</span>), <span class="number">20000.0</span>f);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//CGSize size = [text sizeWithFont:[UIFont systemFontOfSize:FONT_SIZE] constrainedToSize:constraint lineBreakMode:UILineBreakModeWordWrap];</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSAttributedString</span> *attributedText = [[<span class="built_in">NSAttributedString</span> alloc]initWithString:text attributes:@&#123;</span><br><span class="line">                        <span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> systemFontOfSize:FONT_SIZE]</span><br><span class="line">                                                                                                     &#125;];</span><br><span class="line">    <span class="built_in">CGRect</span> rect = [attributedText boundingRectWithSize:constraint</span><br><span class="line">                                               options:<span class="built_in">NSStringDrawingUsesLineFragmentOrigin</span></span><br><span class="line">                                               context:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">CGSize</span> size = rect.size;</span><br><span class="line">    <span class="built_in">CGFloat</span> height = MAX(size.height + <span class="number">82</span>, <span class="number">100.0</span>f);</span><br><span class="line">    <span class="keyword">return</span> height;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>然后运行，就可以啦</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-1-25/32336227.jpg"></p>
<blockquote>
<p>百度药丸～</p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何添加PCH文件</title>
    <url>/2016/01/21/%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0PCH%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>PCH，pre-Compile Header（预编译头文件）,由编译器在建立工程时自动生成; 其中存放有工程中已经编译的部分代码; 在以后建立工程时不再重新编译这些代码。以前每个项目中会自动生成，但是这个东西被在Xcode6中被取消了，为了加快编译速度。如何在之后的项目中手动加入这个文件呢？</p>
<a id="more"></a>

<p>Xcode7中，点击new file。选中<code>iOS</code>-&gt;<code>other</code>-&gt;<code>PCH File</code>，创建一个新的PCH文件。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-1-21/48844691.jpg"></p>
<p>然后在<code>Build Setting</code>-&gt;<code>Apple LLVM 7.0 -Language</code>-&gt;<code>Prefix Header</code>中添加PCH文件的文件路径，如图</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-1-21/74431299.jpg"></p>
<p>这样PCH文件就可以正常使用了，可以吧常用的头文件都写在PCH文件里面，避免每个头文件都要import一遍～</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-1-21/59938014.jpg"></p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用C#写一个加法计算器（一）</title>
    <url>/2015/08/02/%E5%A6%82%E4%BD%95%E7%94%A8C%EF%BC%83%E5%86%99%E4%B8%80%E4%B8%AA%E5%8A%A0%E6%B3%95%E8%AE%A1%E7%AE%97%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>我用的是VS2013，windows7。</p>
</blockquote>
<a id="more"></a>

<p>首先，新建个项目。选择 <strong><em>Visual C# -&gt; windows</em></strong>，然后项目名称随意。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-2/64743553.jpg" alt="新建项目"></p>
<p>然后就会直接来到这个界面</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-2/525898.jpg"></p>
<p>当然有些东西可能跟我的不一样，没关系，继续看就好～～</p>
<p>窗口中那个Form1就是程序窗口了，鼠标放到上面会出现这种效果，拖动边框可以任意改变它的大小。现在直接点击运行是可以跑的，只是只有个窗口，并没有什么功能……</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-18/35057443.jpg" alt="Form1"></p>
<h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p>然后找到*<strong>工具箱*** ，如果界面上没有可以从最上面 *</strong>视图*** 一栏找到</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-18/7029636.jpg" alt="工具箱"></p>
<p>从工具箱中找到 <strong><em>Button</em></strong> 控件和  <strong><em>TextBox</em></strong> 控件，直接拖到窗口上（找不到可以尝试下工具箱最上面那个搜索框）</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-2/46756365.jpg"></p>
<p>如果要改变Button的显示值，先选中那个要修改的Button，然后在属性栏修改，属性栏一般在VS的最右边，如果找不到可以从最上面 <strong><em>视图</em></strong> 一栏找到。然后修改 <strong><em>Text</em></strong> 的值 为 <strong><em>1</em></strong>。比如，现在把这个button显示值改为1。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-18/99866980.jpg"></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-18/87741943.jpg"></p>
<p>如果要修改控件的其他属性都可以在属性栏修改。<strong>强烈建议修改（Name）的值</strong>, 因为如果只是单纯的拖控件到话，VS会自动帮你命名。第一个Button就会叫做 Button1 ，第二个就会叫做 Button2。<img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-7-16/47607869.jpg"> （你上班的时候这么命名会被组长打死</p>
<p>然后现在选中Button1，拖动边界把他调整到自己想要的大小。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-18/10858189.jpg"></p>
<p>然后同理，放更多的button到界面上来，调整为一个计算器的样子，我是调成了这样：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-18/34890069.jpg"></p>
<p>现在运行下就可以得到计算器的界面了，只是无论怎么点击按键都不会有用，因为后面的逻辑还没有加上。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-2/85573366.jpg"></p>
<p><a href="http://caoyudong.com/2015/08/02/%E5%A6%82%E4%BD%95%E7%94%A8C%EF%BC%83%E5%86%99%E4%B8%80%E4%B8%AA%E5%8A%A0%E6%B3%95%E8%AE%A1%E7%AE%97%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"><strong>如何用C#写一个加法计算器（二）</strong></a></p>
]]></content>
      <tags>
        <tag>C＃</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用C#写一个加法计算器（二）</title>
    <url>/2015/08/02/%E5%A6%82%E4%BD%95%E7%94%A8C%EF%BC%83%E5%86%99%E4%B8%80%E4%B8%AA%E5%8A%A0%E6%B3%95%E8%AE%A1%E7%AE%97%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>我用的是VS2013，windows7，苹果虚拟机。</p>
</blockquote>
<p><a href="http://caoyudong.com/2015/08/02/%E5%A6%82%E4%BD%95%E7%94%A8C%EF%BC%83%E5%86%99%E4%B8%80%E4%B8%AA%E5%8A%A0%E6%B3%95%E8%AE%A1%E7%AE%97%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/"><strong>如何用C#写一个加法计算器（一）</strong></a></p>
<a id="more"></a>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>现在来讲下代码部分怎么写，双击数字 <strong>1</strong> 那个button，程序会自动跳转到另一个界面，并且帮你创建好了一个函数，这个函数是点击 button1时的监听事件，就是处理当你点了button1之后你希望程序做什么事情代码都可以写在这里。现在我们往里面加一行 <code>textBox1.Text += &quot;1&quot;;</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text += <span class="string">"1"</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>意思是点击1之后，textBox1的值会从右边多个1（我也说不清楚，自己运行体会下，语文差别怪我）。textBox1是刚刚拖到窗口上的那个textBox，由于我直接用了VS自动帮我取的名字所以这个控件叫做textBox1。补充说一句，所有控件在这里面都相当于是全局变量，在Form1.cs里面随便用的。</p>
<p>然后同理，把剩下的2～0的button的监听函数都改一遍。比如2就是<code>textBox1.Text += &quot;2&quot;;</code>，3就是<code>textBox1.Text += &quot;3&quot;;</code>。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text += <span class="string">"2"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button3_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text += <span class="string">"3"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button6_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text += <span class="string">"4"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button5_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text += <span class="string">"5"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button4_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text += <span class="string">"6"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button9_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text += <span class="string">"7"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button8_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text += <span class="string">"8"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button7_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text += <span class="string">"9"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button13_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text += <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>这里需要注意下，由于拖动控件的顺序不同，button的编号不一定代表button对应数值，如果强迫症的童鞋可以在属性那里改一下。还要说的是，应该有办法写一个监听函数，然后直接获取button上的值就可以知道用户点击哪个button了，但是我不知道那个方法，因为我</p>
<blockquote>
<p>其实不会C#<br>有谁知道可以告诉下我。</p>
</blockquote>
<p>然后现在因为计算需要，需要声明两个变量来储存用户输入的第一个值和第二个值以及想进行什么运算。所以在类开头声明这三个东西：<code>firstNumber</code> <code>secondNumber</code> <code>operation</code>,分别代表输入的第一个数字，第二个数字，和操作符。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        String firstNumber;</span><br><span class="line">        String secondNumber;</span><br><span class="line">        String operation;</span><br><span class="line">        </span><br><span class="line">        ……</span><br><span class="line">        ……</span><br></pre></td></tr></table></figure>

<p>然后为了体现良好的编程习惯，变量都应该在程序刚运行到时候初始化，找到<code>public Form1()</code>，添加这些代码。<code>public Form1()</code>是程序自动生成的，每次程序运行都会先运行这个函数*(其实我也不确定，IOS是这样所以我觉得windows也应该是这样，都说了其实我不会C#)*</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            firstNumber = <span class="string">"0"</span>;</span><br><span class="line">            secondNumber = <span class="string">"0"</span>;</span><br><span class="line">            operation = <span class="string">""</span>;</span><br><span class="line">            textBox1.Text = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>然后我们来处理下加减法。我的计算逻辑是这样的，用户先输入一个数字，然后按“＋”或者“－”号，然后再输入一个数字，然后按“＝”得到结果。</p>
<p>所以“＋”和“－”button的处理事件我是这样写的：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line">	<span class="comment">//加法</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button10_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            firstNumber = textBox1.Text;</span><br><span class="line">            textBox1.Text = <span class="string">""</span>;</span><br><span class="line">            operation = <span class="string">"+"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">   <span class="comment">//减法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button11_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            firstNumber = textBox1.Text;</span><br><span class="line">            textBox1.Text = <span class="string">""</span>;</span><br><span class="line">            operation = <span class="string">"-"</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>思路是这样，先获取用户输入的第一个数字，然后清空输入栏（textBox）内容，同时记下运算符，等待用户输入第二个数字。</p>
<p><code>＝</code>button的事件：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line"><span class="comment">//等于</span></span><br><span class="line">           <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button12_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            secondNumber = textBox1.Text;</span><br><span class="line">            <span class="keyword">switch</span> (operation)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                    textBox1.Text = System.String.Format(<span class="string">"&#123;0&#125;"</span>, <span class="keyword">int</span>.Parse(firstNumber) + <span class="keyword">int</span>.Parse(secondNumber));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                    textBox1.Text = System.String.Format(<span class="string">"&#123;0&#125;"</span>, <span class="keyword">int</span>.Parse(firstNumber) - <span class="keyword">int</span>.Parse(secondNumber));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            firstNumber = <span class="string">"0"</span>;</span><br><span class="line">            secondNumber = <span class="string">"0"</span>;</span><br><span class="line">            operation = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>C#的<code>switch</code>可以是字符串所以通过<code>switch</code>可以区分出操作符。然后由于获取到的<code>firstNumber</code>和<code>secondNumber</code>都是字符串格式不能直接进行计算所以要通过<code>int.Parse()</code>函数把它转化成int类型然后计算。计算结果由<code>System.String.Format({0},……)</code>函数转为字符串赋值给textBox显示。最后清空三个全局变量。</p>
<p>最后处理下 <code>AC</code>键，就是清零。那这个很简单，重置所有东西就好了：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C#</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button14_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            operation = <span class="string">""</span>;</span><br><span class="line">            firstNumber = <span class="string">""</span>;</span><br><span class="line">            secondNumber = <span class="string">""</span>;</span><br><span class="line">            textBox1.Text = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>最后的效果就是这样：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-2/21766413.jpg" alt="最终效果"></p>
<p><a href="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-2/28170240-calcultor.exe" target="_blank" rel="noopener">.exe下载地址</a><br><a href="!%5B%5D(http://7xkfbb.com1.z0.glb.clouddn.com/15-8-2/87862436-calculator.rar)">代码下载地址</a></p>
]]></content>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让图片显示为一个圆</title>
    <url>/2015/08/18/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%9C%86/</url>
    <content><![CDATA[<h2 id="如何把图片显示为一个圆？"><a href="#如何把图片显示为一个圆？" class="headerlink" title="如何把图片显示为一个圆？"></a>如何把图片显示为一个圆？</h2><p>假设这个UIImageView是一个正方形，也就是长和宽都一样……</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">    <span class="built_in">CGFloat</span> imageSize = <span class="keyword">self</span>.imageView.bounds.size.height;</span><br><span class="line">    <span class="keyword">self</span>.imageView.layer.masksToBounds = <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">self</span>.imageView.layer.cornerRadius = imageSize/<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>效果图：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-18/55194080.jpg"></p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何通过IPV6访问网络</title>
    <url>/2015/12/29/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87IPV6%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>现在网络用的大多都是ipv4，ipv6还没有普及。但是大多数高等院校（比如我们华南皇家理工学院）已经普及了ipv6，所以通过ipv6翻墙是可以实现的。</p>
<p>当然这个方法也可以做一些别的事情，比如晚上网络突然不能用了……</p>
<a id="more"></a>

<p><strong>各位同学的电脑一定要插网线，路由器是不可以的，大部分路由器是没法设置ipv6的！！！</strong><br/><br><strong>各位同学的电脑一定要插网线!!</strong><br/><br><strong>各位同学的电脑一定要插网线!!</strong><br/></p>
<h1 id="windows-7-系统"><a href="#windows-7-系统" class="headerlink" title="windows 7 系统"></a>windows 7 系统</h1><ol>
<li>打开电脑右下角的<code>打开网络和共享中心</code><br><br/><br> <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-29/75957027.jpg"></li>
<li>点击<code>更改适配器设置</code><br><br/><br> <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-29/30429804.jpg"> <br><br/></li>
<li>在弹出的页面<strong>右键</strong>选中<code>本地连接</code>，然后左键点<code>属性</code>。<br><br/></li>
<li>选中<code>Internet 协议版本6</code>后点击属性（注意要选中后才可以点击）<br><br/><br> <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-29/9700559.jpg"></li>
<li>页面靠上边选择<code>自动获取ipv6地址</code>，下边选<code>使用下面的 DNS 服务器</code>，然后填入服务器地址：<code>2001:778::37</code>。（注意冒号啊，不能多也不能少！ <strong>打冒号的时候别用中文输入法！！！</strong>）<br><br/><br> <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-29/98074675.jpg">  <br><br/></li>
<li>勾选退出时验证设置，等一会应该就可以了。通过访问 <a href="https://www.google.com/" target="_blank" rel="noopener">https://www.google.com</a>  验证（<a href="https://www.google.com.hk/" target="_blank" rel="noopener">https://www.google.com.hk</a> 好像不可以～）</li>
</ol>
<h1 id="Mac系统"><a href="#Mac系统" class="headerlink" title="Mac系统"></a>Mac系统</h1><ol>
<li>打开电脑左上角的苹果图标，选择<code>系统偏好设置</code>。<br><br/></li>
<li>选择网络<br><br/><br> <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-29/71182504.jpg"><br><br/></li>
<li>选择<code>Apple USB Ethernet Adapter</code>-&gt;<code>高级</code><br><br/><br> <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-29/16860616.jpg"><br><br/></li>
<li>选择<code>DNS</code>-&gt;<code>+</code>添加一个ipv6 DNS地址：<code>2001:778::37</code>。<br><br/><br> <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-29/23929726.jpg"><br><br/></li>
<li>点击<code>好</code>-&gt;<code>应用</code>，这时候打开谷歌应该就可以了。通过访问 <a href="https://www.google.com/" target="_blank" rel="noopener">https://www.google.com</a>  验证（<a href="https://www.google.com.hk/" target="_blank" rel="noopener">https://www.google.com.hk</a> 好像不可以～）</li>
</ol>
<blockquote>
<p>由于我自己的电脑是苹果电脑，我也不知道windows会有什么问题。至少我在舍友的电脑上试了是可以的，如果有什么问题可以在下边留言，我找时间看看。</p>
</blockquote>
<h2 id="DNS服务器列表（注意只能访问支持ipv6的网站，比如谷歌，百度不可以用）"><a href="#DNS服务器列表（注意只能访问支持ipv6的网站，比如谷歌，百度不可以用）" class="headerlink" title="DNS服务器列表（注意只能访问支持ipv6的网站，比如谷歌，百度不可以用）"></a>DNS服务器列表（注意只能访问支持ipv6的网站，比如谷歌，百度不可以用）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">科技网DNS服务器</span><br><span class="line"></span><br><span class="line">2001:cc0:2fff:2::6</span><br><span class="line"></span><br><span class="line">CNNIC DNS服务器</span><br><span class="line"></span><br><span class="line">2001:dc7:1000::1</span><br><span class="line"></span><br><span class="line">上海交通大学DNS服务器</span><br><span class="line"></span><br><span class="line">2001:da8:8000:1:202:120:2:100</span><br><span class="line"></span><br><span class="line">2001:da8:8000:1:202:120:2:101</span><br><span class="line"></span><br><span class="line">北京邮电大学DNS服务器</span><br><span class="line"></span><br><span class="line">2001:da8:202:10::36</span><br><span class="line"></span><br><span class="line">2001:da8:202:10::37</span><br><span class="line"></span><br><span class="line">北京科技大学DNS服务器</span><br><span class="line"></span><br><span class="line">2001:da8:208:10::6</span><br></pre></td></tr></table></figure>

<h2 id="如果要访问ipv4资源"><a href="#如果要访问ipv4资源" class="headerlink" title="如果要访问ipv4资源"></a>如果要访问ipv4资源</h2><p>如果要访问ipv4资源需要用到DNS64服务器，它可以将域名解析出ipv6的AAAA记录，然后使用ipv6去访问NAT64服务器，NAT64服务器访问ipv4的资源来返回所需要的结果。</p>
<p>当前Internet上公布的DNS64服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2001:778::37</span><br><span class="line"></span><br><span class="line">2001:df8:0:7::1</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="上不了QQ是正常情况，我也不知道为什么，我要问下老师先"><a href="#上不了QQ是正常情况，我也不知道为什么，我要问下老师先" class="headerlink" title="上不了QQ是正常情况，我也不知道为什么，我要问下老师先~"></a>上不了QQ是正常情况，我也不知道为什么，我要问下老师先~</h4><h4 id="windows7可能会上不了，目前不知道为什么；windows10，windows8好像没问题"><a href="#windows7可能会上不了，目前不知道为什么；windows10，windows8好像没问题" class="headerlink" title="windows7可能会上不了，目前不知道为什么；windows10，windows8好像没问题"></a>windows7可能会上不了，目前不知道为什么；windows10，windows8好像没问题</h4><h4 id="如果不行尝试把ipv4-前面的勾去掉，ipv6的勾一定要钩上"><a href="#如果不行尝试把ipv4-前面的勾去掉，ipv6的勾一定要钩上" class="headerlink" title="如果不行尝试把ipv4 前面的勾去掉，ipv6的勾一定要钩上"></a>如果不行尝试把ipv4 前面的勾去掉，ipv6的勾一定要钩上</h4><p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-12-29/92599354.jpg"></p>
<h4 id="尽量避免用Google-chrome浏览器，这个东西不太稳定。是在上不去用IE或者Safari试试"><a href="#尽量避免用Google-chrome浏览器，这个东西不太稳定。是在上不去用IE或者Safari试试" class="headerlink" title="尽量避免用Google chrome浏览器，这个东西不太稳定。是在上不去用IE或者Safari试试"></a>尽量避免用Google chrome浏览器，这个东西不太稳定。是在上不去用IE或者Safari试试</h4><p><br><br/><br><br><br/></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-5-27/52389407.jpg"></p>
<h4 id="另外评论里的那帮人，你们这样是找不到女朋友的！！！！"><a href="#另外评论里的那帮人，你们这样是找不到女朋友的！！！！" class="headerlink" title="另外评论里的那帮人，你们这样是找不到女朋友的！！！！"></a>另外评论里的那帮人，你们这样是找不到女朋友的！！！！</h4><p><br><br/><br><br><br/></p>
<blockquote>
<p>很多学校用的是锐捷登陆系统，虽然我没用过，但是用过的人都说不好：一个是它会限制双网卡，导致笔记本电脑做不了热点；一个是晚上12点准时断网，想查点资料都查不了……这个方法好像也能绕过锐捷登陆系统，我没试过，北校的同学试了可以告诉我一声啊～～</p>
</blockquote>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>如何隐藏NavigationController</title>
    <url>/2015/08/13/%E5%A6%82%E4%BD%95%E9%9A%90%E8%97%8FNavigationController/</url>
    <content><![CDATA[<p>如何隐藏NavigationController？</p>
<p>隐藏<code>NavigationController</code>只需要调用一个方法就可以了：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="keyword">self</span>.navigationController.navigationBar.hidden = <span class="literal">YES</span>;</span><br></pre></td></tr></table></figure>

<p>要回复它只用把状态改为NO就好。</p>
<a id="more"></a>


<h2 id="ScrollView或TableView向上滑动隐藏NavigationController"><a href="#ScrollView或TableView向上滑动隐藏NavigationController" class="headerlink" title="ScrollView或TableView向上滑动隐藏NavigationController"></a><code>ScrollView</code>或<code>TableView</code>向上滑动隐藏<code>NavigationController</code></h2><p>如果是在一个<code>ScrollView</code>或者是一个<code>TableView</code>里面，想要实现向上滑动隐藏<code>NavigationController</code>，调用这个函数即可：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">-(<span class="keyword">void</span>)scrollViewWillEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView withVelocity:(<span class="built_in">CGPoint</span>)velocity targetContentOffset:(<span class="keyword">inout</span> <span class="built_in">CGPoint</span> *)targetContentOffset&#123;</span><br><span class="line">    <span class="keyword">if</span> (velocity.y &gt; <span class="number">0.0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//向上滑动隐藏导航栏</span></span><br><span class="line">        [<span class="keyword">self</span>.navigationController setNavigationBarHidden:<span class="literal">YES</span> animated:<span class="literal">YES</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//向下滑动显示导航栏</span></span><br><span class="line">        [<span class="keyword">self</span>.navigationController setNavigationBarHidden:<span class="literal">NO</span> animated:<span class="literal">YES</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">[<span class="keyword">self</span>.navigationController setNavigationBarHidden:<span class="literal">YES</span> animated:<span class="literal">YES</span>];</span><br></pre></td></tr></table></figure>

<p>是带有动画效果的，如果不需要动画效果可以直接用</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="keyword">self</span>.navigationController.navigationBar.hidden = <span class="literal">YES</span>;</span><br></pre></td></tr></table></figure>

<p>不过应该不会有人不想用动画效果吧</p>
<p>效果图：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-15/92146754.jpg" alt="hide NavigationController"></p>
<hr>
<p>当然从效果图来看这样实现并不好，因为<code>StatusBar</code>和<code>tableView</code>的内容重合了，现在可以做一点优化。</p>
<p>在<code>viewDidLoad</code>里面添加：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">[<span class="keyword">self</span> setNeedsStatusBarAppearanceUpdate];</span><br></pre></td></tr></table></figure>


<p>添加一个函数：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIStatusBarStyleLightContent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-15/21162414.jpg" alt="“Hide”status bar"></p>
<hr>
<p>那如果要”保留”<code>StatusBar</code>要怎么做呢？</p>
<p>网上查了一下，有一个思路是把<code>NavigationController</code>的高度降为22，这样看起来就像是保留了<code>StatusBar</code>。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>)<span class="built_in">BOOL</span> isHidden;</span><br><span class="line"><span class="comment">//…………</span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)showNavigationController&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.isHidden) &#123;</span><br><span class="line">        <span class="built_in">CGRect</span> frame = <span class="keyword">self</span>.navigationController.navigationBar.frame;</span><br><span class="line">        frame.origin.y = <span class="number">20</span>;</span><br><span class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.2</span> animations:^&#123;</span><br><span class="line">            <span class="keyword">self</span>.navigationController.navigationBar.frame = frame;</span><br><span class="line">            </span><br><span class="line">            [<span class="keyword">self</span>.item setTitle:<span class="string">@"item"</span>];</span><br><span class="line">            <span class="keyword">self</span>.title = <span class="string">@"Title"</span>;</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">self</span>.isHidden= <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)hideNavigationController&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.isHidden) &#123;</span><br><span class="line">        <span class="built_in">CGRect</span> frame = <span class="keyword">self</span>.navigationController.navigationBar.frame;</span><br><span class="line">        frame.origin.y = <span class="number">-24</span>;</span><br><span class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.2</span> animations:^&#123;</span><br><span class="line">            <span class="keyword">self</span>.navigationController.navigationBar.frame = frame;</span><br><span class="line">            </span><br><span class="line"><span class="comment">//			  隐藏navigationController上的控件</span></span><br><span class="line">            [<span class="keyword">self</span>.item setTitle:<span class="string">@""</span>];</span><br><span class="line">            <span class="keyword">self</span>.title = <span class="string">@""</span>;</span><br><span class="line">        &#125; completion:<span class="literal">nil</span>];</span><br><span class="line">        <span class="keyword">self</span>.isHidden=<span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后修改下<code>scrollViewWillEndDragging</code>就可以了</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">-(<span class="keyword">void</span>)scrollViewWillEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView withVelocity:(<span class="built_in">CGPoint</span>)velocity targetContentOffset:(<span class="keyword">inout</span> <span class="built_in">CGPoint</span> *)targetContentOffset&#123;</span><br><span class="line">    <span class="keyword">if</span> (velocity.y &gt; <span class="number">0.0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//向上滑动隐藏导航栏</span></span><br><span class="line">        [<span class="keyword">self</span> hideNavigationController];</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//向下滑动显示导航栏</span></span><br><span class="line">        [<span class="keyword">self</span> showNavigationController];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果图：<br><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-15/98069774.jpg"></p>
<p><a href="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-15/70939852-hideNavigationController.zip" target="_blank" rel="noopener">代码下载 Xcode6.4</a></p>
<p>##iOS8之后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;objective-c</span><br><span class="line">self.navigationController.hidesBarsOnSwipe &#x3D; YES;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">self</span>.navigationController!.hidesBarsOnSwipe = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>实现navigationController渐变</title>
    <url>/2017/01/14/%E5%AE%9E%E7%8E%B0navigationController%E6%B8%90%E5%8F%98/</url>
    <content><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-1-15/14395718-file_1484434225269_c4f5.gif"></p>
<a id="more"></a>

<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>先观察NavigationBar的结构图：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/17-1-15/30926148-file_1484434436169_130c5.png"></p>
<p>可以发现navigationBar后面是有个imageView的，只要把它设置为无图就可以看到透明，设置backgroundColor就不可以</p>
<p>需要注意的是navigationBar还有另一个imageView，其实那个是导航栏下面的那一根细线。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>直接获取那张ImageView,然后设置他的透明度<br>它其实就在subviews的第一个,即,我们可以这样</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Objective-C</span></span><br><span class="line"><span class="built_in">UIView</span> barImageView = new <span class="built_in">UIView</span>()</span><br><span class="line"></span><br><span class="line">barImageView = <span class="keyword">self</span>.navigationController.navigationBar.subviews.firstObject</span><br></pre></td></tr></table></figure>


<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var barImageView = UIView()</span></span><br><span class="line">barImageView = (navigationController?.navigationBar.subviews.first)!</span><br></pre></td></tr></table></figure>

<p>然后设置它透明</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line">navigationController?.navigationBar.setBackgroundImage(<span class="type">UIImage</span>(), <span class="keyword">for</span>: <span class="type">UIBarPosition</span>.top, barMetrics: <span class="type">UIBarMetrics</span>.<span class="keyword">default</span>)</span><br></pre></td></tr></table></figure>


<p>然后在scrollViewDidScroll方法里面根据偏移量来动态改变barImageView颜色就好</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScroll</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> offsetY:<span class="type">CGFloat</span> = scrollView.contentOffset.y</span><br><span class="line">    <span class="keyword">if</span> (offsetY &gt;= <span class="number">44</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> alpha:<span class="type">CGFloat</span> = <span class="built_in">min</span>(<span class="number">0.95</span>, <span class="number">1</span> - ((<span class="number">50</span> + <span class="number">64</span> - offsetY) / <span class="number">64</span>)) <span class="comment">//50 可以任意改变，控制你的tableView拉到什么样子的时候他才变成不透明</span></span><br><span class="line"></span><br><span class="line">        barImageView.backgroundColor = <span class="type">UIColor</span>.white.withAlphaComponent(alpha)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> alpha &gt; <span class="number">0.95</span> &#123;</span><br><span class="line">            <span class="comment">// setNavigationBarTextBlack() </span></span><br><span class="line">            <span class="comment">//导航栏被拉下来</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        barImageView.backgroundColor = <span class="type">UIColor</span>.white.withAlphaComponent(<span class="number">0.0</span>)</span><br><span class="line">        <span class="comment">// setNavigationBarTextClear()</span></span><br><span class="line">        <span class="comment">// 导航栏在初始位置状态</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="补充代码"><a href="#补充代码" class="headerlink" title="补充代码"></a>补充代码</h2><p><strong>改变导航栏标题颜色和返回键颜色</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">self</span>.navigationController?.navigationBar.titleTextAttributes = [<span class="type">NSForegroundColorAttributeName</span>:<span class="type">UIColor</span>.white]</span><br><span class="line"><span class="keyword">self</span>.navigationController?.navigationBar.tintColor = <span class="type">UIColor</span>.white</span><br></pre></td></tr></table></figure>


<p><strong>需要重写<code>viewWillAppear</code>和<code>viewWillDisappear</code></strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewWillAppear(animated)</span><br><span class="line">    <span class="keyword">self</span>.tableView.delegate = <span class="keyword">self</span>;</span><br><span class="line">    <span class="keyword">self</span>.navigationController?.navigationBar.shadowImage = <span class="type">UIImage</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewWillDisappear(animated)</span><br><span class="line">    <span class="keyword">self</span>.tableView.delegate = <span class="literal">nil</span>;</span><br><span class="line">    setNavigationBarTextBlack()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不然你返回到上一个界面的时候会发现导航栏很奇怪</p>
<p>如果懒得自己写可以试下这个轮子：</p>
<p><a href="https://github.com/ltebean/LTNavigationBar/tree/master" target="_blank" rel="noopener">https://github.com/ltebean/LTNavigationBar/tree/master</a></p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>家庭贫困说明</title>
    <url>/2015/09/23/%E5%AE%B6%E5%BA%AD%E8%B4%AB%E5%9B%B0%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<blockquote>
<p>Bazinga<br>12级软件工程</p>
</blockquote>
<p>我从大山里来<br>第一次来到广州这种大城市<br>从来没有坐过地铁的我第一次坐地铁就是在广州</p>
<a id="more"></a>

<br>

<p>家里很穷，开的是最便宜的法拉利 <strong>——F430</strong><br>虽然后面出了新款的458、488、LaFerrari但是由于没钱都没买</p>
<br>  

<p>家里住的是昆明最偏远的房子，连公交车都没有<br>每次出门都只能开车<br>如果没有车就相当于被困在了这里……<br>家离最近的便利店有5公里路<br>也就是说，如果没有车连饭都没得吃<br>我就是在这种艰苦的环境下长大的</p>
<br>

<p>每次放假回家我都会帮父母干很多活<br>每天早上起来要喂鱼<br>然后要打理下花园，把杂草除掉，把树叶捡起来扔掉<br>如果到了暑假,每天下午要坐在院子里<br>不然家里的无花果啊，石榴啊，樱桃啊，都会被外面的小松鼠偷走<br>然后我就又没得吃的了</p>
<br>

<p>我很喜欢养宠物<br>我曾经养过两只乌龟，一只兔子，一只鸭子，一条狗和一盆仙人掌<br>最开始养的兔子被我吃了<br>后来养的鸭子也被窝吃了<br>再后来开始养乌龟，但是乌龟得了软骨病死了<br>于是我就决定开始养狗<br>但是有一天狗自己跑路了现在还没找到<br>最后，我想，我养仙人掌总可以吧……<br>我就养了一盆仙人掌<br>每天给它浇水<br>然后它就死了。。<br>由于家庭困难我什么都没有养活过<br>作为独生子我感到十分的孤独</p>
<br>

<p>其实云南是个教育很不发达的地方<br>虽然我生活在昆明<br>但是昆明的教育资源其实也不均衡<br>为了改善教育情况<br>云南省政府组织了一次交换生活动<br>通过各种考试和面试可以去美利坚读一年书<br>于是我就幸运的通过了所谓考试和面试<br>然后我惊讶的发现<br>一起过了的好像并不会说英语<br>但是他们有个无与伦比的优势被选了进来<br>那就是<strong>有钱</strong><br>他们被分到了白人聚居区<br>平时可以郊游party过着淫乱的生活<br>但是我去的是墨西哥移民聚居区<br>但不管怎样我还是可以去美利坚读书了</p>
<br>

<p>然而到了那里我才发现<br>这哪里是美利坚<br>这完全是墨西哥<br>这里的人整天和大麻军火打交道<br>每个月不出点枪击案那简直太不正常了<br>于是我就在担惊受怕中度过了一年<br>也就是这一年造就我坚韧不拔的品质<br>让我学会了在逆境中生存<br>教会了我面对困难要不抛弃不放弃 </p>
<br> 

<p>于是</p>
<br>

<p>虽然我<strong>大一</strong>刚进学校的时候<br>在班上排倒数<br>经过一年的努力<br>我还是排倒数<br>到了<strong>大二</strong><br>我决定加倍的努力，好好学习<br>一年后<br>我还是排倒数<br>终于到了<strong>大三</strong>完成了屌丝逆袭<br>混到了班级前三  </p>
<br>


<h2 id="所以要不学校发我个国励鼓励下我吧"><a href="#所以要不学校发我个国励鼓励下我吧" class="headerlink" title="所以要不学校发我个国励鼓励下我吧"></a>所以要不学校发我个国励鼓励下我吧</h2><h2 id="大山里的孩子不容易啊"><a href="#大山里的孩子不容易啊" class="headerlink" title="大山里的孩子不容易啊"></a>大山里的孩子不容易啊</h2><br>
<br>

<blockquote>
<p>玩笑而已，不会申请国励，大家别当真</p>
</blockquote>
]]></content>
      <tags>
        <tag>杂七杂八</tag>
      </tags>
  </entry>
  <entry>
    <title>属性的特性</title>
    <url>/2015/08/19/%E5%B1%9E%E6%80%A7%E7%9A%84%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>任何属性都有一组特性，用于描述相应存取方法的行为，如下</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *name;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="多线程特性"><a href="#多线程特性" class="headerlink" title="多线程特性"></a>多线程特性</h2><p>多线程特性有两种可选类型：<code>nonatomic</code>和<code>atomic</code>，分别代表单线程和多线程。</p>
<p><code>nonatomic</code>不是默认类型所以在声明属性时必须明确的写出<code>nonatomic</code>。</p>
<h2 id="读-写特性"><a href="#读-写特性" class="headerlink" title="读/写特性"></a>读/写特性</h2><p>读/写特性也有两种可选类型：<code>readwrite</code>和<code>readonly</code>,分别代表读写和只读。其中<code>readwrite</code> 是默认类型。</p>
<h2 id="内存管理特性"><a href="#内存管理特性" class="headerlink" title="内存管理特性"></a>内存管理特性</h2><p>内存管理特性有四种可选类型：<code>strong</code>、<code>weak</code>、 <code>copy</code>、 <code>unsafe_unretained</code>，这些类型决定相应的实例变量将如何引用对象。</p>
<p><code>strong</code>为默认类型。ARC自动＋1。</p>
<p><code>weak</code>是为了避免引用循环。对象销毁指针也自动销毁。</p>
<p><code>copy</code>类似于下面这个代码，它会将传入的值先复制一遍，<code>_name</code>指向新的复制的对象。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">-(<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name</span><br><span class="line">&#123;</span><br><span class="line">	_name = [name <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>这样做是因为，如果熟悉指向的对象类有可修改的子类，那么属性可能会指向可修改的子类对象，同时该对象可能会被其他拥有者修改，因此先复制该对象，再将属性指向复制后的对象。</p>
<p><code>unsafe_unretained</code>这种类型指针指向的对象被销毁时，指针不会自动设置为nil，而是成为空指针，所以不安全。</p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何隐藏键盘</title>
    <url>/2015/08/06/%E5%A6%82%E4%BD%95%E9%9A%90%E8%97%8F%E9%94%AE%E7%9B%98/</url>
    <content><![CDATA[<p>在手机上每次输入键盘都会自动打开，但是输入完之后键盘确不会自动隐藏。我感觉这是个蛋疼的设计，苹果干嘛不直接写个像UIActionSheet那样的东西，点击背景就可以隐藏键盘。不过IOS是高手设计的，高手写的东西自有它存在的道理，我等渣渣还是以后再去揣摩吧……</p>
<a id="more"></a>

<p>有两种方法可以实现隐藏键盘：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">[<span class="keyword">self</span>.view endEditing:<span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line">[textField resignFirstResponder];</span><br></pre></td></tr></table></figure>

<p>其中<code>[self.view endEditing:true];</code>可以让整个view取消所有第一响应者；<code>[textField resignFirstResponder];</code>只可以让那个相应的textField取消第一响应。</p>
<ul>
<li><code>FirstResponder</code>第一响应对象指的是窗口中，应用程序认为最适合处理事件的对象。当点击了textFiled之后，textField就成为了第一响应对象。这时键盘就会弹出来。</li>
</ul>
<p>然后有几种实现方式</p>
<h2 id="第一种：调用touchesBegan函数"><a href="#第一种：调用touchesBegan函数" class="headerlink" title="第一种：调用touchesBegan函数"></a>第一种：调用touchesBegan函数</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">-(<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span> *)touches withEvent:(<span class="built_in">UIEvent</span> *)event&#123;</span><br><span class="line">    [_textField resignFirstResponder];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二种：在背景上自定义一个手势"><a href="#第二种：在背景上自定义一个手势" class="headerlink" title="第二种：在背景上自定义一个手势"></a>第二种：在背景上自定义一个手势</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    _textField.delegate = <span class="keyword">self</span>;</span><br><span class="line">    <span class="built_in">UITapGestureRecognizer</span> *tap = [[<span class="built_in">UITapGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action: <span class="keyword">@selector</span>(tapAction)];</span><br><span class="line">    [<span class="keyword">self</span>.view addGestureRecognizer:tap];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)tapAction&#123;</span><br><span class="line">   [_textField resignFirstResponder];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在点击背景就可以隐藏键盘了</p>
<h2 id="第三种：通过点击return键隐藏键盘"><a href="#第三种：通过点击return键隐藏键盘" class="headerlink" title="第三种：通过点击return键隐藏键盘"></a>第三种：通过点击return键隐藏键盘</h2><p>按下键盘的return键会调用<code>-(void)textFieldDidEndEditing:(UITextField *)textField</code>这个方法，所以通过这个方法也可以实现键盘的隐藏</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">-(<span class="keyword">void</span>)textFieldDidEndEditing:(<span class="built_in">UITextField</span> *)textField&#123;</span><br><span class="line">    [_textField resignFirstResponder];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">-(<span class="built_in">BOOL</span>)textField:(<span class="built_in">UITextField</span> *)textField shouldChangeCharactersInRange:(<span class="built_in">NSRange</span>)range replacementString:(<span class="built_in">NSString</span> *)string&#123;</span><br><span class="line">    <span class="keyword">if</span> ([string isEqualToString:<span class="string">@"\n"</span>])&#123;</span><br><span class="line">        [textField resignFirstResponder];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-6/51472261.jpg" alt="隐藏键盘"></p>
<blockquote>
<p>最后注意，textField要设置代理 <code>_textField.delegate = self;</code></p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>如果你在墨西哥旅游又丢了带有美国签证的中国护照你该怎么办</title>
    <url>/2018/05/21/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%9C%A8%E5%A2%A8%E8%A5%BF%E5%93%A5%E6%97%85%E6%B8%B8%E5%8F%88%E4%B8%A2%E4%BA%86%E5%B8%A6%E6%9C%89%E7%BE%8E%E5%9B%BD%E7%AD%BE%E8%AF%81%E7%9A%84%E4%B8%AD%E5%9B%BD%E6%8A%A4%E7%85%A7%E4%BD%A0%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    <content><![CDATA[<p>这篇文章<a href="http://www.mafengwo.cn/i/9239225.html" target="_blank" rel="noopener">转自</a>我室友，发生在他带妹去墨西哥旅游的时候，当时处境十分窘迫。我还没去过墨西哥，但是听他描述墨西哥貌似警匪一家，对外地游客十分不友好，感觉记录一下还是很有必要的，难说我去的时候就用到了（希望用不到，毕竟比他精</p>
<a id="more"></a>

<p><strong>以下是原文</strong></p>
<hr>
<p>本人 美国 F1留学生，春假去 墨西哥 玩耍，不幸丢失护照两份，现已 成功 回到 美国 上学，将经验撰写于此，以供后人参考借鉴。</p>
<p>现在已经是研究生第二年，早在第一年的冬天，曾被在 墨西哥 读书的朋友推荐，去过 坎昆 和 古巴 ，对于拉美人的热情和漂亮小姐姐有着深刻的印象，所以春假赶上 秘鲁 雨季机票又贵得离谱的时候选择再一次来到了 墨西哥 。<br>刚到 墨西哥城 的时候手机就被小偷使用连环计偷了，好在同行妹子还有一个手机，便由人家carry全程。不想到临走的倒数第二天，在卡门海滩，护照丢了。<br>在 坎昆 租车，去Xcaret玩之后，晚上在卡门吃饭，吃饭的时候，包扔在车里，被盗贼砸碎车玻璃，妹子的包被拿走。我们两本护照都在其中。</p>
<p>（当然如果你的I20丢了那请老老实实的叫学校再给你邮一份，预计时间多加一周）</p>
<h2 id="报警篇"><a href="#报警篇" class="headerlink" title="报警篇"></a>报警篇</h2><p>首先，丢了东西肯定要报警，虽然你在 墨西哥 丢了东西真的不要指望还能拿回来。但是警察可以为你开具一个证明，这个证明能够证明你丢了护照。而你拿的这张纸，可以在 墨西哥 境内充当护照一样的存在，坐飞机，住酒店。据警察解释说，因为丢护照的人太多，所以他们国家就弄出了这么个证明，来替代身份证件。当然这张纸之后还有大用处，一定一定要保留好并且多复印！<br>说到沟通，我感觉除了 坎昆 的警察和 墨西哥城 等 大城 市的部分警察外，英语并不能有效的沟通。只能用肢体语言和谷歌来交流，不过开具证明并不是警察当面开，而是在专门的地方，那里应该会有说英语的人。当然，浪漫的 墨西哥 人们可不一定每天都上班。<br>说句实话，就我个人而言，因为先后来两次 墨西哥 ，和警察打过三次交道，以及之前 墨西哥 同学的经历， 我觉得，这个国家的警察和我们国家的警察是并不能比。在 美国 从来没和警察打过交道并不知道什么样，但是 墨西哥 的警察是可以和小偷一起分赃的，这边给小偷打着保护伞，另一边从小偷那里收好处费。同时，他们也会勒索游客（我）。所以基于这一点，如果说你的东西丢了，警察又表示可以帮你看看，你就可以委婉的 和警察说，提供佣金啊什么的，看看他愿不愿意。</p>
<h2 id="中国大使馆篇"><a href="#中国大使馆篇" class="headerlink" title="中国大使馆篇"></a>中国大使馆篇</h2><p>（我觉得如果真的丢了护照打开了这个攻略相信你已经报完警了，所以请戳这里…..）<br>在国外的 中国 公民出了事情，大使馆肯定是可以求助的地方。 中国 驻 墨西哥 大使馆在 墨西哥城 ， 蒂华纳 有一个领馆。如果你的护照丢了，请第一时间联系大使馆， <a href="http://mx.china-embassy.org/chn/" target="_blank" rel="noopener">http://mx.china-embassy.org/chn/</a> 点击领侨服务，里面有地址和电话，24小时服务热线就是为你而准备的。打完之后，里面的小哥哥会告诉你需要如何到 墨西哥城 中国 使馆并携带什么资料。（警察的report，咱们护照尺寸的照片和装有电子版的CD，证明你身份的一切证件，填好的旅行证申请表，护照丢失情况说明大使馆将会有单独的印好格式的纸给你，可以到大使馆再写）大使馆会给你提供旅行证作为你的临时护照，但作为旅游者，并不能给你办护照，只能提供旅行证。<br>大使馆的效率还是很高的，早上9点去的话，大概一天就下来了，之间要拿着收据走去汇丰银行交款，只收现金。<br>我去的时候赶上什么假日，银行不开门，耽搁了一天，使馆说第二天来取。第二天早上交完钱，拿着凭条在大使馆就取到了。</p>
<h2 id="美国大使馆篇"><a href="#美国大使馆篇" class="headerlink" title="美国大使馆篇"></a>美国大使馆篇</h2><p>拿到了旅行证之后，紧接着需要办的就是F1签证.<br>墨西哥 的 美国 签证办理方式与 中国 有一点不同， 墨西哥城 的大使馆申请时，照片采集工作需要由一个 墨西哥 政府运营的中心统一进行采集，也就是说，需要预约两次，所以我的建议就是，当你拿到旅行证之后，就可以直接打车到hamburgo 213这个地址….（希望我没有打错）去跟门口的工作人员讲，我丢了签证，我要emergency，他就会带你进去一个咨询的窗口，告诉你具体的流程。当然，预约要在你的DS160填完之后。不过我建议先去一次问清楚，至少混个脸熟，这样就可以插队( •̀ ω •́ )y 毕竟咱们也算是外国人特权。在那个咨询窗口，他可能会告诉你现在已经预约到好久之后了，不用管他，先去混脸熟。DS160需要自己在网上填写，写的时候和原来在国内申请时候一样，申请之后就会有时间，你选两个预约的时间，一般照相采集就可以第二天，但是签证要很久。（ 墨西哥城 大使馆还是很火的）<br>预约了时间之后，一定一定要写邮件给 美国 大使馆，介绍你的情况，申请加急。我下午4点钟写的邮件，不到5点就回复了，同意加急，并且把时间线发给了我。最后我是上午9点进行了照片和指纹采集，采集之后直接走进大使馆办理签证，办签证的时候实话实说。去之前，警察给开的丢失证明多复印几份，因为 美国 大使馆要把原件收走存档，所以建议备好复印件，以备不时之需。面试的时候也一定要跟签证官说尽量快一点。<br>我当时去的时候是中午，但是第二天下午三点，就可以走进大使馆领取护照了。拿到护照，就很顺利的回到美国。</p>
<h2 id="后遗症篇"><a href="#后遗症篇" class="headerlink" title="后遗症篇"></a>后遗症篇</h2><p>旅行证上写着与护照同等效力，有效期为两年，回到 美国 可以去大使馆换护照，换的时候记得告诉使馆工作人员美签那页不要剪角。而我并没有换，于是有了现在这一幕， 中国 护照持美签 香港 转机可以入境 香港 ，然而旅行证并不能入境，于是刚刚在 香港 入境处拿着旅行证的我被活生生的拒绝了并在入境处大吵了一架，现在默默地在 香港 机场楼上喝啤酒….把这篇文章敲完。</p>
]]></content>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让Markdown图片居中</title>
    <url>/2015/07/15/%E5%A6%82%E4%BD%95%E8%AE%A9markdown%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<a id="more"></a>

<p>一般在MarkDown中通过</p>
<pre><code> &#39;![](url)&#39; </code></pre>
<p>添加图片看到的都是这样的：</p>
<p><img src="../../../../image/515efc15-56d8-4018-996c-1337b5d2edd8.JPG"></p>
<p>但是如果我想让图片居中该怎么做呢？查了点资料之后发现可以这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"url"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>把这几行代码直接加到markdown里面就可以了，url换成图片的地址，就像这样：</p>
<div style="text-align: center">
    <img src="../../../../image/515efc15-56d8-4018-996c-1337b5d2edd8.JPG"/>
</div>

<p>相当于手动嵌入了HTML代码</p>
<p><strong>或者</strong>  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">![](url)</span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>


<center>

<p><img src="../../../../image/515efc15-56d8-4018-996c-1337b5d2edd8.JPG"></p>
</center>


]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2018/01/25/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>排序算法是最基本最常用的算法，是算法与数据结构的基础，也是面试中常见的一类问题。</p>
<a id="more"></a>

<h2 id="插入排序-Insertion-sort"><a href="#插入排序-Insertion-sort" class="headerlink" title="插入排序 Insertion sort"></a>插入排序 Insertion sort</h2><p>插入排序方法类似于我们整理手上的扑克牌，在数据量小的时候是一种高效的的排序算法。</p>
<p>插入排序通常只需要用到O(1)的额外空间：</p>
<ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置后</li>
<li>重复步骤2~5</li>
</ol>
<p><img src="../../../../image/2f6d0253-716a-43b4-b163-8dd256ef2318.png"></p>
<h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><p>升序<br><img src="../../../../image/38a85759-504d-4200-8905-1a7890c1685d.png"></p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;a.<span class="built_in">size</span>();j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> key = a[j];</span><br><span class="line">        <span class="keyword">int</span> i = j - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&gt;=<span class="number">0</span> &amp;&amp; a[i]&gt;key) &#123;</span><br><span class="line">            a[i+<span class="number">1</span>] = a[i];</span><br><span class="line">            i-- ;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i+<span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序是分治法的一个实现：</p>
<p><strong>Divide：</strong> 把长度为n的序列分成两个长度为n/2的子序列</p>
<p><strong>Conquer：</strong>递归的使用归并排序将子序列排序</p>
<p><strong>Combine：</strong>将两个排好序的子序列合并成一个序列</p>
<h3 id="伪代码："><a href="#伪代码：" class="headerlink" title="伪代码："></a>伪代码：</h3><p><strong>归并操作：</strong></p>
<p><img src="../../../../image/92806cb1-e137-41e5-8353-60c97a3ee33a.png"></p>
<p><img src="../../../../image/497e001e-307b-4a25-8142-b9ac91b76d03.png"></p>
<p><img src="../../../../image/6b9c99b4-2693-444d-afa6-94078e35f6fe.png"></p>
<p>例如上图所示，归并操作将A分成L和R两个数组，然后根据每个元素的大小依次将元素重新填入到A中。</p>
<p><strong>归并排序：</strong></p>
<p><img src="../../../../image/9ed62314-bdce-44dd-95c8-d354cd74ecad.png"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merage</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="keyword">int</span> p, <span class="keyword">int</span> q, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1 = q - p +<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n2 = r - q;</span><br><span class="line">    vector&lt;int&gt; L(n1+1), R(n2+1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">        L[i] = A[p+i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n2; j++) &#123;</span><br><span class="line">        R[j] = A[q + j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    L[n1+<span class="number">1</span>] = INT_MAX;</span><br><span class="line">    R[n1+<span class="number">1</span>] = INT_MAX;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = p;k&lt;r;k++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(L[i]&lt;=R[j]) &#123;</span><br><span class="line">            A[k] = L[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            A[k] = R[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merage_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p&lt;r) &#123;</span><br><span class="line">        <span class="keyword">int</span> q = <span class="keyword">int</span>((p+r<span class="number">-0.5</span>)/<span class="number">2</span>);</span><br><span class="line">        merage_sort(A, p, q);</span><br><span class="line">        merage_sort(A, q+<span class="number">1</span>, r);</span><br><span class="line">        merage(A, p, q, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序是一种简单的排序方法，通过重复的走访需要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。</p>
<p>冒泡排序的运作如下：</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ol>
<h3 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h3><p><img src="../../../../image/043f760c-a7c1-407f-92f2-b4d3a220e100.png"></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = a.<span class="built_in">size</span>()<span class="number">-1</span>;j&gt;i+<span class="number">1</span>;j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i]&gt;a[j]) &#123;</span><br><span class="line">                swap(a[i], a[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>参考资料：</p>
<p><em>Introduction to Algorithms</em> Thomas H. Cormen</p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F</a></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>巴黎（二）</title>
    <url>/2016/12/24/%E5%B7%B4%E9%BB%8E%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="夜游塞纳河"><a href="#夜游塞纳河" class="headerlink" title="夜游塞纳河"></a>夜游塞纳河</h2><p>塞纳河是流经巴黎市中心的法国第二大河，全长780公里，流域面积7.8万平方公里。</p>
<p><img src="../../../../image/e3ec4ef1-3e64-497d-9893-4f9e9bf3e645.jpg"></p>
<p><img src="../../../../image/bfe578b4-dba2-404c-9f8c-b6200116a552.JPG"></p>
<center>白天可以寻找一下塞纳河畔左岸的咖啡（虽然我没找到）</center>

<p>塞纳河游轮是强烈推荐的项目，75欧一个人也不是很贵。我爸妈去纽约玩的时候哈德逊河游轮可是188美刀一个人，还不包括酒水。</p>
<p>游轮路线从埃菲尔铁塔底下开始，一直到巴黎圣母院，然后掉头回到埃菲尔铁塔，整个游轮持续三小时，期间供应一顿完整的法式晚餐，包括前菜，正餐，甜点和无限量的红酒以及spakling。体验特别好，强烈推荐！。</p>
<p><img src="../../../../image/4dd8fd07-c853-4b2b-be3a-194aca57bcda.JPG"></p>
<p><img src="../../../../image/e3a3fbaa-201f-41ab-9c91-23f8a7cce24b.JPG"></p>
<p><img src="../../../../image/ac75eadb-ad46-4588-8584-20b8dd646a1b.jpeg"></p>
<center>边吃法国鹅肝边看埃菲尔铁塔是种怎样的体验</center>


<h2 id="埃菲尔铁塔"><a href="#埃菲尔铁塔" class="headerlink" title="埃菲尔铁塔"></a>埃菲尔铁塔</h2><p>埃菲尔铁塔！</p>
<p>世界著名建筑！</p>
<p>法国文化象征之一！</p>
<p>巴黎城市地标之一！</p>
<p>巴黎最高建筑物！</p>
<p><img src="../../../../image/e4e526e5-f021-48d5-a4b6-edcd9815e39d.JPG"></p>
<p>埃菲尔铁塔从1887年1月27日起建，分为三楼，分别在离地面57.6米、115.7米和276.1米处，其中一、二楼设有餐厅，第三楼建有观景台，从塔座到塔顶共有1,711级阶梯，共用去钢铁7,000吨，12,000个金属部件，250万颗铆钉，模仿人体的骨头而建，极为壮观属于镂空结构铁塔，塔高为300米，总高320米。</p>
<p><img src="../../../../image/35bd423e-617f-412f-a7b7-3f2feaae61f2.JPG"></p>
<p>PS: 埃菲尔铁塔美15分钟会进行一次“闪灯”，成千上万的小白灯在铁塔上一闪一闪的十分漂亮，妹子们不容错过！</p>
<p>另外值得一提的是在埃菲尔铁塔这种地方吃饭居然特别的便宜，一顿标准的前菜+正餐+甜点+红酒的法国大餐居然只要30块钱。纽约时代广场附近30吃一顿只有美式汉堡吧，比如麦当劳或者 shake shake。</p>
<p><img src="../../../../image/706e8556-1552-4822-904e-9d2c0a120a11.JPG"></p>
<p><img src="../../../../image/7458405b-92b5-4021-990b-5534be194f98.JPG"></p>
<h2 id="巴黎圣母院"><a href="#巴黎圣母院" class="headerlink" title="巴黎圣母院"></a>巴黎圣母院</h2><p>圣母院是巴黎最有代表性的历史古迹、观光名胜与宗教场所。而在圣母院门口外的圣母院广场中，有个原点纪念物，是法国丈量全国各地里程时所使用的起测点，使得圣母院被视为法国文化中心点的象征意义，又更加强烈了一点。</p>
<p><img src="../../../../image/c2abff90-9ce9-4c1c-8e24-67921385d8d4.JPG"></p>
<p>圣母院法文原名中的“Notre Dame”原意为“我们的女士”，这位女士正是指耶稣的母亲圣母玛利亚，这种敬称也广泛于西方国家的语言使用，也和维克多·雨果的小说《巴黎圣母院》同名。</p>
<p><img src="../../../../image/d4bc6d1f-12b3-4502-9eac-3ef84c0ad9bf.JPG"></p>
<p><img src="../../../../image/7e6ec84c-4b85-4091-975b-710be5aabd82.JPG"></p>
<blockquote>
<p>但是实在是不记得当时发生了啥事，我们一群人居然没人有进去，居然没有进去！！！</p>
</blockquote>
<p><img src="../../../../image/1346f237-8400-4364-b5cd-8462a8a4edc9.JPG"></p>
<center>你相信巴黎圣母院有一天会消失吗？</center>


<h2 id="凯旋门和香榭丽舍大街"><a href="#凯旋门和香榭丽舍大街" class="headerlink" title="凯旋门和香榭丽舍大街"></a>凯旋门和香榭丽舍大街</h2><p>巴黎凯旋门，即雄狮凯旋门，位于法国巴黎的戴高乐广场中央，香榭丽舍大街的西端。是拿破仑为纪念1805年打败俄奥联军的胜利，于1806年下令修建而成的。拿破仑被推翻后，凯旋门工程中途辍止。1830年波旁王朝被推翻后又重新复工，到1836年终于全部竣工。</p>
<p>巴黎12条大街都以凯旋门为中心，向四周放射，气势磅礴，为欧洲大城市的设计典范。凯旋门高49.54米，宽44.82米，厚22.21米，中心拱门高36.6米，宽14.6米。在凯旋门两面门墩的墙面上，有4组以战争为题材的大型浮雕：“出征”、“胜利”、“和平”和“抵抗”；其中有些人物雕塑还高达五六米。凯旋门的四周都有门，门内刻有跟随拿破仑远征的386名将军和96场胜战的名字，门上刻有1792年至1815年间的法国战事史。</p>
<p><img src="../../../../image/70e1f0fe-08c7-481b-8863-6d1aa219ef99.JPG"></p>
<center>气势磅礴的凯旋门</center>

<p><img src="../../../../image/b9d434eb-0480-475e-94d0-93d65842dcd6.JPG"></p>
<center>香榭丽舍大街</center>

<p><img src="../../../../image/9b170e78-0864-475f-84a2-310d66cfa604.JPG"></p>
<center>路边都是没人要的香榭的落叶～</center>

<h2 id="凡尔赛宫"><a href="#凡尔赛宫" class="headerlink" title="凡尔赛宫"></a>凡尔赛宫</h2><p>凡尔赛宫位于法国巴黎西南郊外伊夫林省省会凡尔赛镇。1682年至1789年是法国的王宫及政治中心。在这个地方可以深刻的体会到什么叫做万恶的资本主义。</p>
<p><em>凡尔赛宫宫殿视其立面朝向，呈现出截然不同的风格。作为正面入口的西立面，由于大理石庭院的路易十三狩猎行宫得以保留，因此风格统一为与狩猎行宫相同的，典型的文艺复兴时期法式宫邸的风貌：立面划分为两段，下段为法兰西岛砖楼风格的两层红砖墙面，配合米黄色琢石修饰的形体边缘和落地门连窗，古典柱式运用极为克制，只使用少量的塔斯干壁柱强调建筑区隔；上段则是深蓝色法式高屋顶配合金色缘边老虎窗。其余三个方向立面，特别是作为凡尔赛宫花园宏大背景的东立面，则为典型的意大利古典主义风格，屋顶使用意式平屋顶而几乎无法察觉，立面则为标准的古典主义三段式处理，即将立面划分为纵、横三段，建筑立面左右对称，并使用大量的高卢壁柱装饰，图景焦点更以神殿门廊般的圆柱外廊强调，整体造型轮廓整齐、庄重雄伟，被称为是理性美的代表。其内部装潢则以巴洛克风格为主，少数厅堂为洛可可风格。</em></p>
<p><em>凡尔赛宫的建筑风格引起俄国、奥地利等国君主的羡慕仿效。彼得一世在圣彼得堡郊外修建的彼得大帝夏宫、玛丽亚·特蕾西亚在维也纳修建的美泉宫、腓特烈二世和腓特烈·威廉二世在波茨坦修建的无忧宫、以及巴伐利亚国王路德维希二世修建的海伦基姆湖宫都仿照了凡尔赛宫的宫殿和花园。</em></p>
<p><em>但是，凡尔赛宫过度追求宏大、奢华，居住功能却不方便。宫中没有一处厕所或盥洗设备，连王太子都不得不在卧室的壁炉内便溺。路易十五极端厌恶寝宫，认为它虽然宽敞、豪华，却不保暖。 —– 维基百科</em></p>
<p><img src="../../../../image/e4f5f13a-887d-4113-8ef4-fcd2ca6846d9.jpg"></p>
<p><img src="../../../../image/e8e349d8-63a3-4d1b-94c8-0cf775e2c1c1.jpg"></p>
<p><img src="../../../../image/67ac1106-0981-4861-80b6-0461f2612ad8.jpg"></p>
<p><img src="../../../../image/f315334d-ef51-44e0-aecf-19988ef67d1e.jpg"></p>
<p><img src="../../../../image/51449823-9f55-4ba0-a52f-33e6b1afa3f2.jpg"></p>
<blockquote>
<p>原来今生，我也走过如此美好之地。</p>
</blockquote>
<p><a href="http://caoyudong.com/2016/12/23/%E5%B7%B4%E9%BB%8E/">巴黎（一）</a></p>
]]></content>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>控件运动效果</title>
    <url>/2015/08/18/%E6%8E%A7%E4%BB%B6%E8%BF%90%E5%8A%A8%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>运动效果就是利用加速度传感器，当你在左右摇手机的时候控件也在跟着左右动。（好像除了装逼没什么卵用啊～）</p>
<a id="more"></a>

<p>比如将一个<code>_button</code>的添加运动效果：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line"> <span class="built_in">UIInterpolatingMotionEffect</span> *motionEffect;</span><br><span class="line">    motionEffect = [[<span class="built_in">UIInterpolatingMotionEffect</span> alloc] initWithKeyPath:<span class="string">@"center.x"</span> type:<span class="built_in">UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis</span>];</span><br><span class="line">    motionEffect.minimumRelativeValue = @(<span class="number">-25</span>);  <span class="comment">//觉得不明显可以把参数改大一点</span></span><br><span class="line">    motionEffect.maximumRelativeValue = @(<span class="number">25</span>);</span><br><span class="line">    [_button addMotionEffect:motionEffect];</span><br><span class="line">    </span><br><span class="line">    motionEffect = [[<span class="built_in">UIInterpolatingMotionEffect</span> alloc] initWithKeyPath:<span class="string">@"center.y"</span> type:<span class="built_in">UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis</span>];</span><br><span class="line">    motionEffect.minimumRelativeValue = @(<span class="number">-25</span>);</span><br><span class="line">    motionEffect.maximumRelativeValue = @(<span class="number">25</span>);</span><br><span class="line">    [_button addMotionEffect:motionEffect];</span><br></pre></td></tr></table></figure>


<blockquote>
<p>一定要用真机才看得到效果</p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>微信空白朋友圈是怎么回事</title>
    <url>/2015/08/07/%E5%BE%AE%E4%BF%A1%E7%A9%BA%E7%99%BD%E6%9C%8B%E5%8F%8B%E5%9C%88%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B/</url>
    <content><![CDATA[<p>自从今天下午院草发了一条空白朋友圈，便引来无数跟风者，许多人一边被刷屏，一边好奇这究竟是怎么发出来的。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-7/98570261.jpg"></p>
<a id="more"></a>

<p>院草先是误导大家这是个纯手速问题，于是我尝试了下自己的手速，发现完全跟不上</p>
<h3 id="然后经过永盛大神指点，终于发出来了："><a href="#然后经过永盛大神指点，终于发出来了：" class="headerlink" title="然后经过永盛大神指点，终于发出来了："></a>然后经过永盛大神指点，终于发出来了：</h3><p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-7/97661990.jpg"></p>
<p>于是各路豪杰争先恐后的开始发空白朋友圈</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-7/69679242.jpg"></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-7/64720393.jpg"></p>
<p>其中不乏不忘装个逼的邹哲鹏<br><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-7/67769556.jpg"></p>
<p>当然也有不明真相的<strong>广东省武术冠军</strong>，受院草蛊惑，真的怀疑自己手速有问题😂</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-7/86411323.jpg"></p>
<h2 id="经过我的研究，其实这不是微信的问题"><a href="#经过我的研究，其实这不是微信的问题" class="headerlink" title="经过我的研究，其实这不是微信的问题"></a>经过我的研究，其实这不是微信的问题</h2><p>一开始我猜想微信应该是用了苹果标准的开发方法，在<code>navigationController</code>里面添加了一个<code>barButton</code>，然后使用了Xcode自动创建的按钮点击事件。</p>
<blockquote>
<p>于是我自己写了一个DEMO，其中写了类似于微信的判断，当没有输入文字的时候禁用barButton。所以没有文字的时候是绝对无法点击按钮显示消息的。</p>
</blockquote>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-7/88699565.jpg"></p>
<p>果然，跟微信一样，输入一个字母，按住发送键，然后再删除那个字母，松开发送键，消息还是显示了！！说明我的猜想应该是对的～～</p>
<p>当然这也不能怪微信，毕竟这是苹果自动创建的方法，谁写都是这样的。没有设计师会考虑到可以用这种方法发送空白消息，也不知道是谁闲的蛋疼发现的这个问题。<em>（当然，不可能是院草李八千，因为他忙着泡妞不会闲）</em></p>
<h2 id="那么有没有办法防止发送空白消息呢？"><a href="#那么有没有办法防止发送空白消息呢？" class="headerlink" title="那么有没有办法防止发送空白消息呢？"></a>那么有没有办法防止发送空白消息呢？</h2><p>答案是有的，不然我也不会那么晚来写这篇文章了……</p>
<p>大概思路就是重写苹果的点击事件。一个点击事件对应一对<code>touchDown</code>和<code>touchUp</code>事件，分别代表手指按下去的状态和手指离开屏幕的状态。我们要做的就是只要手指按下去就立即发送信息，这样无论那人手速有多快都不可能发送空白消息了！！</p>
<p>但是<code>navigationController</code>的专用控件<code>UIBarButton</code>没有判断Button状态的函数，所以只能用<strong>Button</strong>代替<strong>BarButton</strong>。然后重写点击方法</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swift</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">		……………</span><br><span class="line">		<span class="type">Button</span>.addTarget(<span class="keyword">self</span>, action: <span class="string">"touchDownAction"</span>, forControlEvents: <span class="type">UIControlEvents</span>.<span class="type">TouchDown</span>)</span><br><span class="line">		…………</span><br><span class="line">		…………</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">touchDownAction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//按钮按下时的动作</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>效果：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-7/85578731.jpg"></p>
<p><a href="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-7/25844872-test.zip" target="_blank" rel="noopener">代码下载（swift1.2  Xcode6.4）</a></p>
<blockquote>
<p>后来借了台安卓机，发现貌似安卓不能发这个，好像每次删除了字符就会刷新button的状态。至于IOS为什么会这样也只是我猜的，是不是真的要看IOS源码才知道，所以一切真相只能等到IOS开源了～</p>
</blockquote>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派GPIO的简单控制</title>
    <url>/2015/10/18/%E6%A0%91%E8%8E%93%E6%B4%BEGPIO%E7%9A%84%E7%AE%80%E5%8D%95%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>General Purpose Input Output （通用输入/输出）简称为GPIO，或总线扩展器。也就是树莓派上那一堆引脚。</p>
<a id="more"></a>

<h2 id="GPIO库"><a href="#GPIO库" class="headerlink" title="GPIO库"></a>GPIO库</h2><ol>
<li>wiringPi C,有Perl,PHP,Ruby,Node.js和Golang的扩展，支持wiringPi Pin 和BCM GPIO两种编号</li>
<li>RPi.GPIO Python, 支持Board Pin和BCM GPIO两种编号</li>
<li>Webiopi，Python，使用BCM GPIO编号</li>
<li>BCM2835, 使用BCM GPIO编号</li>
<li>WiringPi－GO，GO语言，支持以上三种编号</li>
</ol>
<h3 id="具体情况如下图："><a href="#具体情况如下图：" class="headerlink" title="具体情况如下图："></a>具体情况如下图：</h3><p>Board Pin 编号为板上的自然编号，左边引脚为1、3、5……39；右边引脚为2、4、6……40。<code>RPi.GPIO.setmode(GPIO.BOARD)</code>采用这列编号</p>
<p>BCM GPIO为树莓派主芯片提供商Broadcom的编号方法，相当于调用了<code>WiringPiSetupGpio()</code>或<code>RPi.GPIO.setmode(GPIO.BCM)</code>采用这列编号</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-18/44779713.jpg"></p>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>安装：</p>
<p>新的系统（2015/11月的）好像自带了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-dev</span><br></pre></td></tr></table></figure>

<p>安装python pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure>

<p>安装python的GPIO库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install rpi.gpio</span><br></pre></td></tr></table></figure>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python</span></span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">a = <span class="number">21</span></span><br><span class="line">GPIO.setmode(GPIO.BCM) </span><br><span class="line">GPIO.setup(a,GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    GPIO.output(a,GPIO.HIGH)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    GPIO.output(a,GPIO.LOW)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">GPIO.cleanup()</span><br></pre></td></tr></table></figure>

<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p><strong>wiringPi库</strong></p>
<p>安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://git.drogon.net/wiringPi</span><br><span class="line"><span class="built_in">cd</span> wiringPi</span><br><span class="line">./build</span><br></pre></td></tr></table></figure>

<p>测试有没有安装好</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$gpio</span> -v</span><br><span class="line"><span class="variable">$gpio</span> readall</span><br></pre></td></tr></table></figure>


<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;wiringPi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LED Pin - wiringPi pin 0 is BCM_GPIO 17.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED     21</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  wiringPiSetup () ;</span><br><span class="line">  <span class="built_in">pinMode</span> (LED, <span class="literal">OUTPUT</span>) ;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">digitalWrite</span> (LED, <span class="literal">HIGH</span>) ;  <span class="comment">// On</span></span><br><span class="line">    <span class="built_in">delay</span> (<span class="number">500</span>) ;               <span class="comment">// mS</span></span><br><span class="line">    <span class="built_in">digitalWrite</span> (LED, <span class="literal">LOW</span>) ;   <span class="comment">// Off</span></span><br><span class="line">    <span class="built_in">delay</span> (<span class="number">500</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>编译需要用  <code>gcc -Wall -o test test.c -lwiringPi</code><br>然后 <code>sudo ./test</code></p>
</blockquote>
<p><strong>BCM2835库</strong></p>
<p>安装</p>
<ol>
<li>下载:  &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <code>$ wget http://www.airspayce.com/mikem/bcm2835/bcm2835-1.35.tar.gz</code></li>
<li>解压缩:  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <code>$tar xvzf bcm2835-1.35.tar.gz</code></li>
<li>进入压缩之后的目录: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>$cd bcm2835-1.35</code></li>
<li>配置:    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;          <code>$./configure</code></li>
<li>从源代码生成安装包: &nbsp;&nbsp;&nbsp;&nbsp; <code>$make</code></li>
<li>执行检查:    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       <code>$sudo make check</code></li>
<li>安装 bcm2835库:  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <code>$sudo make install</code></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bcm2835.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// P1插座第11脚</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> PIN RPI_GPIO_P1_11</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (!bcm2835_init())</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 输出方式</span></span><br><span class="line">   bcm2835_gpio_fsel(PIN, BCM2835_GPIO_FSEL_OUTP);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     bcm2835_gpio_write(PIN, <span class="literal">HIGH</span>);</span><br><span class="line">     bcm2835_delay(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">     bcm2835_gpio_write(PIN, <span class="literal">LOW</span>);</span><br><span class="line">     bcm2835_delay(<span class="number">100</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   bcm2835_close();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-18/93321296.jpg"></p>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>巴黎（一）</title>
    <url>/2016/12/23/%E5%B7%B4%E9%BB%8E/</url>
    <content><![CDATA[<p>当天坐了最早的一班欧洲之星到巴黎，一个是为了节省时间，一个是因为学生太穷了，最早一班列车五点出发特别便宜。</p>
<p>欧洲之星是链接伦敦和巴黎的一班列车，于1994年开始运行，横跨英吉利海峡，链接英国伦敦圣潘克拉斯车站和法国巴黎北站。其中圣潘克拉斯车站在大英博物馆和国王十字车站之间，可以顺便去看下著名的九又四分之三站台（我居然也忘了去看……）。</p>
<p>每一列欧洲之星由20节车厢编组而成，长达394米，重达800吨，其中18节为客车厢。若在长隧道（如海峡隧道）里发生事故，列车可以迅速解连为两部分从而加速疏散未受影响的车厢里的乘客。</p>
<p><img src="../../../../image/3ad1415e-1915-4e95-8f42-f477ac3fe73c.jpg"></p>
<a id="more"></a>

<p><img src="../../../../image/3c84583d-a0e4-4fc8-b281-0e689be13a08.jpg"></p>
<p>早上的法国雾蒙蒙的，列车两旁都是白茫茫的一片，有时能隐约看到树或者房子的轮廓快速从列车身边划过。全车人都在睡觉，而我没睡，不是因为我不困，是因为我期末一门课的实验报告还没写完。人生第一次跨州做作业，把美国的作业硬是带到了英吉利海峡写。（PS: 后面这门课拿了A</p>
<p>到了巴黎之后，一下车明显感觉到了局势的紧张，跟悠闲的伦敦完全不一样，到处都是一排一排的，荷枪实弹的警察。都说法国治安不好，万万没想到会有这么严重，几乎等同于之前受到恐怖袭击之后的昆明火车站，到处都是抬着冲锋枪的警察和装甲车。于是我们几个决定在巴黎的所有行程全部都坐Uber，别把多的钱都花进去了。</p>
<h2 id="蒙马特高地"><a href="#蒙马特高地" class="headerlink" title="蒙马特高地"></a>蒙马特高地</h2><p><img src="../../../../image/db11a3bb-1215-49c8-a584-e1a8dbb1ef23.jpg"></p>
<p>首先去了蒙马特高地，这是位于法国巴黎市十八区的一座130米高的山丘，在塞纳河的右岸。比较著名的景点就是白色圆顶的圣心堂和圣彼埃尔教堂。</p>
<p><img src="../../../../image/2bf4ae17-076d-4c9d-8dea-73107fc37852.jpg"></p>
<p><img src="../../../../image/d720a3f9-b976-4a09-b03d-209d902fa9db.jpg"></p>
<h2 id="红磨坊"><a href="#红磨坊" class="headerlink" title="红磨坊"></a>红磨坊</h2><p><img src="../../../../image/5b7b43b4-c7b7-454e-bdba-4496a2eeec64.jpg"></p>
<p>红磨坊是巴黎著名的红灯区。1870年普法战争后，饱受战争之苦的人们需要寻找一个解脱放松的地方，于是酒吧和歌舞厅就成了当时人们的首选。红磨坊始建于1889年，在克里希大道上，因屋顶上仿造的红风车而闻名于世。</p>
<p>值得一提的是，平安夜晚上由于一小伙伴安排失误，原本要去巴黎排名第一的餐厅吃饭的，结果餐厅关门，于是在红磨坊地区找了一家华人开的寿司店吃到了平安夜。十分难得的体验，不知道知乎有没有“在红灯区度过平安夜是一种怎么样的体验？“这种问题可以让我回答下的。</p>
<h2 id="蓬皮杜"><a href="#蓬皮杜" class="headerlink" title="蓬皮杜"></a>蓬皮杜</h2><p>蓬皮杜中心内部包括公共资讯图书馆、法国国立现代艺术美术馆与声学、音乐研究和协作学院。</p>
<p>为了选出蓬皮杜中心的设计，当时举办建筑设计比赛，并将结果公布于1971年。蓬皮杜中心完工后，引起法国社会大众诸多争议，由于它与巴黎的传统风格建筑完全相反，造成许多巴黎市民无法接受，但也有艺文人士大力支持，有人则称它是“市中心的炼油厂”。</p>
<p>可以很清楚的看到，这栋建筑被各种管道包围，宛如一个化工厂。</p>
<p><img src="../../../../image/2ca37bb1-32f4-4f32-8f34-72cdbfb5001b.jpg"></p>
<p><img src="../../../../image/405cc8dd-2aef-45e4-951c-3448a46bfbdf.jpg"></p>
<p><img src="../../../../image/8f2934a4-cd50-4ab8-a048-86f4adc28185.jpg"></p>
<h2 id="卢浮宫"><a href="#卢浮宫" class="headerlink" title="卢浮宫"></a>卢浮宫</h2><p><img src="../../../../image/550bf206-d631-4b23-be65-e69bc1352a9f.JPG"></p>
<p>世界四大博物馆之首卢浮宫。原本是法国的王宫，始建于12世纪末，最初的作用是监狱与防御性的城堡，后来经过包括拿破仑在内的多位国王扩建形成了今天看到的卢浮宫。拿破仑在征服欧洲各国的同时，将被征服国家的艺术品大量运往法国，送至卢浮宫（此时已改名为“拿破仑博物馆”）展出，还增加了古罗马和古埃及艺术品展厅。但随着1815年拿破仑的第二次退位和终生放逐，卢浮宫藏品中约有5000多件艺术品被归还给原来所属国。</p>
<p><img src="../../../../image/ea771bb3-47c2-475d-aed1-c2a83fc85d2c.jpg"></p>
<p><img src="../../../../image/818a64d0-347e-49ef-a1c1-44d91233ca0a.jpg"></p>
<p>此后的100多年里，卢浮宫的收藏范围不断扩大，加入了东方（远东）、亚述、古埃及等时代的藏品。随着藏品数量的增多，展览空间越来越小。1981年，法国政府决定将卢浮宫建筑群的全部建筑划拨博物馆，并对卢浮宫实施了大规模的整修。由华裔美籍设计师贝聿铭设计的位于卢浮宫中央广场上的透明金字塔建筑。整修后的卢浮宫于1989年重新开放。</p>
<p><img src="../../../../image/de86a698-8a3a-4042-b2ac-494ed448caa2.jpg" alt="岩间圣母"></p>
<p>欧洲的博物馆有个好处就是，你只要是欧盟学校的学生，凭着学生证就可以免费进去参观，卢浮宫也不例外。然而问题在于一行人中只有我一个是美国从美国来的，其他人都有英国学生证，让我出钱买门票我心里有点不平衡。于是乎我灵机一动，大声告诉工作人员，我说约克（York）来的，虽然我的学校在纽约（New York）但是约克就是约克，前面加了个”New“也依旧是约克。 凭借着这一波发挥，我成功逃掉了此次欧洲之行的所有的博物馆门票。（巴士底狱除外，等下会说）。</p>
<p><img src="../../../../image/f740a32d-4dd1-4822-9fea-1c6075679809.jpg"></p>
<p><img src="../../../../image/48559dc2-022b-4d71-a724-4df4f43cc4fe.JPG"></p>
<p><img src="../../../../image/bc607036-7741-4351-b0d9-88a599480036.JPG"></p>
<p><img src="../../../../image/74d4cdf7-4585-41a8-8ba9-05e0249ded2e.JPG"></p>
<h2 id="巴黎古监狱"><a href="#巴黎古监狱" class="headerlink" title="巴黎古监狱"></a>巴黎古监狱</h2><p>巴黎古监狱是巴黎昔日的王宫和监狱之一，靠近巴黎圣母院。它是大型建筑群司法宫的一部分。在法国大革命期间，许多囚犯从这里送往巴黎各处上断头台。</p>
<p>我们到巴士底狱的时候天已经快黑了，游人不多。然而我们正准备拿着学生证混进去的时候，工作人员得知我们是英国的学生之后直接拒绝了我们入内，要求买门票。理由是英国已经脱离了欧盟，Not European anymore。这工作人员也够时尚的，英国连脱欧的手续都还没开始办她就直接把英国排除在外了。</p>
<p><img src="../../../../image/572f142d-3895-4780-b2a6-be7f17c0ba74.JPG"></p>
<p><img src="../../../../image/cf8f7a0a-cb21-4f10-a2e7-c7f3d13a108c.JPG"></p>
<blockquote>
<p>原来今生，我也走过如此美好之地。</p>
</blockquote>
<hr>
<p><a href="http://caoyudong.com/2016/12/24/%E5%B7%B4%E9%BB%8E%EF%BC%88%E4%BA%8C%EF%BC%89/">巴黎（二）</a></p>
]]></content>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派桌面远程连接</title>
    <url>/2015/10/18/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%A1%8C%E9%9D%A2%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>可以先通过<a href="http://caoyudong.com/2015/10/03/%E9%80%9A%E8%BF%87USB%E8%BD%AC%E4%B8%B2%E5%8F%A3%E6%A8%A1%E5%9D%97%E8%BF%9E%E6%8E%A5%E6%A0%91%E8%8E%93%E6%B4%BE/">串口</a>或者HDMI连接树莓派</p>
<a id="more"></a>

<h2 id="安装vncserver（记得联网）"><a href="#安装vncserver（记得联网）" class="headerlink" title="安装vncserver（记得联网）"></a>安装vncserver（记得联网）</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tightvncserver</span><br></pre></td></tr></table></figure>


<h2 id="开启一个桌面"><a href="#开启一个桌面" class="headerlink" title="开启一个桌面"></a>开启一个桌面</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vncserver:1</span><br></pre></td></tr></table></figure>

<h2 id="关掉一个桌面"><a href="#关掉一个桌面" class="headerlink" title="关掉一个桌面"></a>关掉一个桌面</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vncserver -<span class="built_in">kill</span> :1</span><br></pre></td></tr></table></figure>
<p>注意 <code>－kill</code>后面有个空格，数字是桌面的编号</p>
<h2 id="安装VNC客户端"><a href="#安装VNC客户端" class="headerlink" title="安装VNC客户端"></a>安装VNC客户端</h2><p>各个平台下有很多vnc客户端，自己随便下一个就好。</p>
<p>然后通过树莓派的IP地址就可以连上了。</p>
<ul>
<li><p>IP地址后面那个数字是桌面的编号，比如我IP是<code>192.168.1.106</code>，编号为<code>1</code>，那就要用 <code>192.168.1.106:1</code>连接。</p>
</li>
<li><p>默认密码是: <code>12345678</code></p>
</li>
</ul>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-18/94388768.jpg" alt="密码"></p>
<p>然后就可以通过电脑控制树莓派了。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-18/47384815.jpg" alt="桌面VNC"></p>
<p>或者是iPad</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-18/15457988.jpg" alt="iPadVNC"></p>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>消除Cocoapods中的警告</title>
    <url>/2016/02/26/%E6%B6%88%E9%99%A4Cocoapods%E4%B8%AD%E7%9A%84%E8%AD%A6%E5%91%8A/</url>
    <content><![CDATA[<p>我们在使用CocoaPods的时候经常会发现一些pod会出现一些警告，这时在 <code>Podfile</code>中加入一句<code>inhibit_all_warnings!</code>就可以消除这些pod中的警告。强迫症专用啊！！</p>
<p>当然，我是无所谓，对于我这种低等级程序猿来说，只要程序能运行就好了～</p>
<a id="more"></a>

<p>比如 </p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-2-26/90730174.jpg"></p>
<p>加了之后重新<code>pod install</code>就没有了</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/16-2-26/19761672.jpg"></p>
]]></content>
      <tags>
        <tag>IOS</tag>
        <tag>cocoapods</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派设置无线上网</title>
    <url>/2015/10/03/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%AE%BE%E7%BD%AE%E6%97%A0%E7%BA%BF%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<h3 id="树莓派没有无线网卡-你要去某宝买一个USB无线网卡，20～30吧，不算贵～"><a href="#树莓派没有无线网卡-你要去某宝买一个USB无线网卡，20～30吧，不算贵～" class="headerlink" title="树莓派没有无线网卡,你要去某宝买一个USB无线网卡，20～30吧，不算贵～"></a>树莓派没有无线网卡,你要去某宝买一个USB无线网卡，20～30吧，不算贵～</h3><p>转自<a href="http://www.jianshu.com/p/b42e8d3df449" target="_blank" rel="noopener">http://www.jianshu.com/p/b42e8d3df449</a></p>
<a id="more"></a>

<h2 id="一、查看网卡状态是否正常"><a href="#一、查看网卡状态是否正常" class="headerlink" title="一、查看网卡状态是否正常"></a>一、查看网卡状态是否正常</h2><p>把无线网卡插到树莓派上，输入命令ifconfig -a查看是否有wlan0的信息，如果有说明网卡状态正常，可以跳过第二步，直接配置无线网络。如果查不到wlan0的信息，则需要安装无线网卡的驱动。</p>
<h2 id="二、查看无线网卡的信息"><a href="#二、查看无线网卡的信息" class="headerlink" title="二、查看无线网卡的信息"></a>二、查看无线网卡的信息</h2><p>输入命令dmesg | grep usb查看无线网卡的信息，主要是看制造厂家（Manufacturer）。比如，我的网卡信息是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usb 1-1.3: Manufacturer: Realtek</span><br></pre></td></tr></table></figure>

<p>以Realtek为例，安装无线网卡驱动。</p>
<p>如果现在你的树莓派能联网，输入安装命令就可以安装Realtek的驱动了。</p>
<p>首先搜索Realtek驱动：</p>
<p><code>apt-cache search realtek</code><br>看到下面信息：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">firmware-realtek - Binary firmware <span class="keyword">for</span> Realtek wired and wireless network adapters</span><br></pre></td></tr></table></figure>

<p>安装Realtek驱动：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install firmware-realtek</span><br></pre></td></tr></table></figure>

<p>如果你的树莓派现在不能上网，那么你可以去镜像站点中下载相关驱动。我推荐阿里云的镜像站点，速度比较快。<a href="http://mirrors.aliyun.com/raspbian/raspbian/pool/non-free/f/firmware-nonfree" target="_blank" rel="noopener">http://mirrors.aliyun.com/raspbian/raspbian/pool/non-free/f/firmware-nonfree</a></p>
<p>下载firmware-realtek_0.43_all.deb，用winscp上传到树莓派的/tmp目录中。输入命令安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i /tmp/firmware-realtek_0.43_all.deb</span><br></pre></td></tr></table></figure>
<h2 id="三、配置无线网络"><a href="#三、配置无线网络" class="headerlink" title="三、配置无线网络"></a>三、配置无线网络</h2><p>用编辑器nano打开interfaces文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/network/interfaces</span><br></pre></td></tr></table></figure>
<p>我的interfaces文件是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto lo</span><br><span class="line"></span><br><span class="line">iface lo inet loopback</span><br><span class="line">iface eth0 inet dhcp</span><br><span class="line"></span><br><span class="line">allow-hotplug wlan0</span><br><span class="line">iface wlan0 inet manual</span><br><span class="line">wpa-roam &#x2F;etc&#x2F;wpa_supplicant&#x2F;wpa_supplicant.conf</span><br><span class="line">iface default inet dhcp</span><br></pre></td></tr></table></figure>
<p>我们把无线网卡部分全部用#注释掉，然后添加自己的配置信息，最终结果如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">auto lo</span><br><span class="line"></span><br><span class="line">iface lo inet loopback</span><br><span class="line">iface eth0 inet dhcp</span><br><span class="line"></span><br><span class="line">auto wlan0</span><br><span class="line"></span><br><span class="line">allow-hotplug wlan0</span><br><span class="line">iface wlan0 inet manual</span><br><span class="line">iface wlan0 inet dhcp</span><br><span class="line">wpa-conf /etc/wpa.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf</span></span><br><span class="line">iface default inet dhcp</span><br></pre></td></tr></table></figure>
<p>使用nano编辑器，ctrl+o保存，ctrl+x退出。</p>
<blockquote>
<p>注意<code>#wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf</code>是注释掉的！！！<br>注意<code>#wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf</code>是注释掉的！！！<br>注意<code>#wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf</code>是注释掉的！！！<br>重要的事情说三次</p>
</blockquote>
<p>用编辑器nano创建 /etc/wpa.conf 文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/wpa.conf</span><br></pre></td></tr></table></figure>
<p>如果你的wifi没有密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network&#x3D;&#123;</span><br><span class="line">[Tab] ssid&#x3D;&quot;你的无线网络名称（ssid）&quot;</span><br><span class="line">[Tab] key_mgmt&#x3D;NONE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你的wifi使用WEP加密</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network&#x3D;&#123;</span><br><span class="line">[Tab] ssid&#x3D;&quot;你的无线网络名称（ssid）&quot;</span><br><span class="line">[Tab] key_mgmt&#x3D;NONE</span><br><span class="line">[Tab] wep_key0&#x3D;&quot;你的wifi密码&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你的wifi使用WPA/WPA2加密</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network&#x3D;&#123;</span><br><span class="line">[Tab] ssid&#x3D;&quot;你的无线网络名称（ssid）&quot;</span><br><span class="line">[Tab] key_mgmt&#x3D;WPA-PSK</span><br><span class="line">[Tab] psk&#x3D;&quot;你的wifi密码&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注1：所有符号都是半角符号（英文状态下的符号），“[Tab]”表示按一次Tab键</p>
<p>注2：如果你不清楚wifi的加密模式，可以在安卓手机上用root explorer打开 /data/misc/wifi/wpa/wpa_supplicant.conf，查看wifi的信息。</p>
<p>比如，我的wpa.conf文件是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network&#x3D;&#123;</span><br><span class="line">    ssid&#x3D;&quot;1234&quot;</span><br><span class="line">    key_mgmt&#x3D;WPA-PSK</span><br><span class="line">    psk&#x3D;&quot;MTIzNA1234&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后输入命令启用无线网卡：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ifup wlan0</span><br></pre></td></tr></table></figure>
<p>可以连无线网了。</p>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>python 画柱状图</title>
    <url>/2016/10/26/%E7%94%BB%E6%9F%B1%E7%8A%B6%E5%9B%BE/</url>
    <content><![CDATA[<p>数据统计是科研中很重要的一部分，所以我们老师老是让我搞各种数据可视化的工作…………</p>
<p>首先要安装<code>matplotlib</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="基本柱状图（使用hist函数）"><a href="#基本柱状图（使用hist函数）" class="headerlink" title="基本柱状图（使用hist函数）"></a>基本柱状图（使用<code>hist</code>函数）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Learn about API authentication here: https://plot.ly/python/getting-started</span></span><br><span class="line"><span class="comment"># Find your api_key here: https://plot.ly/settings/api</span></span><br><span class="line"></span><br><span class="line">gaussian_numbers = np.random.randn(<span class="number">1000</span>)</span><br><span class="line">plt.hist(gaussian_numbers)</span><br><span class="line">plt.title(<span class="string">"Gaussian Histogram"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Value"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Frequency"</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="http://p1.bpimg.com/567571/d36bc4b94b3b6be6.png"></p>
<h2 id="多个数据集的柱状图"><a href="#多个数据集的柱状图" class="headerlink" title="多个数据集的柱状图"></a>多个数据集的柱状图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pylab <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">x = <span class="number">200</span> + <span class="number">25</span>*plt.randn(<span class="number">1000</span>)</span><br><span class="line">y = <span class="number">150</span> + <span class="number">25</span>*plt.randn(<span class="number">1000</span>)</span><br><span class="line">n, bins, patches = plt.hist([x, y])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="http://p1.bpimg.com/567571/e147115fb9816057.png"></p>
<h2 id="概率密度函数"><a href="#概率密度函数" class="headerlink" title="概率密度函数"></a>概率密度函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.mlab <span class="keyword">as</span> mlab</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py  <span class="comment"># tools to communicate with Plotly's server</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># example data</span></span><br><span class="line">mu = <span class="number">100</span> <span class="comment"># mean of distribution</span></span><br><span class="line">sigma = <span class="number">15</span> <span class="comment"># standard deviation of distribution</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">num_bins = <span class="number">50</span></span><br><span class="line"><span class="comment"># the histogram of the data</span></span><br><span class="line">n, bins, patches = plt.hist(x, num_bins, normed=<span class="number">1</span>, facecolor=<span class="string">'green'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># add a 'best fit' line</span></span><br><span class="line">y = mlab.normpdf(bins, mu, sigma)</span><br><span class="line">plt.plot(bins, y, <span class="string">'r--'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Smarts'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Probability'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tweak spacing to prevent clipping of ylabel</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.15</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="http://i1.piimg.com/567571/7ad68ce363ee9671.png"></p>
<blockquote>
<p><a href="https://plot.ly/matplotlib/histograms/" target="_blank" rel="noopener">https://plot.ly/matplotlib/histograms/</a><br><a href="http://matplotlib.org/api/pyplot_api.html" target="_blank" rel="noopener">http://matplotlib.org/api/pyplot_api.html</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>美国F1身份申请德国签证攻略</title>
    <url>/2017/01/10/%E7%BE%8E%E5%9B%BDF1%E8%BA%AB%E4%BB%BD%E7%94%B3%E8%AF%B7%E5%BE%B7%E5%9B%BD%E7%AD%BE%E8%AF%81%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<p><strong>先介绍下背景，刚来美国3个月，英语不溜只会点菜那种，无驾照，无SSN，无工作，F1签证。</strong></p>
<p><strong>一般有美国签证申请德国签证是不会被拒签的，除非你的材料有大问题，所以认真准备都是可以过的</strong></p>
<p><strong>去欧洲玩是个很仓促的决定，所以我是提前一个月才开始申请的，请不要学我，一般要提前三个月。</strong></p>
<p><strong>如果可以，不要申请德国签证！！</strong></p>
<p><strong>如果可以，不要申请德国签证！！</strong></p>
<p><strong>如果可以，不要申请德国签证！！</strong></p>
<p><strong>建议，如果可以，去申请法国的签证，德国的实在是太坑爹了！！</strong></p>
<a id="more"></a>

<p>如果申请人将要前往一个申根国（仅一个），申请人必须在特定国家的相应大使馆或领事馆申请。如果申请人计划前往两个或更多申根国，强烈建议申请者在将要停留时间最久的国家（即“主要目的地”）的大使馆或领事馆申请签证。如果没有主要目的地，只是随机访问几个申根国家，那么申请人必须在其行程中首个抵达的国家的大使馆或领事馆申请签证。当确定在哪个大使馆或领事馆申请签证之后，申请人将要在对自己居住地拥有管辖权的国家的大使馆/领事馆申请签证。</p>
<p><del>我这次行程在德国呆的最久，所以预约的德国的。</del>其实是时间太急只能预约德国的申根签了，法国签证排到了明年，西班牙的据说效率低不想去，所以强行多安排了几天德国行程……</p>
<h2 id="预约"><a href="#预约" class="headerlink" title="预约"></a>预约</h2><p>首先上<a href="http://www.germany.info/Vertretung/usa/en/03__Consulates/New__York/01/__Data.html" target="_blank" rel="noopener">这个网站</a>预约（这是纽约领事馆，不同地方的领事馆不一样，可以自己看下）。</p>
<p>预约很简单，填下自己的基本信息选个时间就好。</p>
<p>然后就是要填写VIDEX表，专门有个网页是用来填这个表的，一次写不完可以第二次写。只是他不能在线保存，都是存为XML格式的放在本地。<a href="https://videx.diplo.de/videx/;jsessionid=Jt5nsfYBNYKcewQORgQhs0XL.undefined?0" target="_blank" rel="noopener">VIDEX网页链接</a></p>
<h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><ul>
<li>预约的 email 确认信；</li>
<li>签证表（VIDEX）和 declaration letter. 网上填写然后打印即可；</li>
<li>两张申根签证照片。规格必须是45*35mm；</li>
<li>护照。注意美国签证在旅行结束之后要有 3 个月有效期；</li>
<li>护照和美国签证的复印件，F-1 签证要准备 I-20 和复印件（一定要带）；</li>
<li>过去三个月银行账单。最好有 200 刀每天的钱，越多越好；</li>
<li>申根特别要求的医保证明。 我先是给她看了我们学校的保险，由于没有具体的赔偿额度没有过，还好我另外买了一个保险，上面明确写了有50K刀的美国境外保险，过了～；</li>
<li>Reference letter. 找学校开就好（看都没看）；</li>
<li>机票酒店预约信，以及复印件；</li>
<li>Utility bill: 水、电、手机、电视、网络等账单或者驾照等能证明你居住地的材料。</li>
</ul>
<h2 id="面签"><a href="#面签" class="headerlink" title="面签"></a>面签</h2><p>面签过程很纠结，着实感受了一把德国人的严谨：</p>
<p>先是找德国大使馆，本来想着应该很好找，联合国大楼对面，川普家旁边，谷歌地图上长这样：</p>
<p><img src="../../../../image/fc864469-fa5e-4ac8-81b3-034fcbb0be22.jpeg"></p>
<p>但是进去之后有个人问我是不是签证，我说是啊。然后他说这里不是签证的地方，你出门左拐在左拐理发店旁边有个门你进去，那个才是签证的地方。</p>
<p>我：……</p>
<p>然后找了半天找到了理发店旁边的门，进去，还是刚才那个人，笑着跟我说：“Hello again！”。我真是一万个白眼，你直接把我带过来会死啊……</p>
<p><img src="../../../../image/d38fb790-4e05-4f0e-8977-a08c890cda72.jpg"></p>
<p>预约的是12点但是由于下午学校有个career fair我就11点到了，心想着可以提前结束。然而提前到并不能提前签证，德国人表示还是要按预约的时间来，我就只能坐在那里等。</p>
<p>于是就等到了12点。先把我的所有材料拿了过去看了一遍，问我是不是在德国呆最长时间，我说是啊。</p>
<p>然后她就开始拿张纸，拿支笔，认认真真的对着我的材料，把我在每个国家的每一天都列出来，最后得出的结论就是我的确是在德国呆最长时间。</p>
<p>我本以为可以过了，没想到她直接说了句：“好了，现在来背下你的行程吧…………”。十五天的行程！！！！还好签证前小伙伴提醒了我可能会这么搞我，我提前背了点，勉强过了。</p>
<p><img src="../../../../image/d05e394e-6496-48c2-b0d8-dc409153054c.jpg"></p>
<p>背完之后就开始问我想怎么拿我的签证，邮寄还是自己来拿，我是对美国邮政深恶痛绝，决定自己来拿。</p>
<h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><blockquote>
<p>我是7号去的大使馆，<br>14号拿到的护照，<br>17号下午的飞机飞伦敦，<br>时间特别紧张，<br>估计我是第一个这么干的人，<br>请不要学我……</p>
</blockquote>
<hr>
<p>然后德国人给了我一个月的签证，无限次往返，每次逗留时间不超过十五天。。</p>
<p>但是！！一起签证的小伙伴，法签，多的拿了一年的无限次往返，少的拿了半年。同样的材料，同样的时间！！ </p>
<p>所以</p>
<p><strong>如果可以，不要申请德国签证！！</strong></p>
<p><strong>如果可以，不要申请德国签证！！</strong></p>
<p><strong>如果可以，不要申请德国签证！！</strong></p>
]]></content>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员能力矩阵</title>
    <url>/2018/04/22/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%83%BD%E5%8A%9B%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<p>转自<a href="http://sijinjoseph.com/programmer-competency-matrix/" target="_blank" rel="noopener">Programmer Competency Matrix</a></p>
<p>注意:每个层次的知识都是渐增的，位于层次n，也蕴涵了你需了解所有低于层次n的知识。</p>
<h2 id="计算机科学-Computer-Science"><a href="#计算机科学-Computer-Science" class="headerlink" title="计算机科学 Computer Science"></a>计算机科学 Computer Science</h2><p>Working with someone who has a good topcoder ranking would be an unbelievable piece of luck! </p>
<p>有一个黑客排行榜排名靠前的同事将会是一件无比幸运的事情。</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">2^n (Levenl 0)</th>
<th align="center">n^2 (Level 1)</th>
<th align="center">n(Level 2)</th>
<th align="center">log(n) (Level 3)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数据结构</td>
<td align="center">不知道数组和链表的差异</td>
<td align="center">能够解释和使用数组，链表，字典等，并且能够用于实际的编程任务。</td>
<td align="center">了解基本数据结构时间和空间的折中，比如数组vs 链表，能够解释如何实现哈希表和处理冲突，了解优先队列及其实现。</td>
<td align="center">高等的数据结构的知识，比如B-树、二项堆、斐波那契堆、AVL树、红黑树、伸展树、跳跃表以及前缀树等。</td>
</tr>
<tr>
<td align="center">算法</td>
<td align="center">不能够找出一个数组各数的平均值(这令人难以置信，但是我的确在应聘者中遇到过)</td>
<td align="center">基本的排序，搜索和数据的遍历和检索算法。</td>
<td align="center">树，图，简单的贪婪算法和分而治之算法，能够适度了解矩阵该层的含义。</td>
<td align="center">能够辨识和编写动态规划方案，良好的图算法知识，良好的数值估算的知识，能够辨别NP问题等。</td>
</tr>
<tr>
<td align="center">编程体系</td>
<td align="center">不知道何为编译器、链接器和解释器。</td>
<td align="center">对编译器、链接器、解释器有基本的了解。知道什么是汇编代码以及在硬件层如何工作。有一些虚拟内存和分页知识。</td>
<td align="center">了解内核模式vs用户模式,多线程，同步原语以及它们如何实现，能够阅读汇编代码。了解网络如何工作，了解网络协议和socket级别编程。</td>
<td align="center">了解整个程序堆栈、硬件(CPU+内存+中断+微码)、二进制代码、汇编、静态和动态链接、编码、解释、JIT（just-in-time）编译、内存碎片回收、堆、栈、存储器编址…</td>
</tr>
</tbody></table>
<a id="more"></a>

<h2 id="软件工程-Software-Engineering"><a href="#软件工程-Software-Engineering" class="headerlink" title="软件工程 Software Engineering"></a>软件工程 Software Engineering</h2><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">2^n (Levenl 0)</th>
<th align="center">n^2 (Level 1)</th>
<th align="center">n(Level 2)</th>
<th align="center">log(n) (Level 3)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">源码版本控制</td>
<td align="center">通过日期备份文件夹</td>
<td align="center">VSS和初级的CVS/SVN用户</td>
<td align="center">熟练地使用CVS和SVN特性。知道如何分支和归并，使用程序库补丁安装特性等</td>
<td align="center">有分布式VCS系统的知识。尝试过Bzr/Mercurial/Darcs/Git</td>
</tr>
<tr>
<td align="center">自动化编译</td>
<td align="center">只知道在IDE下编译</td>
<td align="center">知道如何编译在命令行下编译系统</td>
<td align="center">能够安装一个脚本构建基本的系统</td>
<td align="center">能够安装一个脚本来构建系统并且归档，安装程序，生成发布记录和给源码控制中的代码分配标签。</td>
</tr>
<tr>
<td align="center">自动化测试</td>
<td align="center">认为所有的测试都是测试员的工作。</td>
<td align="center">能够编写自动化的单元测试，能够为正在编写的代码提出良好的测试用例。</td>
<td align="center">按照TDD （Test Driven Development）方式编写代码。</td>
<td align="center">了解并且能够有效自动化安装，载入/性能和UI测试</td>
</tr>
</tbody></table>
<h2 id="程序设计-Programming"><a href="#程序设计-Programming" class="headerlink" title="程序设计 Programming"></a>程序设计 Programming</h2><p>This is an often under rated but very critical criteria for judging a programmer. With the increase in outsourcing of programming tasks to places where English is not the native tongue this issue has become more prominent. I know of several projects that failed because the programmers could not understand what the intent of the communication was.</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">2^n (Levenl 0)</th>
<th align="center">n^2 (Level 1)</th>
<th align="center">n(Level 2)</th>
<th align="center">log(n) (Level 3)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">问题分解</td>
<td align="center">只有直线式的代码，通过复制粘贴来复用</td>
<td align="center">能够把问题分散到多个函数中</td>
<td align="center">能够想出可复用的函数/对象来解决大题的问题</td>
<td align="center">使用适宜的数据结构和算法，写出通用的/面向对象的代码来封装问题的易改变的层面。</td>
</tr>
<tr>
<td align="center">系统分解</td>
<td align="center">想不出比单一的文件/类更好的层面</td>
<td align="center">如果不在同一平台或没采用相同的技术，能够把问题空间和设计方案分解。</td>
<td align="center">能够设计跨技术/平台的系统。</td>
<td align="center">能够在多个产品线和与外部体系一体化中虚拟化和设计复制的系统。同时也能够设计支持系统监视、报告、故障恢复等。</td>
</tr>
<tr>
<td align="center">交流</td>
<td align="center">不能向同伴表达想法/主意。匮乏拼写和语法的能力。</td>
<td align="center">同伴能了解你在说什么。有良好的拼写和语法能力。</td>
<td align="center">能够和同伴进行高效的交流</td>
<td align="center">能够使用清晰的方式了解和交流想法/设计/主意/细则，能适应每种环境的交流</td>
</tr>
<tr>
<td align="center">同一文件中代码组织</td>
<td align="center">同一文件中组织没有依据</td>
<td align="center">按照逻辑性或者易接近的方法。</td>
<td align="center">代码分块和对于其他源文件来说是易于是释,引用其他源文件时有良好的注释。</td>
<td align="center">文档头部有许可声明，总结，良好的注释，一致的空格缩进。文档外观美观。</td>
</tr>
</tbody></table>
<p>The difference between this and the previous item is in the scale of organization, source tree organization relates to the entire set of artifacts that define the system.</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">2^n (Levenl 0)</th>
<th align="center">n^2 (Level 1)</th>
<th align="center">n(Level 2)</th>
<th align="center">log(n) (Level 3)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">跨文件代码组织</td>
<td align="center">没够想过给代码跨文件组织</td>
<td align="center">相关文件按文件夹分组</td>
<td align="center">每个物理文件都有独立的目的，比如一个类的定义，一个特性的实现等。</td>
<td align="center">代码在物理层组织紧密，在文件名上与设计和外观相匹配，可以通过文件分布方式洞察设计理念。</td>
</tr>
<tr>
<td align="center">源码树组织</td>
<td align="center">一切都放在一个文件夹内</td>
<td align="center">初步地将代码分散进对应逻辑的文件夹。</td>
<td align="center">没有循环依赖，二进制文件，库，文档，构建，第三方的代码都组织进合适的文件夹内。</td>
<td align="center">源码树的物理布局与逻辑层次、组织方式相匹配。可以通过目录名称和组织方式洞察设计理念。</td>
</tr>
<tr>
<td align="center">代码可读性</td>
<td align="center">单音节的名称 （在国内应该是那些类似用汉语拼音命名的习惯）</td>
<td align="center">对文件、变量、类、方法等，有良好的命名。</td>
<td align="center">没有长函数、注释解释不常规的代码，bug修复,代码假设。</td>
<td align="center">代码假设验证使用断言，自然的代码流，没有深层嵌套的条件和方法</td>
</tr>
<tr>
<td align="center">防御性编码</td>
<td align="center">不知道这个概念</td>
<td align="center">检查代码中所有的参数，对关键的假设进行断言</td>
<td align="center">确保检查了返回值和使代码失败的异常。</td>
<td align="center">有自己的库来帮助防御性编程、编写单元测试模拟故障</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">2^n (Levenl 0)</th>
<th align="center">n^2 (Level 1)</th>
<th align="center">n(Level 2)</th>
<th align="center">log(n) (Level 3)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">错误处理</td>
<td align="center">只给乐观的情形编码</td>
<td align="center">基本的代码错误处理，抛出异常/生成错误</td>
<td align="center">确保错误/异常留在程序中有良好的状态，资源，连接，内存都有被合适的清理。</td>
<td align="center">在编码之前察觉可能出现的异常，在代码的所有层次中维持一致性的异常处理策略，提出整个系统的错误处理准则。</td>
</tr>
<tr>
<td align="center">IDE</td>
<td align="center">IDE大部分用来进行文本编辑</td>
<td align="center">了解其周围的接口，能够高效地通过菜单来使用IDE</td>
<td align="center">了解最常操作的键盘快捷键</td>
<td align="center">编写自定义宏</td>
</tr>
<tr>
<td align="center">API</td>
<td align="center">需要频繁地查阅文档</td>
<td align="center">把最频繁使用的API记在脑子里</td>
<td align="center">广阔且深入的API知识。</td>
<td align="center">为了使实际任务中常用API使用更加便捷，编写过API的上层库，填补API之间的缺口。</td>
</tr>
<tr>
<td align="center">框架</td>
<td align="center">没有使用过主平台外的任何框架</td>
<td align="center">听过但没用过平台下流行的可用框架</td>
<td align="center">在专业的职位中使用过一个以上的框架，通晓各框架的特色。</td>
<td align="center">某框架的作者</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">2^n (Levenl 0)</th>
<th align="center">n^2 (Level 1)</th>
<th align="center">n(Level 2)</th>
<th align="center">log(n) (Level 3)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">需求分析</td>
<td align="center">接受给定的需求和代码规格</td>
<td align="center">能对规格的遗漏提出疑问</td>
<td align="center">了解全面情况，提出需要被规格化的整体范围。</td>
<td align="center">能够提出更好的可选方案，根据经验的浮现给出需求</td>
</tr>
<tr>
<td align="center">脚本</td>
<td align="center">不具备脚本工具的知识</td>
<td align="center">批处理文件/shell脚本</td>
<td align="center">Perl/Python/Ruby/VBScript/Powershell</td>
<td align="center">写过并且发表过可重用的代码</td>
</tr>
<tr>
<td align="center">数据库</td>
<td align="center">认为Excel就是数据库</td>
<td align="center">知道基本的数据库概念，规范化、ACID（原子性Atomicity、一致性Consistency、隔离性Isolation、持久性Durability）、事务化，能够写简单的select语句</td>
<td align="center">能够牢记在运行时必要查询中设计良好的规范化数据库模式， 精通用户视图，存储过程，触发器和用户定义类型。知道聚集与非聚集索引之间的差异。精通使用ORM（Object Relational Mapping对象关系映射）工具</td>
<td align="center">能做基本的数据库管理，性能优化，索引优化，编写高级的select查询，能够使用相关sql来替换游标，理解数据内部的存储，了解如何镜像、复制数据库。知道两段数据提交如何工作</td>
</tr>
</tbody></table>
<h2 id="经验-Experience"><a href="#经验-Experience" class="headerlink" title="经验 Experience"></a>经验 Experience</h2><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">2^n (Levenl 0)</th>
<th align="center">n^2 (Level 1)</th>
<th align="center">n(Level 2)</th>
<th align="center">log(n) (Level 3)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">专业语言经验</td>
<td align="center">命令式语言和面向对象语言</td>
<td align="center">命令式语言,面向对象语言和说明型语言(SQL),如果了解静态类型vs动态类型，弱类型vs强类型则有加分</td>
<td align="center">函数式语言,如果了解延缓求值，局部套用函数，延续则有加分</td>
<td align="center">并发语言(Erlang, Oz) 逻辑语言(Prolog)</td>
</tr>
<tr>
<td align="center">专业平台经验（年）</td>
<td align="center">1</td>
<td align="center">2-3</td>
<td align="center">4-5</td>
<td align="center">6+</td>
</tr>
<tr>
<td align="center">专业经验年龄（年）</td>
<td align="center">1</td>
<td align="center">2-5</td>
<td align="center">6-9</td>
<td align="center">10+</td>
</tr>
<tr>
<td align="center">领域知识</td>
<td align="center">没有该领域的知识</td>
<td align="center">在该领域中曾经至少为一个产品工作过</td>
<td align="center">在同一领域中为多个产品工作过</td>
<td align="center">领域专家。在该领域设计和实现数种产品/方案。精通该领域使用的标准条款和协议</td>
</tr>
</tbody></table>
<h2 id="学识-Knowledge"><a href="#学识-Knowledge" class="headerlink" title="学识 Knowledge"></a>学识 Knowledge</h2><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">2^n (Levenl 0)</th>
<th align="center">n^2 (Level 1)</th>
<th align="center">n(Level 2)</th>
<th align="center">log(n) (Level 3)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">工具知识</td>
<td align="center">仅限于主要的IDE(VS.Net, Eclipse等)</td>
<td align="center">知道一些流行和标准工具的备选方案</td>
<td align="center">对编辑器、调试器、IDE、开源的备选方案有很好的了解。比如某人了解大多数Scott Hanselman的威力工具列表中的工具，使用过ORM工具。</td>
<td align="center">实际地编写过工具和脚本，如果这些被发布则有加分</td>
</tr>
<tr>
<td align="center">语言接触</td>
<td align="center">命令式语言和面向对象语言</td>
<td align="center">命令式语言、面向对象语言和说明型语言(SQL),如果了解静态类型vs动态类型、弱类型vs强类型则有加分</td>
<td align="center">函数式语言,如果了解延缓求值、局部套用函数、continuations （源于scheme中的一种高级控制结构）则有加分</td>
<td align="center">并发语言(Erlang, Oz) 逻辑语言(Prolog)</td>
</tr>
<tr>
<td align="center">代码库知识</td>
<td align="center">从来没有查询过代码库</td>
<td align="center">基本的代码层知识，了解如果构建系统</td>
<td align="center">良好的代码库工作知识，实现过几次bug修复或者完成了一些细小的特性</td>
<td align="center">实现了代码库中多个大型特性，能够轻松地将多数特性的需求变更具体化，从容地处理bug修复。</td>
</tr>
<tr>
<td align="center">下一代技术知识</td>
<td align="center">从来没听说过即将到来的技术</td>
<td align="center">听说过某领域即将到来的技术</td>
<td align="center">下载过alpha preview/CTP/beta版本，并且读过一些文章和手册</td>
<td align="center">试用过预览版而且实际地构建过某物，如果共享给其他人的话则有加分</td>
</tr>
<tr>
<td align="center">平台内部</td>
<td align="center">对平台内部毫无所知</td>
<td align="center">有平台基本的内部工作的知识</td>
<td align="center">深度的平台内部知识，能够设想平台如何将程序转换成可执行代码。</td>
<td align="center">编写过增强平台或者为其平台内部提供信息的工具。比如，反汇编工具，反编译工具，调试工具等。</td>
</tr>
<tr>
<td align="center">书籍</td>
<td align="center">菜鸟系列，21天系列，24小时系列，蠢货系列…</td>
<td align="center">《代码大全》(<strong>《Code Complete》</strong>)，《别让我思考》(《Don’t Make me Think》), 《精通正则表达式》(《Mastering Regular Expressions》)</td>
<td align="center">《设计模式》（《Design Patterns》），《人件》（《Peopleware》），《代码珠玑》（《Programming Pearls》），《算法设计手册》（《 Algorithm Design Manual》），《程序员修炼之道》（《Pragmatic Programmer》），《人月神话》（《Mythical Man month》）</td>
<td align="center">《计算机程序设计与解释》（《Structure and Interpretation of Computer Programs》），《事务处理:概念与技术》(《Concepts Techniques》)，《计算机程序设计模型》（《Models of Computer Programming》），《计算机程序设计艺术》（《 Art of Computer Programming》），《数据库系统导论》 C.J Date版（《Database systems》by C. J Date），《Thinking Forth》 ，《Little Schemer》</td>
</tr>
<tr>
<td align="center">博客</td>
<td align="center">听过但是从来抽不出空去接触</td>
<td align="center">阅读一些科技/编程/软件工程的博客，并且经常的收听一些播客</td>
<td align="center">维护一些博客的链接，收集博主分享的有用的文章和工具</td>
<td align="center">维护一个在编程方面，分享有个人见解和思考的博客</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>杂七杂八</tag>
      </tags>
  </entry>
  <entry>
    <title>美国航空航天博物馆分管--史蒂文·乌德沃尔哈齐中心</title>
    <url>/2018/04/07/%E7%BE%8E%E5%9B%BD%E8%88%AA%E7%A9%BA%E8%88%AA%E5%A4%A9%E5%8D%9A%E7%89%A9%E9%A6%86%E5%88%86%E7%AE%A1-%E5%8F%B2%E8%92%82%E6%96%87%C2%B7%E4%B9%8C%E5%BE%B7%E6%B2%83%E5%B0%94%E5%93%88%E9%BD%90%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<p>大部分去华盛顿玩的人都知道美国航空航天博物馆就在市中心的独立大道上，白宫南草坪旁边，去华盛顿的人都会去那里玩（好像女生除外）。 </p>
<p>但是！！！！在华盛顿西北的杜勒斯国际机场其实还有一个分馆，绝对不容错过！</p>
<a id="more"></a>

<p>新馆建于2003年，考虑到市中心的博物馆面积太小，很多展品没法放进去，而美国航空工业又是吊打全世界，这么小一个博物馆实在是不够炫耀，于是新建了这座博物馆。</p>
<p>博物馆名叫 史蒂文·乌德沃尔哈齐中心（Steven F. Udvar-Hazy Center） 位于 华盛顿杜勒斯国际机场 地址是:<code>14390 Air and Space Museum Pkwy, Chantilly, VA 20151</code>。 博物馆免费，但是每辆车收<strong>15块钱停车费</strong>。由于离市区太远你必须开车去，相当于每车人15块钱吧。</p>
<h3 id="SR-71"><a href="#SR-71" class="headerlink" title="SR-71"></a>SR-71</h3><p>一进去首先看到的就是著名的黑鸟SR-71，在《变形金刚2》中出现，天火的原型！！</p>
<p><img src="../../../../image/fc58ab75-dce6-4a70-9071-7dceab020bde.jpg"></p>
<p><img src="../../../../image/bf724caa-341c-4e9d-9624-bf0a0f7a8968.jpg"></p>
<p><img src="../../../../image/db8ab4ea-32ac-402d-8cac-bab6cad3b7f1.jpg"></p>
<p><img src="../../../../image/a6f5fa87-9532-4e7a-815b-98c832d56381.jpg"></p>
<center>尾部特写</center>

<p><img src="../../../../image/468aa018-c65c-49f7-a152-f24acc8ab976.jpg"></p>
<h3 id="B-29"><a href="#B-29" class="headerlink" title="B-29"></a>B-29</h3><p>B-29超级堡垒轰炸机，亦称B-29超级空中堡垒，不仅是二次大战时各国空军中最大型的飞机，同时亦是当时集各种新科技的最先进的武器之一。总生产量为3,900架左右。但是这一架不一样！！</p>
<p>这一架的名字叫做<code>Enola Gay</code>，没错就是当年在<strong>广岛上空扔下原子弹那架</strong></p>
<p><img src="../../../../image/0ad76273-45b9-4b01-a37f-279d43cecd1e.jpg"></p>
<p>艾诺拉·盖（Enola Gay）是一架隶属于美国陆军航空军第509混合飞行大队的B-29超级堡垒轰炸机，“艾诺拉·盖”这命名源自该机机长保罗·蒂贝茨（Paul Tibbets）母亲的名字——Enola Gay Tibbets。此飞机执行了于日本时间1945年8月6日早上8点15分，在广岛上空掷下“小男孩”原子弹的任务。</p>
<p><img src="../../../../image/4f5174a2-5a73-4ad4-9233-e1825ff49628.JPG"></p>
<p><img src="../../../../image/700b7177-1419-4157-acb8-b7998bfac18e.jpg" alt="应该是老飞行员在和游客介绍这架飞机"></p>
<center>应该是老飞行员在和游客介绍这架飞机</center>

<p><img src="../../../../image/85e80919-a859-420e-8815-2370f9fc8f3e.jpg"></p>
<h3 id="F4U-海盗"><a href="#F4U-海盗" class="headerlink" title="F4U 海盗"></a>F4U 海盗</h3><p>据美国海军统计，第二次世界大战中F4U的击落比率为11:1，即每击落11架敌机才有1架被击落，拥有着傲人战绩；所以也让部分日本飞行员认为海盗式是二战中美军最强悍的战机。《皇牌空战》里的轰炸机啊，满满的回忆~</p>
<p><img src="../../../../image/5b634cd3-02c0-4b93-97bd-8f49277ef19c.JPG"></p>
<p><img src="../../../../image/ea26a15d-b739-4b40-80b5-ea0ad5292310.jpg"></p>
<h3 id="米格15-和-F86佩刀"><a href="#米格15-和-F86佩刀" class="headerlink" title="米格15 和 F86佩刀"></a>米格15 和 F86佩刀</h3><p>米格15， 抗美援朝的工程，中国人口中的歼五，五爷。</p>
<p><img src="../../../../image/7b520fec-2135-4a03-99fd-9bf90e0b838a.jpg"></p>
<p><img src="../../../../image/6d7cb690-7da9-4bfb-b234-c49babc992db.jpg"></p>
<p>旁边就是<code>米格15</code> 的死对头<code>F-86佩刀</code>，从朝鲜打到金门。</p>
<p><img src="../../../../image/479680af-2d09-4056-8ef7-5dcc3c9c1392.jpg"></p>
<p><img src="../../../../image/bd667c6d-1989-47e1-adfb-4dd757c390f4.jpg"></p>
<h3 id="米格21-和-F4-鬼怪"><a href="#米格21-和-F4-鬼怪" class="headerlink" title="米格21 和 F4 鬼怪"></a>米格21 和 F4 鬼怪</h3><p>也是两个死对头</p>
<p><img src="../../../../image/a2cabc25-a68a-4314-837a-4ed675682db2.jpg"></p>
<p><img src="../../../../image/07787e50-0dd3-4b30-abb4-507a3b921a38.jpg"></p>
<h3 id="F14"><a href="#F14" class="headerlink" title="F14"></a>F14</h3><p>是根据美国海军20世纪70年代至80年代舰队防空和护航的要求研制的双座双发超音速多用途舰载战斗机, F4的代替品。 看过《壮志凌云》的同学一定不会陌生！！不过这款飞机已经退役了。</p>
<p><img src="../../../../image/76fc7c34-082b-4998-875f-43cfff1fffb4.jpg"></p>
<p><img src="../../../../image/916c2160-b9d8-4ee1-96ec-3a1870011dc8.jpg"></p>
<h3 id="F35-闪电"><a href="#F35-闪电" class="headerlink" title="F35 闪电"></a>F35 闪电</h3><p>美国的第四代飞机，由洛克希德马丁公司研发，F22的辅助机种，美国空军海军未来的机种。</p>
<p><img src="../../../../image/5e932f3f-c94c-400e-844f-e2eec960b2ea.jpg"></p>
<p><img src="../../../../image/0ac68ad6-df47-4d9c-9fa1-db1c7b66df34.jpg"></p>
<p><img src="../../../../image/8d9ffdcf-3361-4673-ab25-b23e9f7e4e02.jpg"></p>
<h3 id="发现号航天飞机"><a href="#发现号航天飞机" class="headerlink" title="发现号航天飞机"></a>发现号航天飞机</h3><p>最厉害的是博物馆里还塞了架航天飞机！！</p>
<p>美国是世界上第一个拥有与实际操作航天飞机、并是唯一成功以航天飞机进行过载人任务的国家，也是机队阵容最庞大的国家。其中，挑战者号在发射过程中爆炸，哥伦比亚号在返回地球时解体。</p>
<p>这架发现号航天飞机，于2011年3月9日退役，完成了39次飞行任务。</p>
<p><img src="../../../../image/f1d4a20c-2d5d-44b8-b46c-e581ba4b1303.jpg"></p>
<p><img src="../../../../image/2752ad14-29ff-4a2d-b9ab-7dabb4035962.jpg"></p>
<hr>
<p>如果你是航空迷，来华盛顿一定不能错过这个博物馆。博物馆仍在不停地安置展品，截止2008年11月，已经有163架飞机和154艘飞船陈列。最终计划安放200余架飞机~</p>
]]></content>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>通过USB转串口模块连接树莓派</title>
    <url>/2015/10/03/%E9%80%9A%E8%BF%87USB%E8%BD%AC%E4%B8%B2%E5%8F%A3%E6%A8%A1%E5%9D%97%E8%BF%9E%E6%8E%A5%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
    <content><![CDATA[<blockquote>
<p>我的是树莓派B型，Mac OS系统。由于放假回家没有显示器，没有键盘，没法用树莓派，所以研究了下这个方法。当然，还可以通过ssh链接，但是要建立在你的树莓派和你的电脑链接在同一个局域网的情况下。</p>
</blockquote>
<h2 id="串口模块"><a href="#串口模块" class="headerlink" title="串口模块"></a>串口模块</h2><p>首先，你要有个USB转ttl模块，淘宝上有卖，几块钱一个，很便宜，我用的是<code>PL2303</code>  <img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-3/33261930.jpg" alt="PL2303"></p>
<a id="more"></a>

<h2 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h2><p>然后，就要去下载相应的驱动来安装。<code>PL2303</code><a href="http://www.prolific.com.tw/US/ShowProduct.aspx?p_id=229&pcid=41" target="_blank" rel="noopener">驱动下载</a></p>
<p>通过命令 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls /dev/tty.usb*</span><br></pre></td></tr></table></figure>

<p>来检查驱动是否安装成功了</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-3/47399324.jpg"></p>
<p>记得把串口插到USB上，不然会显示</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls: /dev/tty.usb*: No such file or directory</span><br></pre></td></tr></table></figure>


<p>然后把<code>PL2303</code>连到树莓派上面：GND-&gt;GND;</p>
<blockquote>
<p><strong>TSD-&gt;RXD;RXD-&gt;TSD</strong><br><strong>TSD-&gt;RXD;RXD-&gt;TSD</strong><br><strong>TSD-&gt;RXD;RXD-&gt;TSD</strong><br>别连反了！</p>
</blockquote>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-3/33456921.jpg"></p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-3/54787738.jpg"></p>
<h2 id="通过screen连接。"><a href="#通过screen连接。" class="headerlink" title="通过screen连接。"></a>通过screen连接。</h2><p>打开终端，输入 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">screen -v</span><br></pre></td></tr></table></figure>

<p>如果显示没有该命令，就</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install screen</span><br></pre></td></tr></table></figure>

<p>然后通过命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">screen /dev/tty.usbserial 115200</span><br></pre></td></tr></table></figure>
<p>就会看到一个空界面，按Enter键，就会出现Raspberry Pi的登录提示了。树莓派的默认用户名是<code>pi</code>，密码是<code>raspberry</code> 。(一般要等一下，不会立即出来，出不来就多按几次Enter～)</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-3/6454775.jpg"></p>
<hr>
<p>如果直接拔掉串口模块，需要重新连接，需要输入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps -x|grep tty</span><br></pre></td></tr></table></figure>

<p>得到进程号，然后通过<code>kill</code>命令关掉那个进程，才可以重新连接。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-3/79325063.jpg"> </p>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>读到牛人博客的一点感想</title>
    <url>/2015/07/30/%E8%AF%BB%E5%88%B0%E7%89%9B%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E7%82%B9%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<h1 id="今天看到了一个人的博客，感触真TM大！！！"><a href="#今天看到了一个人的博客，感触真TM大！！！" class="headerlink" title="今天看到了一个人的博客，感触真TM大！！！"></a>今天看到了一个人的博客，感触真TM大！！！</h1><p><a href="http://blog.csdn.net/hitwhylz?viewmode=contents" target="_blank" rel="noopener">博客地址</a></p>
<a id="more"></a>

<p>首先我是谷歌一个IOS问题偶然间发现他的博客的，文章写的很好，完美的解决了我的问题。但是，关网页的时候瞟到了他的资料：<strong>他居然是94年的！！！比我小了将近一年！！！</strong>  </p>
<p>然后又看到了这个：</p>
<p><img src="../../../../image/6cb4fc84-fd0e-4561-91b0-d7844ac50c23.png"><br><em>我简直不能淡定了！！！一个还在读大学的人居然可以发200多篇原创博客！！而且访问量居然有二百多万次！！！还是在CSDN上！！！</em></p>
<blockquote>
<p>  <strong>我之前从来没有想过人与人之间差距会那么大。</strong>  </p>
</blockquote>
<p>  当我高考完拿到软件学院的录取通知书的时候，我就暗想自己四年之后也可以成为顶级电脑高手，随随便便在别人电脑里面翻照片。<br>  然而仔细想想自己大一大二完全是在混日子，基本上什么都没学，而大一大二的课又那么的重要，数学、算法、数据结构、编译原理，数据库等等我什么都没学好，看看成绩就知道了，跟没学似的……以至于我现在要花时间去恶补这些科目。可能有一部分环境原因，但其实大部分都是怪我自己，怪自己对这个方向缺乏一个整体的认识，没有一个良好的职业规划，以至于自己两年来毫无目标，也不知道要干什么。<br>   到了大三，一次偶然的机会被师兄拉过去做外包。我被分到跟舍友一起做IOS端的一个APP，而我那个时候完全不懂IOS，啥也没做过。师兄让我跟着舍友一起做。但是不久后拿个舍友表示自己没时间不做了，我就挑起了做APP的大梁。由于不会就只好从头开始学。当时是跟着网易公开课上斯坦福大学的Paul Hegarty学的，IOS7开发，老头讲的很好。但是我只挑着其中一部分课程看了下，然后自己百度了一部分东西就开始写那个APP了。每天晚上都写到1、2点钟。然后在学期末终于写出了个巨恶心的APP，放到了91市场上，拿了2000块钱。然后一次偶然的机会，学院组织的一次app比赛上面用这个东西去参赛还获得了三等奖（吐槽一句，两个学期了，比赛奖金到现在都没发……什么破学院）。</p>
<!--![](http://7xkfbb.com1.z0.glb.clouddn.com/15-7-30/54860340.jpg)-->


<p>   当时我已经相当满足，认为自己几乎是世界上最勤奋的人了，每天花如此多时间如此多精力来做这件事，还拿着笔钱请爸妈吃了顿饭，屁股翘到了天上。其实现在想想，我之所以有这种想法完全是大一大二不良的学习习惯给我造成的错觉！！一个连App Store都没放上去到应用有什么了不起的啊，当时还当宝贝一样满世界去炫耀……当时脑子真是进水了。<br> 到了大三下学期。由于那次学院比赛是一个创业公司赞助的，我就被拉到了这个创业公司当实习生。创业公司嘛，自然没什么老员工，老板是北大光华管理毕业的，对软件开发一窍不通。所谓实习就是他“大概想个东西”，然后我们把他实现。没有需求文档，没有架构设计。甚至到了最后快完成的时候还在往里面加界面。当然，也是来了这个公司之后我才发现自己对于IOS开发其实一窍不通，要学的东西还有很多，然后自己边写APP边学了一些东西。感觉那段时间学的东西比大一大二加起来的还要多好多倍。也是那段时间才知道自己在编程方面欠的债有多少。<br> 那段时间腾讯、华为，阿里巴巴等大企业开始招实习生，我却自以为找到了实习连面试都没报名。其实如果我那怕报名参加了一家企业的面试，我都会知道自己到底有多差，都会被狠狠的删几个耳光，然后加倍努力的学习。但是我没有。虽然学到了很多，但是大三下学期依然是在轻松愉快中度过的，后悔已经来不及。<br> 现在是大三到大四的暑假，而这个暑假已经过去了一半，我感觉自己依然过的浑浑噩噩，一拿起书就犯困，一写代码就想去刷微博，虽然有在学东西，但是毫无效率可言。但是我感觉我有一天一天的在改变，每天都尝试更加专注一点，每天睡觉前都反思下自己。<br> 虽然，大学毕业前想要达到当初的期望几乎是不可能的了，</p>
<blockquote>
<p><strong>但是我会更加努力去接近那个目标！！</strong></p>
</blockquote>
]]></content>
      <tags>
        <tag>杂七杂八</tag>
      </tags>
  </entry>
  <entry>
    <title>通过ssh连接树莓派</title>
    <url>/2015/10/03/%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
    <content><![CDATA[<blockquote>
<p>我用的是树莓派B型，Mac OS系统，Raspbian 系统</p>
</blockquote>
<p>首先确保树莓派和你的电脑在同一局域网下，并且树莓派已经连上局域网。不知道树莓派如何连接局域网的可以查看<a href="http://caoyudong.com/2015/10/03/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%AE%BE%E7%BD%AE%E6%97%A0%E7%BA%BF%E4%B8%8A%E7%BD%91/">树莓派设置无线上网</a></p>
<p>然后，打开终端，通过命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh pi@你的树莓派的ip地址</span><br></pre></td></tr></table></figure>

<p>就可以连上了，Raspbian系统自带了ssh，有些系统没有要先安装一个。</p>
<a id="more"></a>

<h2 id="如何获取到树莓派IP地址"><a href="#如何获取到树莓派IP地址" class="headerlink" title="如何获取到树莓派IP地址"></a>如何获取到树莓派IP地址</h2><p>正常情况下，我们是不可能知道树莓派的ip地址的。所以只能靠猜，当然也不是漫无目标的猜。</p>
<p>在终端输入<code>arp －a</code>可以得到一个列表，表示当前局域网下的用户的IP地址，当然，不包括树莓派的。树莓派的地址应该是最后一个地址 ＋ 1。比如当前最后一个是 192.168.1.106，那么树莓派的就是192.168.1.107</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-3/68809336.jpg" alt="arp -a"></p>
<p>尝试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh pi@192.168.1.107</span><br></pre></td></tr></table></figure>
<p><em>也许</em>就可以连上</p>
<p>如果不行就试试108，109，反正总会连上的……这方法实在土，而且菜，可以尝试更好的方法：</p>
<p>安装一个<a href="https://nmap.org/" target="_blank" rel="noopener">nmap</a>，然后通过命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.1.0/24</span><br></pre></td></tr></table></figure>

<p>就可以列出局域网下所有的用户了，因为nmap会吧局域网下所有IP都扫一遍（好像是）。</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-3/94847515.jpg" alt="nmap"></p>
<p>连接成功后就可以操作树莓派了（默认密码 raspberry）<br><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-10-3/35973891.jpg"></p>
<hr>
<h2 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h2><p>直接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh pi@raspberrypi.home</span><br></pre></td></tr></table></figure>

<p>raspberrypi.home 就是树莓派的地址，今早发现的～</p>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>通过公钥登录阿里云</title>
    <url>/2016/09/17/%E9%80%9A%E8%BF%87%E5%85%AC%E9%92%A5%E7%99%BB%E5%BD%95%E9%98%BF%E9%87%8C%E4%BA%91/</url>
    <content><![CDATA[<blockquote>
<p>好久没写博客了，因为中间发生了很多事，心情很乱，没有心思写博客，改写日记。。。现在又来了美帝开始读研究生，感觉博客还是要继续写。虽然这写东西并不能称作为博客，因为自己写的几乎就是照搬网上的一些东西，更像是一堆技术笔记。不过管他的，反正除了我自己又没人看……</p>
</blockquote>
<p>之前登录阿里云都是像这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh username@IP</span><br></pre></td></tr></table></figure>

<p>然后这几天上课，发现教授要求用公钥私钥登录，免去了写密码的步骤，感觉十分方便（虽然是老技术，自己之前也知道，但是从来都没折腾过，所以一直用着密码登录，真是没有一点点求知欲）。</p>
<a id="more"></a>

<p>具体操作如下：</p>
<h2 id="创建-ssh-autorized-keys文件"><a href="#创建-ssh-autorized-keys文件" class="headerlink" title="创建~/.ssh/autorized_keys文件"></a>创建<code>~/.ssh/autorized_keys</code>文件</h2><p>我的阿里云用的是Ubuntu，没有<code>~/.ssh/autorized_keys</code>，所以要自己手动创建一个</p>
<p>首先登录到客户端，根目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/.ssh</span><br></pre></td></tr></table></figure>

<p>给<code>~/.ssh</code>文件夹赋予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>



<blockquote>
<p>常用修改权限的命令：</p>
</blockquote>
<blockquote>
<p>chmod 600 ××× （只有所有者有读和写的权限）</p>
</blockquote>
<blockquote>
<p> chmod 644 ××× （所有者有读和写的权限，组用户只有读的权限）</p>
</blockquote>
<blockquote>
<p>chmod 700 ××× （只有所有者有读和写以及执行的权限）</p>
</blockquote>
<blockquote>
<p>chmod 666 ××× （每个人都有读和写的权限）</p>
</blockquote>
<blockquote>
<p>chmod 777 ××× （每个人都有读和写以及执行的权限）</p>
</blockquote>
<p>然后通过新建一个<code>autorized_keys</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/autorized_keys</span><br></pre></td></tr></table></figure>

<h2 id="修改-etc-ssh-sshd-config"><a href="#修改-etc-ssh-sshd-config" class="headerlink" title="修改/etc/ssh/sshd_config"></a>修改<code>/etc/ssh/sshd_config</code></h2><p>通过vim打开/etc/ssh/sshd_config文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>取消这一行的注释</p>
<p><img src="../../../../image/5f898949-d22a-4196-8647-1d71693267c3.png"> </p>
<p>然后重启ssh服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service ssh restart</span><br></pre></td></tr></table></figure>

<h2 id="添加自己的公钥"><a href="#添加自己的公钥" class="headerlink" title="添加自己的公钥"></a>添加自己的公钥</h2><p>公钥可以自己生成一个，然后自己保管好私钥就好。由于我的电脑是Mac，就直接用自己的了。</p>
<p>我的公钥在自己电脑的<code>~/.ssh/</code>目录下，通过SCP命令上传到自己的服务器，注意IP后面有个冒号！！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本地命令</span></span><br><span class="line">scp id_rsa.pub username@IP:</span><br></pre></td></tr></table></figure>

<p><img src="../../../../image/3d76a3c9-f64f-49bc-bea4-e91b3cf19f1c.png"></p>
<p>然后回到服务器根目录，通过命令，将公钥添加到 <code>~/.ssh/authorized_keys</code>文件里 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务器命令</span></span><br><span class="line">cat *.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>然后就可以直接通过命令登录了，不再需要输入密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh username@IP</span><br></pre></td></tr></table></figure>

<hr>
<p>对于亚马逊云（AWS）的Amazon Linux，这个Linux里面以及有了<code>~/.ssh/authorized_keys</code>文件，无需创建，直接添加公钥就好～</p>
<blockquote>
<p>这个学校明明那么有钱，却不给学生租点服务器，要学生自己去租亚马逊云。。。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>防止输入时键盘遮住视图</title>
    <url>/2015/08/01/%E9%98%B2%E6%AD%A2%E8%BE%93%E5%85%A5%E6%97%B6%E9%94%AE%E7%9B%98%E9%81%AE%E4%BD%8F%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<p>写程序的时候如果把输入框放到这种位置，输入的时候键盘必然会挡住输入框</p>
<p>就像这样：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-1/33782085.jpg"></p>
<blockquote>
<p>这里面用到了<a href="http://caoyudong.com/2015/08/06/%E5%A6%82%E4%BD%95%E9%9A%90%E8%97%8F%E9%94%AE%E7%9B%98/">点击背景隐藏键盘</a>的黑科技</p>
</blockquote>
<p>所以有一种解决方法是，当点击输入框时，我们把视图升高一部分。然后当输入完成时，将视图回复原来的位置。</p>
<a id="more"></a>

<p>实现这个需要实现两个代理：</p>
<p>当开始输入时把界面升高216，因为键盘高度是216</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">- (<span class="keyword">void</span>)textFieldDidBeginEditing:(<span class="built_in">UITextField</span> *)textField</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.3</span>f animations:^&#123;</span><br><span class="line">        <span class="built_in">CGRect</span> frame = <span class="keyword">self</span>.view.frame;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  键盘高度是216</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        frame.origin.y -= <span class="number">216</span>;</span><br><span class="line">        <span class="keyword">self</span>.view.frame = frame;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入完成后点击完成，再把界面降216个高度，然后隐藏键盘</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OC</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)textFieldShouldReturn:(<span class="built_in">UITextField</span> *)textField</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.3</span>f animations:^&#123;</span><br><span class="line">            <span class="built_in">CGRect</span> frame = <span class="keyword">self</span>.view.frame;</span><br><span class="line">            frame.origin.y +=<span class="number">216</span>;</span><br><span class="line">            <span class="keyword">self</span>.view.frame = frame;</span><br><span class="line">    &#125;];</span><br><span class="line">    [textField resignFirstResponder];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果是这样：</p>
<p><img src="http://7xkfbb.com1.z0.glb.clouddn.com/15-8-1/30117483.jpg"></p>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>美国F1身份申请英国签证攻略</title>
    <url>/2016/12/02/%E7%BE%8E%E5%9B%BDF1%E8%BA%AB%E4%BB%BD%E7%94%B3%E8%AF%B7%E8%8B%B1%E5%9B%BD%E7%AD%BE%E8%AF%81%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<p><strong>先介绍下背景，刚来美国3个月，英语不溜只会点菜那种，无驾照，无SSN，无工作，F1签证。</strong></p>
<p><strong>一般有美国签证申请英国签证是不会被拒签的，除非你的材料有大问题，所以认真准备都是可以过的</strong></p>
<p><strong>去英国玩是个很仓促的决定，所以我是提前一个月才开始申请的，请不要学我，一般要提前三个月</strong></p>
<a id="more"></a>

<h2 id="预约"><a href="#预约" class="headerlink" title="预约"></a>预约</h2><p>首先登陆<a href="https://www.visa4uk.fco.gov.uk/home/welcome" target="_blank" rel="noopener">英国签证网站</a></p>
<p>然后注册一个账号</p>
<p>然后网上填写申请表格，填过DS160的对这个无压力啦。</p>
<blockquote>
<p>这个表很长，可以边填边保存</p>
<p>有一项英国期间逗留地址和联系方式可以填宾馆的地址，或者你朋友家地址（我比较害羞不敢问朋友家地址，填的是宾馆的地址……）</p>
<p>住宿最好提前预定，可以上<a href="http://www.booking.com/" target="_blank" rel="noopener">http://www.booking.com/</a> 预定，免费取消</p>
<p>你预计在英国停留时间必须和你预定的宾馆的时间一定要对上。<del>做假做的像一点，拿到签证后你爱住几天住几天</del></p>
</blockquote>
<p>然后付钱，申请费我付了110刀，貌似降价了（有加急的，我心比较大，没有预约加急的）。</p>
<p>付完钱之后就可以选择预约去Application Support Center的时间，这个地方很多，每个城市都有，可以选择离自己最近的。离我最近的在曼哈顿，但是时间已经排到明年1月8号了，所以只能预约布鲁克林那个。预约主要是为了录取你的指纹然后给你拍一张照片，美名曰：录取生物信息。</p>
<p>然后返回申请的网站，会有一系列文件要你打印，把它们全部下载打印出来，都会用到的。其中有一个叫<code>Appointment Confirmation</code>的很重要，你录取生物信息的时候会用到。</p>
<h2 id="录指纹"><a href="#录指纹" class="headerlink" title="录指纹"></a>录指纹</h2><p>根据预约的时间你要去Application Support Center录取指纹。</p>
<p>布鲁克林的Application Support Center长这样，要不是有谷歌地图我绝对找不到：</p>
<p><img src="../../../../image/c70ed06c-b272-4bb7-89f6-6d8913b4d3f4.jpg"></p>
<p>我选的时间是中午12点，但是我11点就到了，然而因为排长队我两点钟才弄完，所以建议各位去早一点。</p>
<p>另外，这个center里面手机是没信号的，而且不准玩手机，如果玩手机工作人员会凶你……提前带本书啥的去看吧。</p>
<p>布鲁克林这个Application Support Center很有意思，那一片全是犹太人。全都戴着小帽子，留着小辫子，很有意思，可以留心看一下。</p>
<h2 id="寄材料"><a href="#寄材料" class="headerlink" title="寄材料"></a>寄材料</h2><p>一旦取好指纹后，你必须在两周内把所有签证的材料寄出，我由于很急，当天就寄出了，这是我的材料清单：</p>
<ul>
<li>护照</li>
<li>护照复印件</li>
<li>美国visa</li>
<li>旅行计划（酒店订单，机票等</li>
<li>在读证明</li>
<li>住址证明（银行账单）</li>
<li>酒店订单</li>
<li>I-94</li>
<li>两张照片</li>
<li>英国签证申请表</li>
<li>取指纹的表</li>
<li>往返机票</li>
<li>预付费信封</li>
<li>I-20</li>
</ul>
<p>其中有几个要注意的地方：</p>
<h3 id="旅行计划"><a href="#旅行计划" class="headerlink" title="旅行计划"></a>旅行计划</h3><p>我自己也不知道我要去英国玩多久（小伙伴做的旅游攻略，我只是负责拎包），所以我当时预约的时候写了13天，全在伦敦。。这就比较蛋疼了，因为你要编13天的旅行计划。</p>
<p>所以为了凑够天数，我几乎写上了伦敦所有足球俱乐部，我旅行计划是这样的：</p>
<blockquote>
<p>阿森纳（Arsenal）<br>切尔西（Chelsea）<br>富勒姆（Fulham）<br>托特纳姆热刺（Tottenham Hotspur ）<br>西汉姆联（West Ham United）<br>House of parliament<br>伦敦塔桥 Tower Bridge<br>白金汉宫 Buckingham Place<br>Big ben<br>westminster Abbey<br>London Eye<br>British Museum 2day<br>Royal Observatory Greenwich<br>National Gallery<br>Hyde Park<br>The Sherlock Holmes Museum  </p>
</blockquote>
<p>当然，我现在也不知道我到底要玩那些地方。。</p>
<h3 id="在读证明"><a href="#在读证明" class="headerlink" title="在读证明"></a>在读证明</h3><p>在读证明找学校的register center要就好了，一般一两天就给你</p>
<h3 id="银行账单"><a href="#银行账单" class="headerlink" title="银行账单"></a>银行账单</h3><p>这个……越多越好，我这次用的账单只有3K刀，也过了。另外我的存款证明只有三个月。</p>
<h3 id="I-94"><a href="#I-94" class="headerlink" title="I-94"></a>I-94</h3><p>这个表上网下载就好，就是你入境的时候填的表</p>
<p><a href="https://i94.cbp.dhs.gov/I94/#/home" target="_blank" rel="noopener">https://i94.cbp.dhs.gov/I94/#/home</a></p>
<h3 id="两张照片"><a href="#两张照片" class="headerlink" title="两张照片"></a>两张照片</h3><p>照片规格必须是45*35mm</p>
<h3 id="往返机票"><a href="#往返机票" class="headerlink" title="往返机票"></a>往返机票</h3><p>当时我也不知道能不能过，也没定，于是找了万能的淘宝，然后淘宝帮我做了一个假的机票行程，80RMB，包括欧洲五国半个月的所有航班。</p>
<p>建议别这样，估计这假的行程只有英国人会信，或者让店小二给你做的真一点。</p>
<h3 id="预付费信封"><a href="#预付费信封" class="headerlink" title="预付费信封"></a>预付费信封</h3><p>我用UPS寄的，跟他们说你要个return label，然后一起放到寄的材料里面。</p>
<p>另附一个英国大使馆地址，当时找了好久。</p>
<blockquote>
<p>VFS Services USA Inc.<br>UKVI Scanning Hub<br>750 Third Avenue<br>Suite 946<br>New York<br>NY 10017    </p>
</blockquote>
<h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><p>我是11月18日录完指纹</p>
<p>11月18日寄出所有材料</p>
<p>11月21号UPS显示寄到</p>
<p>11月22号大使馆说受到了材料</p>
<p>11月30号说我签证通过</p>
<p>12月2号也就是今天拿到的签证</p>
<p>然后过几天7号要去面签德国签证，很虚。。</p>
<hr>
<p>这里要吐槽下美国快递，真是垃圾。</p>
<p>我寄过去领事馆用的是UPS Ground，9刀</p>
<p>回来的时候我要求用Next Day，31刀，但是送了2天，目前正在研究怎么找他们麻烦。</p>
<blockquote>
<p>然后今天收到的材料是这样的，我交的所有的材料他们都退回给我了，check list没有划勾，在读证明也没有打开。总的来说，他们啥材料都没看……</p>
</blockquote>
<hr>
<p><a href="https://www.gov.uk/government/publications/usa-apply-for-a-uk-visa/apply-for-a-uk-visa-in-the-usa" target="_blank" rel="noopener">https://www.gov.uk/government/publications/usa-apply-for-a-uk-visa/apply-for-a-uk-visa-in-the-usa</a></p>
]]></content>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>C++，python运行速度比较程序</title>
    <url>/2020/08/12/%E5%A6%82%E4%BD%95%E8%AF%81%E6%98%8EC-%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6%E6%AF%94python%E5%BF%AB/</url>
    <content><![CDATA[<p>给别人上课的时候突然有了这个问题。 其实所有人都知道C++运行速度要比Python快许多倍，网上也有很多文章做了解释，但是如果面对一个小白最好的办法就是跑一个功能相同的程序给他看时间对比。然后我就想了个证明方法，感觉还挺直观的，这里记录下。方法就是用两种语言分别写两个冒泡排序，然后从文件中读取随机数，排序之后比较程序运行时间。选择用冒泡排序是因为O（n^2)复杂度，可以拉长程序运行时间，结果比较更直观， 快排结果不太理想，两个程序运行时间差距不大。</p>
<a id="more"></a>

<h2 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h2><p>这里只生成了三万个随机数，因为在我电脑上测试之后发现如果随机数比这多会导致python程序运行时间过长，有点浪费时间。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">a = []</span><br><span class="line">numbers = <span class="number">30000</span></span><br><span class="line">f = open(<span class="string">"randomNumber.txt"</span>, <span class="string">"a"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(numbers):</span><br><span class="line">    a.append(random.uniform(<span class="number">0</span>, <span class="number">1</span>)*numbers)</span><br><span class="line">    f.write(str(a[<span class="number">-1</span>])+<span class="string">","</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="keyword">bool</span> swapp = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">while</span>(swapp)&#123;</span><br><span class="line">        swapp = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>()<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i]&gt;a[i+<span class="number">1</span>] )&#123;</span><br><span class="line">                a[i] += a[i+<span class="number">1</span>];</span><br><span class="line">                a[i+<span class="number">1</span>] = a[i] - a[i+<span class="number">1</span>];</span><br><span class="line">                a[i] -=a[i+<span class="number">1</span>];</span><br><span class="line">                swapp = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::chrono::steady_clock::time_point <span class="built_in">begin</span> = <span class="built_in">std</span>::chrono::steady_clock::now();</span><br><span class="line"></span><br><span class="line">    <span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"randomNumber.txt"</span>, ifstream::in)</span></span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lstNumbers;</span><br><span class="line">    <span class="keyword">while</span> ((!in.eof()) &amp;&amp; in)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> row;</span><br><span class="line">        in &gt;&gt; row;</span><br><span class="line">        replace(row.<span class="built_in">begin</span>(), row.<span class="built_in">end</span>(), <span class="string">','</span>, <span class="string">' '</span>); </span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(row)</span></span>;</span><br><span class="line">        <span class="keyword">double</span> temp;</span><br><span class="line">        <span class="keyword">while</span> (ss &gt;&gt; temp)</span><br><span class="line">        &#123;</span><br><span class="line">            lstNumbers.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    in.<span class="built_in">close</span>();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;lstNumbers.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    bubbleSort(lstNumbers);</span><br><span class="line">    <span class="built_in">std</span>::chrono::steady_clock::time_point <span class="built_in">end</span> = <span class="built_in">std</span>::chrono::steady_clock::now();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Time difference = "</span> &lt;&lt; <span class="built_in">std</span>::chrono::duration_cast&lt;<span class="built_in">std</span>::chrono::milliseconds&gt;(<span class="built_in">end</span> - <span class="built_in">begin</span>).count() / <span class="number">1000.0</span> &lt;&lt; <span class="string">"[s]"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    randomNumberFile = open(<span class="string">'randomNumber.txt'</span>, <span class="string">'r'</span>).readlines()</span><br><span class="line">    numbers = randomNumberFile[<span class="number">0</span>].split(<span class="string">","</span>)</span><br><span class="line">    bubbleSort(numbers)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(arr)</span>:</span> </span><br><span class="line">    n = len(arr) </span><br><span class="line">    <span class="comment"># Traverse through all array elements </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>): </span><br><span class="line">    <span class="comment"># range(n) also work but outer loop will repeat one time more than needed. </span></span><br><span class="line">        <span class="comment"># Last i elements are already in place </span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, n-i<span class="number">-1</span>): </span><br><span class="line">            <span class="comment"># traverse the array from 0 to n-i-1 </span></span><br><span class="line">            <span class="comment"># Swap if the element found is greater </span></span><br><span class="line">            <span class="comment"># than the next element </span></span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>] : </span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j] </span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">main()</span><br><span class="line">print(<span class="string">"--- %s seconds ---"</span> % (time.time() - start_time))</span><br></pre></td></tr></table></figure>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>C++程序使用<code>make</code>编译完直接运行二进制文件一般要9～10秒钟，python程序一般需要 50 秒，快了将近五倍，可以在短时间内看出差距。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>10个TypeScript的坏习惯</title>
    <url>/2021/02/14/10%E4%B8%AATypeScript%E7%9A%84%E5%9D%8F%E4%B9%A0%E6%83%AF/</url>
    <content><![CDATA[<p>Typescript 和 Javascript 在过去的几年里增加了很多新特性，所以我们写代码时的一些习惯可能已经过时了, 其中一些可能已经永久的失去了存在意义。这篇文章列举了10个不应该有的习惯。</p>
<p>在下面的例子中，注意“应该是什么样”只是修复了讨论的问题，代码里面可能还会有别的问题这里不做讨论。</p>
<a id="more"></a>

<h2 id="1-没有开启-strict-模式"><a href="#1-没有开启-strict-模式" class="headerlink" title="1. 没有开启 strict 模式"></a>1. 没有开启 <code>strict</code> 模式</h2><h3 id="错误例子"><a href="#错误例子" class="headerlink" title="错误例子"></a>错误例子</h3><p>在 <code>tsconfig.json</code>里面没有使用 strict 模式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"ES2015"</span>,</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应该是什么样（正确写法）"><a href="#应该是什么样（正确写法）" class="headerlink" title="应该是什么样（正确写法）"></a>应该是什么样（正确写法）</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"ES2015"</span>,</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="string">"strict"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么会这么写"><a href="#为什么会这么写" class="headerlink" title="为什么会这么写"></a>为什么会这么写</h3><p>在现存项目里面开<code>strict</code>模式（严格模式）需要花额外时间修改代码</p>
<h3 id="为什么不该这么写"><a href="#为什么不该这么写" class="headerlink" title="为什么不该这么写"></a>为什么不该这么写</h3><p>开启<code>strict</code>模式 未来修改代码会很容易，磨刀不误砍柴工</p>
<h2 id="2-使用-符号定义默认值"><a href="#2-使用-符号定义默认值" class="headerlink" title="2. 使用 || 符号定义默认值"></a>2. 使用 <code>||</code> 符号定义默认值</h2><h3 id="错误例子-1"><a href="#错误例子-1" class="headerlink" title="错误例子"></a>错误例子</h3><p>用<code>||</code>定义备用默认值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBlogPost</span> (<span class="params">text: <span class="built_in">string</span>, author: <span class="built_in">string</span>, date?: <span class="built_in">Date</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    text: text,</span><br><span class="line">    author: author,</span><br><span class="line">    date: date || <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="应该是什么样（正确写法）-1"><a href="#应该是什么样（正确写法）-1" class="headerlink" title="应该是什么样（正确写法）"></a>应该是什么样（正确写法）</h3><p>使用新的 <code>??</code> 符号，或者直接在参数声明的地方定义fallback value(备用值)</p>
<blockquote>
<p>A fallback value is a value you would use when the main thing you requested is not available.</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBlogPost</span> (<span class="params">text: <span class="built_in">string</span>, author: <span class="built_in">string</span>, date: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>()</span>)</span></span><br><span class="line"><span class="function">  <span class="title">return</span> </span>&#123;</span><br><span class="line">    text: text,</span><br><span class="line">    author: author,</span><br><span class="line">    date: date</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么会这么写-1"><a href="#为什么会这么写-1" class="headerlink" title="为什么会这么写"></a>为什么会这么写</h3><p><code>??</code> 符号在去年发布3.7版本的时候才引入。以及如果在一个超长的函数中间设置默认值的话可能会比较困难。</p>
<h3 id="为什么不该这么写-1"><a href="#为什么不该这么写-1" class="headerlink" title="为什么不该这么写"></a>为什么不该这么写</h3><p>与 <code>||</code> 符号不同， <code>??</code> 只有在前面参数是<code>null</code> 或者 <code>undefined</code>的时候才起作用，如果是false的话就不会。以及如果有个函数很长以至于无法在一开始设置默认值，分开来（splitting）写也是个好办法。</p>
<h2 id="3-使用-any-作为一种类型"><a href="#3-使用-any-作为一种类型" class="headerlink" title="3. 使用 any 作为一种类型"></a>3. 使用 <code>any</code> 作为一种类型</h2><h3 id="错误例子-2"><a href="#错误例子-2" class="headerlink" title="错误例子"></a>错误例子</h3><p>当你不确定变量内容的时候使用<code>any</code>作为一种类型来存放变量</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">loadProducts</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Product</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">'https://api.mysite.com/products'</span>)</span><br><span class="line">  <span class="keyword">const</span> products: <span class="built_in">any</span> = <span class="keyword">await</span> response.json()</span><br><span class="line">  <span class="keyword">return</span> products</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应该是什么样（正确写法）-2"><a href="#应该是什么样（正确写法）-2" class="headerlink" title="应该是什么样（正确写法）"></a>应该是什么样（正确写法）</h3><p>大多数情况下（几乎所有情况），在你用<code>any</code>的时候其实你应该用<code>unknown</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">loadProducts</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Product</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">'https://api.mysite.com/products'</span>)</span><br><span class="line">  <span class="keyword">const</span> products: unknown = <span class="keyword">await</span> response.json()</span><br><span class="line">  <span class="keyword">return</span> products <span class="keyword">as</span> Product[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么会这么写-2"><a href="#为什么会这么写-2" class="headerlink" title="为什么会这么写"></a>为什么会这么写</h3><p><code>any</code>使用起来很方便，因为完全没有类型检查。<code>any</code>通常只会用在官方代码里面（例如 上面例子TypeScript 团队写的<code>response.json()</code> 是一个 <code>Promise&lt;any&gt;</code>类型。</p>
<h3 id="为什么不该这么写-2"><a href="#为什么不该这么写-2" class="headerlink" title="为什么不该这么写"></a>为什么不该这么写</h3><p>因为完全没有类型检查。而规避了类型检查之后很难debug，代码只会在运行的时候，并且数据类型跟我们原先假设的不一样的时候出错。</p>
<h2 id="4-变量-as-某种类型"><a href="#4-变量-as-某种类型" class="headerlink" title="4. 变量 as 某种类型"></a>4. 变量 <code>as</code> 某种类型</h2><h3 id="错误例子-3"><a href="#错误例子-3" class="headerlink" title="错误例子"></a>错误例子</h3><p>让编译器强制类型转换</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">loadProducts</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Product</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">'https://api.mysite.com/products'</span>)</span><br><span class="line">  <span class="keyword">const</span> products: unknown = <span class="keyword">await</span> response.json()</span><br><span class="line">  <span class="keyword">return</span> products <span class="keyword">as</span> Product[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应该是什么样（正确写法）-3"><a href="#应该是什么样（正确写法）-3" class="headerlink" title="应该是什么样（正确写法）"></a>应该是什么样（正确写法）</h3><p>应该使用type guards（类型保护）</p>
<blockquote>
<p> type guards（类型保护）: Some expression that performs a runtime check that guarantees the type in some scope.</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayOfProducts</span> (<span class="params">obj: unknown</span>): <span class="title">obj</span> <span class="title">is</span> <span class="title">Product</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(obj) &amp;&amp; obj.every(isProduct)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isProduct</span> (<span class="params">obj: unknown</span>): <span class="title">obj</span> <span class="title">is</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj != <span class="literal">null</span></span><br><span class="line">    &amp;&amp; <span class="keyword">typeof</span> (obj <span class="keyword">as</span> Product).id === <span class="string">'string'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">loadProducts</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Product</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">'https://api.mysite.com/products'</span>)</span><br><span class="line">  <span class="keyword">const</span> products: unknown = <span class="keyword">await</span> response.json()</span><br><span class="line">  <span class="keyword">if</span> (!isArrayOfProducts(products)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Received malformed products API response'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> products</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么会这么写-3"><a href="#为什么会这么写-3" class="headerlink" title="为什么会这么写"></a>为什么会这么写</h3><p>当JavaScript转换到TypeScript时，TypeScript的编译器常常无法自动猜出JavaScript的类型。这样的话使用<code>as SomeOtherType</code> 能加速转换过程还可以避免产生错误(<code>tsconfig</code>中的设置)</p>
<h3 id="为什么不该这么写-3"><a href="#为什么不该这么写-3" class="headerlink" title="为什么不该这么写"></a>为什么不该这么写</h3><p>就算现在代码能正常运行，但是未来如果有代码改动，type guards（类型保护）能保证详细的检查。</p>
<h2 id="5-测试中使用-as-any"><a href="#5-测试中使用-as-any" class="headerlink" title="5. 测试中使用 as any"></a>5. 测试中使用 <code>as any</code></h2><h3 id="错误例子-4"><a href="#错误例子-4" class="headerlink" title="错误例子"></a>错误例子</h3><p>写测试的时候创建了一个不完整的stand-ins（替身）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  id: <span class="built_in">string</span></span><br><span class="line">  firstName: <span class="built_in">string</span></span><br><span class="line">  lastName: <span class="built_in">string</span></span><br><span class="line">  email: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'createEmailText returns text that greats the user by first name'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user: User = &#123;</span><br><span class="line">    firstName: <span class="string">'John'</span></span><br><span class="line">  &#125; <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">  </span><br><span class="line">  expect(createEmailText(user)).toContain(user.firstName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应该是什么样（正确写法）-4"><a href="#应该是什么样（正确写法）-4" class="headerlink" title="应该是什么样（正确写法）"></a>应该是什么样（正确写法）</h3><p> 如果你的测试需要模拟数据，把模拟数据的逻辑写在模拟对象旁边，并且实现复用。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  id: <span class="built_in">string</span></span><br><span class="line">  firstName: <span class="built_in">string</span></span><br><span class="line">  lastName: <span class="built_in">string</span></span><br><span class="line">  email: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MockUser <span class="keyword">implements</span> User &#123;</span><br><span class="line">  id = <span class="string">'id'</span></span><br><span class="line">  firstName = <span class="string">'John'</span></span><br><span class="line">  lastName = <span class="string">'Doe'</span></span><br><span class="line">  email = <span class="string">'john@doe.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'createEmailText returns text that greats the user by first name'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">new</span> MockUser()</span><br><span class="line"></span><br><span class="line">  expect(createEmailText(user)).toContain(user.firstName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么会这么写-4"><a href="#为什么会这么写-4" class="headerlink" title="为什么会这么写"></a>为什么会这么写</h3><p>刚开始在一个还没有大量测试覆盖率的代码库写测试的时候，常常会遇到一些复杂的数据结构，但是测试只会用到其中的一小部分。不用担心数据结构的其他部分是一个简单的短期解决办法。</p>
<h3 id="为什么不该这么写-4"><a href="#为什么不该这么写-4" class="headerlink" title="为什么不该这么写"></a>为什么不该这么写</h3><p>之前写的测试可能会把我们坑死，如果近期修改了某个变量那我们需要手动修改所有的测试。而且，可能存在一种情况就是某个测试用到了某个我们之前以为不重要的变量，那么关于那个功能的所有的测试都需要手动更新。</p>
<h2 id="6-Optional-properties（可选属性）"><a href="#6-Optional-properties（可选属性）" class="headerlink" title="6. Optional properties（可选属性）"></a>6. Optional properties（可选属性）</h2><h3 id="错误例子-5"><a href="#错误例子-5" class="headerlink" title="错误例子"></a>错误例子</h3><p>对于一些可有可无的属性我们标记为Optional（可选的）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Product &#123;</span><br><span class="line">  id: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">type</span>: <span class="string">'digital'</span> | <span class="string">'physical'</span></span><br><span class="line">  weightInKg?: <span class="built_in">number</span></span><br><span class="line">  sizeInMb?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应该是什么样（正确写法）-5"><a href="#应该是什么样（正确写法）-5" class="headerlink" title="应该是什么样（正确写法）"></a>应该是什么样（正确写法）</h3><p>对于每个可能存在的属性，详细对应的类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Product &#123;</span><br><span class="line">  id: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">type</span>: <span class="string">'digital'</span> | <span class="string">'physical'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> DigitalProduct <span class="keyword">extends</span> Product &#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="string">'digital'</span></span><br><span class="line">  sizeInMb: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PhysicalProduct <span class="keyword">extends</span> Product &#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="string">'physical'</span></span><br><span class="line">  weightInKg: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么会这么写-5"><a href="#为什么会这么写-5" class="headerlink" title="为什么会这么写"></a>为什么会这么写</h3><p>把属性标记为可选的而不是分开来写成不同的类型能减少代码量。而且这种写法需要对产品本身和代码有更深的理解，以及产品需求的变更的时候能减少代码量。</p>
<h3 id="为什么不该这么写-5"><a href="#为什么不该这么写-5" class="headerlink" title="为什么不该这么写"></a>为什么不该这么写</h3><p>类型最大的好处就是编译的时候就能完成对代码的检查而不是运行的时候才发现错误。根据更详细的类型，在编译的时候就能找出一些bug，不然的话会无法注意到。 例如 保证 每个<code>DigitalProduct</code>都有一个<code>sizeInMb</code>。</p>
<h2 id="7-只有一个字母的泛型"><a href="#7-只有一个字母的泛型" class="headerlink" title="7. 只有一个字母的泛型"></a>7. 只有一个字母的泛型</h2><h3 id="错误例子-6"><a href="#错误例子-6" class="headerlink" title="错误例子"></a>错误例子</h3><p>只用一个字母来命名一个泛型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">head</span>&lt;<span class="title">T</span>&gt; (<span class="params">arr: T[]</span>): <span class="title">T</span> | <span class="title">undefined</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应该是什么样（正确写法）-6"><a href="#应该是什么样（正确写法）-6" class="headerlink" title="应该是什么样（正确写法）"></a>应该是什么样（正确写法）</h3><p>给一个完整的，描述性的名字。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">head</span>&lt;<span class="title">Element</span>&gt; (<span class="params">arr: Element[]</span>): <span class="title">Element</span> | <span class="title">undefined</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么会这么写-6"><a href="#为什么会这么写-6" class="headerlink" title="为什么会这么写"></a>为什么会这么写</h3><p>这个习惯可能是因为官方文档都是用一个字母来写泛型的。这样子写起来很快，只用写一个T就好，不用去费力想一个名字。</p>
<h3 id="为什么不该这么写-6"><a href="#为什么不该这么写-6" class="headerlink" title="为什么不该这么写"></a>为什么不该这么写</h3><p>泛型变量依旧是变量。由于IDE的发展我们已经开始放弃了在变量上描述变量技术细节的想法了。例如 <code>const strName = &#39;Daniel&#39;</code> 现在只会写成 <code>const name = &#39;Daniel&#39;</code>。并且一个字母的变量大多数情况下是不推荐的，因为很难不看声明来弄明白他们的含义。</p>
<h2 id="8-非布尔值的布尔检查"><a href="#8-非布尔值的布尔检查" class="headerlink" title="8. 非布尔值的布尔检查"></a>8. 非布尔值的布尔检查</h2><h3 id="错误例子-7"><a href="#错误例子-7" class="headerlink" title="错误例子"></a>错误例子</h3><p>直接用<code>if</code>来检查一个一个变量有没有声明。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNewMessagesResponse</span> (<span class="params">countOfNewMessages?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (countOfNewMessages) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`You have <span class="subst">$&#123;countOfNewMessages&#125;</span> new messages`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Error: Could not retrieve number of new messages'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应该是什么样（正确写法）-7"><a href="#应该是什么样（正确写法）-7" class="headerlink" title="应该是什么样（正确写法）"></a>应该是什么样（正确写法）</h3><p>明确检查我们关心的那种情况</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNewMessagesResponse</span> (<span class="params">countOfNewMessages?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (countOfNewMessages !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`You have <span class="subst">$&#123;countOfNewMessages&#125;</span> new messages`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Error: Could not retrieve number of new messages'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么会这么写-7"><a href="#为什么会这么写-7" class="headerlink" title="为什么会这么写"></a>为什么会这么写</h3><p>把检查写的很短看起来简洁，还可以避免去思考到底要检查什么</p>
<h3 id="为什么不该这么写-7"><a href="#为什么不该这么写-7" class="headerlink" title="为什么不该这么写"></a>为什么不该这么写</h3><p>我们需要想清楚自己到底要检查什么。上面的例子对于<code>countOfNewMessages</code> 是 <code>0</code> 的情况会有不同的结果。</p>
<h2 id="9-Bang-Bang-运算符（-）"><a href="#9-Bang-Bang-运算符（-）" class="headerlink" title="9. Bang Bang 运算符（!!）"></a>9. Bang Bang 运算符（!!）</h2><h3 id="错误例子-8"><a href="#错误例子-8" class="headerlink" title="错误例子"></a>错误例子</h3><p>把一个非布尔值变成布尔值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNewMessagesResponse</span> (<span class="params">countOfNewMessages?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!!countOfNewMessages) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`You have <span class="subst">$&#123;countOfNewMessages&#125;</span> new messages`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Error: Could not retrieve number of new messages'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应该是什么样（正确写法）-8"><a href="#应该是什么样（正确写法）-8" class="headerlink" title="应该是什么样（正确写法）"></a>应该是什么样（正确写法）</h3><p>明确检查我们关心的那种情况</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNewMessagesResponse</span> (<span class="params">countOfNewMessages?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (countOfNewMessages !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`You have <span class="subst">$&#123;countOfNewMessages&#125;</span> new messages`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Error: Could not retrieve number of new messages'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么会这么写-8"><a href="#为什么会这么写-8" class="headerlink" title="为什么会这么写"></a>为什么会这么写</h3><p>理解 <code>!!</code> 符号就像Javascript的入门技巧一样。它看起来简短且简介，如果你已经习惯了它的存在，那你是知道它是什么的。他是一个把任何值转为布尔值的捷径。尤其是项目里面对于<code>null</code>, <code>undefined</code>, and <code>&#39;&#39; </code>没有明确的区分.</p>
<h3 id="为什么不该这么写-8"><a href="#为什么不该这么写-8" class="headerlink" title="为什么不该这么写"></a>为什么不该这么写</h3><p>与其他捷径或者入门技巧一样，使用!!会使代码含义不清。这会使新的开发者很难看懂代码，不管是刚入门编程的或者是刚入门JavaScript的。这也很容易引入一些微妙的bug。上面的例子对于<code>countOfNewMessages</code> 是 <code>0</code> 的情况会也有不同的结果。</p>
<h2 id="10-null"><a href="#10-null" class="headerlink" title="10. != null"></a>10. <code>!= null</code></h2><h3 id="错误例子-9"><a href="#错误例子-9" class="headerlink" title="错误例子"></a>错误例子</h3><p>Bang Bang 运算符的姐妹，<code>!= null</code> 允许我们同时检查<code>null</code> 和 <code>undefined</code>的情况。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNewMessagesResponse</span> (<span class="params">countOfNewMessages?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (countOfNewMessages != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`You have <span class="subst">$&#123;countOfNewMessages&#125;</span> new messages`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Error: Could not retrieve number of new messages'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应该是什么样（正确写法）-9"><a href="#应该是什么样（正确写法）-9" class="headerlink" title="应该是什么样（正确写法）"></a>应该是什么样（正确写法）</h3><p>明确检查我们关心的那种情况</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNewMessagesResponse</span> (<span class="params">countOfNewMessages?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (countOfNewMessages !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`You have <span class="subst">$&#123;countOfNewMessages&#125;</span> new messages`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Error: Could not retrieve number of new messages'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么会这么写-9"><a href="#为什么会这么写-9" class="headerlink" title="为什么会这么写"></a>为什么会这么写</h3><p>如果你看到这里了说明你的代码量和代码技巧都可圈可点。即使最严格的linting规则，强制使用 <code>!==</code> 而不是 <code>!=</code> 的规则都对 <code>!= null</code> 做了例外处理。如果项目代码中对于 <code>null</code> 和 <code>undefined</code> 没有明确的区分，那么<code>!= null</code>是一个检查两者是否存在的捷径。</p>
<h3 id="为什么不该这么写-9"><a href="#为什么不该这么写-9" class="headerlink" title="为什么不该这么写"></a>为什么不该这么写</h3><p>在Javascript早期 <code>null</code> 值是个大麻烦，但是在TypeScript <code>strict</code>模式下他们可以变成十分有价值的工具袋。 一个常见的模式是用 null 代表一个完全不存在的东西，而undefined 代表存在但是未知的量。例如，<code>user.firstName === null</code> 可能代表用户确实没有名字， 但是 <code>user.firstName === undefined</code> 可以代表我们还没问到用户的名字（<code>user.firstName === &#39;&#39;</code> 代表用户名字叫 <code>&#39;&#39;</code>）。</p>
<blockquote>
<p>原文：<a href="https://startup-cto.net/10-bad-typescript-habits-to-break-this-year/" target="_blank" rel="noopener">https://startup-cto.net/10-bad-typescript-habits-to-break-this-year/</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
</search>
